{"version":3,"sources":["App.tsx","Editor/Editor.tsx","Graph/Graph.tsx","Sim/Sim.ts","Sim/Physics/Units/Unit.ts","Sim/Physics/Units/Torque.ts","Sim/Physics/Units/Voltage.ts","Sim/Physics/DCMotor.ts","Sim/Physics/Units/RotationalVelocity.ts","Sim/Physics/Units/Current.ts","Sim/Physics/Units/Length.ts","Sim/Physics/Units/Mass.ts","Sim/Motors/RedLine.ts","Sim/Physics/RotationalFriction.ts","Sim/Physics/Units/RotationalPosition.ts","Sim/Physics/Units/RotationalAcceleration.ts","Sim/Physics/RotationalJoint.ts","Sim/Physics/Units/Time.ts","Sim/Wheels/SteelFlywheel.ts","Sim/Physics/Wheel.ts","Exercises/Exercise.ts","Exercises/Exercise1.ts","reportWebVitals.js","index.tsx"],"names":["App","props","sim","exercise","state","graphData","Sim","newGraphData","setState","Exercise1","run","code","eval","this","controlSystem","window","runControlSystem","reset","setup","fluid","className","xs","initialValue","starterCode","onRun","bind","data","config","graphConfig","React","Component","Editor","editor","setValue","getValue","variant","onClick","mode","theme","name","editorProps","$blockScrolling","height","width","onLoad","colors","Graph","margin","top","right","left","bottom","dataKey","tickFormatter","tickFormater","xLabel","position","offset","yLabel","angle","strokeDasharray","graphKeys","map","i","stroke","dot","updateGraphData","Unit","value","other","isPositive","toReturn","Object","create","Torque","nm","ozIn_to_nm","lbFt_to_nm","oz_in","lb_ft","Voltage","volts","v","DCMotor","operatingVoltage","stallTorque","stallCurrent","breakawayTorque","noLoadSpeed","noLoadCurrent","rotorRadius","rotorMass","gearRatio","torqueConstant","suppliedVoltage","rps","power","kg","Math","pow","m","percentVoltage","fullVoltageTorque","velocity","RotationalVelocity","radS","rps_to_radS","rpm_to_radS","rpm","PI","Current","amps","a","Length","meters","mm","Mass","lbs_to_kg","g","lbs","RedLine","RotationalFriction","staticFriction","dynamicFriction","torque","abs","negate","RotationalPosition","rad","conversion","deg","RotationalAcceleration","radS2","RotationalJoint","initialState","torques","inertias","friction","acceleration","t","Array","isArray","push","length","deltaTime","jTotal","reduce","accumulator","j","current","torqueTotal","s","Time","ms","SteelFlywheel","radius","mass","totalTime","timeStep","joint","motor","wheel","resetables","target","index","isNaN","toFixed","toString","addInertia","inertia","addTorque","currentTime","setPoint","setPower","time","runStep","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ff643da.chunk.js","sourcesContent":["import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './App.css';\n\nimport Editor from './Editor/Editor';\nimport Graph from './Graph/Graph';\nimport Sim from './Sim/Sim';\nimport { Exercise, ExerciseData } from './Exercises/Exercise'\n\nimport Exercise1 from './Exercises/Exercise1';\n\nclass App extends React.Component<{}, {graphData: Array<ExerciseData>}> {\n    private sim: Sim;\n    private exercise: Exercise;\n\n    constructor(props: object) {\n        super(props);\n\n        this.state = {\n            graphData: []\n        }\n\n        this.sim = new Sim(newGraphData => this.setState({ graphData: newGraphData }));\n        this.exercise = new Exercise1();\n    }\n\n    run(code: string) {\n        // eslint-disable-next-line\n        eval(code);\n\n        // @ts-ignore\n        this.exercise.controlSystem = window.runControlSystem;\n        this.exercise.reset();\n        this.sim.setup(this.exercise);\n        this.sim.run();\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <Row className=\"app\">\n                    <Col xs={6} className=\"section editor\">\n                        <Editor initialValue={this.exercise.starterCode} onRun={this.run.bind(this)} />\n                    </Col>\n                    <Col xs={6} className=\"section\">\n                        <Row className=\"preview\">\n\n                        </Row>\n                        <Row className=\"graph\">\n                            <Graph data={this.state.graphData} config={this.exercise.graphConfig} />\n                        </Row>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nimport AceEditor from 'react-ace';\r\nimport { Ace } from 'ace-builds';\r\nimport 'ace-builds/src-min-noconflict/mode-javascript';\r\nimport 'ace-builds/src-min-noconflict/theme-github';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport './Editor.css'\r\n\r\ntype EditorProps = {\r\n    initialValue: string;\r\n    onRun(code: string):  void;\r\n};\r\n\r\nclass Editor extends React.Component<EditorProps, {}> {\r\n    editor: Ace.Editor | null;\r\n\r\n    constructor(props: EditorProps) {\r\n        super(props)\r\n\r\n        this.editor = null;\r\n    }\r\n\r\n    setup(editor: Ace.Editor) {\r\n        this.editor = editor;\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        if (this.editor) {\r\n            this.editor.setValue(this.props.initialValue, -1)\r\n        }\r\n    }\r\n\r\n    private run() {\r\n        this.props.onRun(this.editor ? this.editor.getValue() : \"\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container className=\"editorContainer\">\r\n                <Row className=\"justify-content-between\">\r\n                    <Col xs=\"auto\">\r\n                        <Button variant=\"primary\" onClick={this.reset.bind(this)}>Reset</Button>\r\n                    </Col>\r\n                    <Col xs=\"auto\">\r\n                        <Button variant=\"success\" onClick={this.run.bind(this)}>Run</Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"editorRow\">\r\n                    <AceEditor\r\n                        mode='javascript'\r\n                        theme='github'\r\n                        name='editor'\r\n                        editorProps={{ $blockScrolling: true }}\r\n                        height=\"100%\"\r\n                        width=\"100%\"\r\n                        onLoad={this.setup.bind(this)}\r\n                    />\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Editor","import { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Legend, Label } from 'recharts';\r\nimport { ExerciseData, GraphConfig } from '../Exercises/Exercise'\r\n\r\nconst colors = [\r\n    \"#f95d6a\",\r\n    \"#003f5c\",\r\n    \"#2f4b7c\",\r\n    \"#665191\",\r\n    \"#a05195\",\r\n    \"#d45087\",\r\n    \"#ff7c43\",\r\n    \"#ffa600\"\r\n]\r\n\r\nfunction Graph(props: {data: Array<ExerciseData>, config: GraphConfig}) {\r\n    return (\r\n        <div>\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <LineChart data={props.data} margin={{top: 15, right: 15, left: 30, bottom: 30}}>\r\n                    <XAxis \r\n                        dataKey=\"time\" \r\n                        tickFormatter={props.config.tickFormater} \r\n                    >\r\n                        {props.config.xLabel ? \r\n                            <Label position=\"insideBottomLeft\" offset={-10}>{props.config.xLabel}</Label>\r\n                            :\r\n                            \"\"\r\n                        }\r\n                    </XAxis>\r\n                    <YAxis>\r\n                        {props.config.yLabel ? \r\n                            <Label position=\"left\" angle={-90}>{props.config.yLabel}</Label>\r\n                            :\r\n                            \"\"\r\n                        }\r\n                    </YAxis>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    {\r\n                        props.config.graphKeys ?\r\n                        props.config.graphKeys.map(((dataKey, i) => \r\n                            <Line dataKey={dataKey} stroke={colors[i]} dot={false} key={i}/>\r\n                        ))\r\n                        : <div/>\r\n                    }\r\n                    <Legend/>\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graph;","import { Exercise, ExerciseData } from '../Exercises/Exercise';\r\nclass Sim {\r\n    exercise: Exercise | undefined;\r\n    updateGraphData: (data: Array<ExerciseData>) => void;\r\n\r\n    constructor(updateGraphData: (data: Array<ExerciseData>) => void) {\r\n        this.updateGraphData = updateGraphData;\r\n    }\r\n\r\n    setup(exercise: Exercise) {\r\n        this.exercise = exercise;\r\n    }\r\n\r\n    run() {\r\n        if (this.exercise) {\r\n            this.exercise.reset();\r\n            this.exercise.run();\r\n            this.updateGraphData(this.exercise.data);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Sim;","\r\nclass Unit {\r\n    protected value: number;\r\n\r\n    constructor(value: number) {\r\n        this.value = value;\r\n    }\r\n\r\n    equals(other: Unit): boolean {\r\n        return this.value === other.value;\r\n    }\r\n\r\n    isPositive(): boolean {\r\n        return this.value >= 0;\r\n    }\r\n\r\n    isNegative(): boolean {\r\n        return !this.isPositive();\r\n    }\r\n\r\n    negate<UnitType extends Unit>(): UnitType {\r\n        let toReturn = Object.create(this);\r\n        toReturn.value = -this.value;\r\n        return toReturn;\r\n    }\r\n}\r\n\r\nexport default Unit;","import Unit from './Unit';\r\n\r\nclass Torque extends Unit {\r\n    private static ozIn_to_nm = 0.007062;\r\n    private static lbFt_to_nm = 1.35584;\r\n\r\n    protected constructor(nm: number) {\r\n        super(nm)\r\n    }\r\n\r\n    /**\r\n     * @param nm newton meters\r\n     */\r\n    static nm(nm: number): Torque {\r\n        return new Torque(nm);\r\n    }\r\n\r\n    /**\r\n     * @returns newton meters\r\n     */\r\n    nm(): number {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * @param oz_in Ounce inches\r\n     */\r\n    static oz_in(oz_in: number): Torque {\r\n        return new Torque(oz_in * Torque.ozIn_to_nm);\r\n    }\r\n\r\n    /**\r\n     * @returns ounce inches\r\n     */\r\n    oz_in(): number {\r\n        return this.value / Torque.ozIn_to_nm;\r\n    }\r\n\r\n    /**\r\n     * @param lb_ft Pound*feet\r\n     */\r\n    static lb_ft(lb_ft: number): Torque {\r\n        return new Torque(lb_ft * Torque.lbFt_to_nm);\r\n    }\r\n\r\n    /**\r\n     * @returns pound feet\r\n     */\r\n    lb_ft(): number {\r\n        return this.value / Torque.lbFt_to_nm;\r\n    }\r\n}\r\n\r\nexport default Torque;","import Unit from \"./Unit\";\r\n\r\nclass Voltage extends Unit {\r\n    protected constructor(volts: number) {\r\n        super(volts)\r\n    }\r\n\r\n    /**\r\n     * @param {Number} v volts\r\n     * @returns {Voltage}\r\n     */\r\n    static v(v: number): Voltage {\r\n        return new Voltage(v);\r\n    }\r\n\r\n    /**\r\n     * @returns volts\r\n     */\r\n    v(): number {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport default Voltage","import RotationalVelocity from './Units/RotationalVelocity';\r\nimport Torque from './Units/Torque';\r\nimport Voltage from './Units/Voltage';\r\nimport Current from './Units/Current';\r\nimport Length from './Units/Length';\r\nimport Mass from './Units/Mass';\r\nimport { RotationalState } from './RotationalJoint';\r\nimport { Resetable } from '../../Exercises/Exercise';\r\n\r\nclass DCMotor implements Resetable {\r\n    private operatingVoltage: Voltage;\r\n    private stallTorque: Torque;\r\n    private stallCurrent: Current;\r\n    private breakawayTorque: Torque;\r\n    private noLoadSpeed: RotationalVelocity;\r\n    private noLoadCurrent: Current;\r\n    private rotorRadius: Length;\r\n    private rotorMass: Mass;\r\n    private gearRatio: number;\r\n    private torqueConstant: number;\r\n    private suppliedVoltage: Voltage;\r\n\r\n    /**\r\n     * @param {Voltage} operatingVoltage Rated operating voltage\r\n     * @param {Torque} stallTorque Torque when motor is stalled at operating voltage\r\n     * @param {Current} stallCurrent Current when motor is stalled at operating voltage\r\n     * @param {Torque} breakawayTorque Torque required to overcome static friction\r\n     * @param {RotationalVelocity} noLoadSpeed Rotational velocity with no load at operating voltage\r\n     * @param {Current} noLoadCurrent Current with no load at operating voltage\r\n     * @param {Length} rotorRadius Radius of the internal rotor\r\n     * @param {Mass} rotorMass Mass of the internal rotor\r\n     * @param {Number} gearRatio Ratio of built in gearbox (motor revs/output revs)\r\n     */\r\n    constructor(\r\n        operatingVoltage: Voltage,\r\n        stallTorque: Torque,\r\n        stallCurrent: Current,\r\n        breakawayTorque: Torque,\r\n        noLoadSpeed: RotationalVelocity,\r\n        noLoadCurrent: Current,\r\n        rotorRadius: Length,\r\n        rotorMass: Mass,\r\n        gearRatio: number\r\n    ) {\r\n        this.operatingVoltage = operatingVoltage;\r\n        this.stallTorque = stallTorque;\r\n        this.stallCurrent = stallCurrent;\r\n        this.breakawayTorque = breakawayTorque;\r\n        this.noLoadSpeed = noLoadSpeed;\r\n        this.noLoadCurrent = noLoadCurrent;\r\n        this.rotorRadius = rotorRadius;\r\n        this.rotorMass = rotorMass;\r\n        this.gearRatio = gearRatio;\r\n\r\n        this.torqueConstant = this.stallTorque.nm() / this.noLoadSpeed.rps();\r\n\r\n        this.suppliedVoltage = Voltage.v(0);\r\n    }\r\n\r\n    reset() {\r\n        this.suppliedVoltage = Voltage.v(0);\r\n    }\r\n\r\n    setPower(power: number) {\r\n        this.suppliedVoltage = Voltage.v(this.operatingVoltage.v() * power);\r\n    }\r\n\r\n    inertia(): number {\r\n        // Assume rotor is a solid cylinder\r\n        let rotorInertia = 0.5 * this.rotorMass.kg() * Math.pow(this.rotorRadius.m(), 2);\r\n\r\n        // Translate inertia through gearbox\r\n        let motorInertia = rotorInertia * Math.pow(this.gearRatio, 2)\r\n\r\n        return motorInertia;\r\n    }\r\n\r\n    /**\r\n     * Calculate the output torque of the motor given current\r\n     * rotational velocity and input voltage. Currently ignores motor\r\n     * inductance.\r\n     */\r\n    torque(state: RotationalState): Torque {\r\n        let percentVoltage = this.suppliedVoltage.v() / this.operatingVoltage.v();\r\n        let fullVoltageTorque = this.stallTorque.nm() - (state.velocity.rps() * this.torqueConstant);\r\n\r\n        return Torque.nm(fullVoltageTorque * percentVoltage);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default DCMotor;\r\n","import Unit from \"./Unit\";\r\n\r\nclass RotationalVelocity extends Unit {\r\n    private static rps_to_radS = 2 * Math.PI;\r\n    private static rpm_to_radS = 2 * Math.PI / 60;\r\n\r\n    protected constructor(radS: number) {\r\n        super(radS);\r\n    }\r\n\r\n    /**\r\n     * @param radS radians per second\r\n     */\r\n    static radS(radS: number): RotationalVelocity {\r\n        return new RotationalVelocity(radS);\r\n    }\r\n\r\n    /**\r\n     * @returns radians per second\r\n     */\r\n    radS(): number {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * @param rps rotations per second\r\n     */\r\n    static rps(rps: number): RotationalVelocity {\r\n        return new RotationalVelocity(rps * RotationalVelocity.rps_to_radS);\r\n    }\r\n\r\n    /**\r\n     * @returns rotations per second\r\n     */\r\n    rps(): number {\r\n        return this.value / RotationalVelocity.rps_to_radS;\r\n    }\r\n\r\n    /**\r\n     * @param rpm rotations per minute\r\n     */\r\n    static rpm(rpm: number): RotationalVelocity {\r\n        return new RotationalVelocity(rpm * RotationalVelocity.rpm_to_radS);\r\n    }\r\n\r\n    /**\r\n     * @returns rotations per minute\r\n     */\r\n    rpm(): number {\r\n        return this.value / RotationalVelocity.rpm_to_radS;\r\n    }\r\n}\r\n\r\nexport default RotationalVelocity;","import Unit from \"./Unit\";\r\n\r\nclass Current extends Unit {\r\n    protected constructor(amps: number) {\r\n        super(amps);\r\n    }\r\n\r\n    /**\r\n     * @param a amps\r\n     */\r\n    static a(a: number) : Current {\r\n        return new Current(a);\r\n    }\r\n\r\n    /**\r\n     * @returns amps\r\n     */\r\n    a(): number {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport default Current;","import Unit from \"./Unit\";\r\n\r\nclass Length extends Unit {\r\n    protected constructor(meters: number) {\r\n        super(meters)\r\n    }\r\n\r\n    /**\r\n     * @param m meters\r\n     */\r\n    static m(m: number): Length {\r\n        return new Length(m);\r\n    }\r\n\r\n    /**\r\n     * @returns meters\r\n     */\r\n    m(): number {\r\n        return this.value\r\n    }\r\n\r\n    /**\r\n     * @param mm millimetres\r\n     */\r\n    static mm(mm: number): Length {\r\n        return new Length(mm / 1000);\r\n    }\r\n\r\n    /**\r\n     * @returns millimetres\r\n     */\r\n    mm(): number {\r\n        return this.value * 1000;\r\n    }\r\n\r\n}\r\n\r\nexport default Length;","import Unit from \"./Unit\";\r\n\r\nclass Mass extends Unit {\r\n    private static lbs_to_kg = 0.4536;\r\n\r\n    protected constructor(kg: number) {\r\n        super(kg);\r\n    }\r\n\r\n    /**\r\n     * @param kg kilograms\r\n     */\r\n    static kg(kg: number): Mass {\r\n        return new Mass(kg);\r\n    }\r\n\r\n    /**\r\n     * @returns meters\r\n     */\r\n    kg(): number {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * @param g grams\r\n     */\r\n    static g(g: number): Mass {\r\n        return new Mass(g / 1000);\r\n    }\r\n\r\n    /**\r\n     * @returns grams\r\n     */\r\n    g(): number {\r\n        return this.value * 1000;\r\n    }\r\n\r\n    /**\r\n     * @param lbs pounds\r\n     */\r\n    static lbs(lbs: number): Mass {\r\n        return new Mass(lbs * Mass.lbs_to_kg);\r\n    }\r\n\r\n    /**\r\n     * @returns pounds\r\n     */\r\n    lbs(): number {\r\n        return this.value / Mass.lbs_to_kg;\r\n    }\r\n}\r\n\r\nexport default Mass;","import DCMotor from \"../Physics/DCMotor\";\r\nimport RotationalVelocity from '../Physics/Units/RotationalVelocity';\r\nimport Torque from '../Physics/Units/Torque';\r\nimport Voltage from '../Physics/Units/Voltage';\r\nimport Current from '../Physics/Units/Current';\r\nimport Length from '../Physics/Units/Length';\r\nimport Mass from '../Physics/Units/Mass';\r\n\r\n\r\nexport default class RedLine extends DCMotor {\r\n    private static operatingVoltage = Voltage.v(12);\r\n    private static stallTorque = Torque.nm(0.71);\r\n    private static stallCurrent = Current.a(134);\r\n    private static breakawayTorque = Torque.nm(0.05);\r\n    private static noLoadSpeed = RotationalVelocity.rpm(18700);\r\n    private static noLoadCurrent = Current.a(0.7);\r\n    private static rotorRadius = Length.mm(12.5);\r\n    private static rotorMass = Mass.lbs(0.5);\r\n    private static gearRatio = 1;\r\n\r\n    constructor() {\r\n        super(\r\n            RedLine.operatingVoltage,\r\n            RedLine.stallTorque,\r\n            RedLine.stallCurrent,\r\n            RedLine.breakawayTorque,\r\n            RedLine.noLoadSpeed,\r\n            RedLine.noLoadCurrent,\r\n            RedLine.rotorRadius,\r\n            RedLine.rotorMass,\r\n            RedLine.gearRatio\r\n        )\r\n    }\r\n\r\n}\r\n","import Torque from './Units/Torque';\r\nimport RotationalVelocity from './Units/RotationalVelocity';\r\n\r\nclass RotationalFriction {\r\n    staticFriction: Torque;\r\n    dynamicFriction: Torque;\r\n\r\n    constructor(staticFriction: Torque, dynamicFriction: Torque) {\r\n        this.staticFriction = staticFriction;\r\n        this.dynamicFriction = dynamicFriction;\r\n    }\r\n\r\n    /**\r\n     * Get reaction torque at an rpm. Includes torque\r\n     * applied to correctly handle static torque.\r\n     */\r\n    torque(velocity: RotationalVelocity, torque: Torque): Torque {\r\n        if (velocity.radS() === 0 && Math.abs(torque.nm()) <= this.staticFriction.nm()) {\r\n            return torque.negate();\r\n        } else {\r\n            return torque.isPositive() ? this.dynamicFriction.negate() : this.dynamicFriction;\r\n        }\r\n    }\r\n}\r\n\r\nexport default RotationalFriction;","import Unit from \"./Unit\";\r\n\r\nclass RotationalPosition extends Unit {\r\n    private static conversion = Math.PI * 2 / 360;\r\n\r\n    /**\r\n     * @param rad Radians\r\n     */\r\n    protected constructor(rad: number) {\r\n        super(rad);\r\n    }\r\n\r\n    /**\r\n     * @param rad radians\r\n     * @returns {RotationalPosition}\r\n     */\r\n    static rad(rad: number): RotationalPosition {\r\n        return new RotationalPosition(rad);\r\n    }\r\n\r\n    /**\r\n     * @returns radians\r\n     */\r\n    rad(): number {\r\n        return this.value;\r\n    }\r\n\r\n    static deg(deg: number): RotationalPosition {\r\n        return new RotationalPosition(deg * RotationalPosition.conversion);\r\n    }\r\n\r\n    /**\r\n     * @returns degrees\r\n     */\r\n    deg(): number {\r\n        return this.value / RotationalPosition.conversion;\r\n    }\r\n}\r\n\r\nexport default RotationalPosition;","import Unit from \"./Unit\";\r\n\r\nclass RotationalAcceleration extends Unit {\r\n    protected constructor(radS2: number) {\r\n        super(radS2)\r\n    }\r\n\r\n    /**\r\n     * @param radS2 radians per second squared\r\n     */\r\n    static radS2(radS2: number): RotationalAcceleration {\r\n        return new RotationalAcceleration(radS2);\r\n    }\r\n\r\n    /**\r\n     * @returns radS2 radians per second squared\r\n     */\r\n    radS2() {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport default RotationalAcceleration;","import Torque from './Units/Torque';\r\nimport RotationalPosition from './Units/RotationalPosition';\r\nimport RotationalVelocity from './Units/RotationalVelocity';\r\nimport RotationalAcceleration from './Units/RotationalAcceleration';\r\nimport Time from './Units/Time';\r\nimport { Resetable } from '../../Exercises/Exercise';\r\nimport RotationalFriction from './RotationalFriction';\r\n\r\nexport class RotationalState {\r\n    position: RotationalPosition;\r\n    velocity: RotationalVelocity;\r\n    acceleration: RotationalAcceleration;\r\n    torque: Torque;\r\n\r\n    /**\r\n     * @param p position in radians\r\n     * @param v velocity in radians per second\r\n     * @param a acceleration in radians per second squared\r\n     * @param t torque in newton meters\r\n     */\r\n    constructor(\r\n        p: number | RotationalPosition, \r\n        v: number | RotationalVelocity, \r\n        a: number | RotationalAcceleration,\r\n        t: number | Torque\r\n    ) {\r\n        this.position = (p instanceof RotationalPosition) ? p : RotationalPosition.rad(p);\r\n        this.velocity = (v instanceof RotationalVelocity) ? v : RotationalVelocity.radS(v);\r\n        this.acceleration = (a instanceof RotationalAcceleration) ? a : RotationalAcceleration.radS2(a);\r\n        this.torque = (t instanceof Torque) ? t : Torque.nm(t);\r\n    }\r\n};\r\n\r\ntype torqueFunction = (state: RotationalState) => Torque;\r\ntype inertiaFunction = (state: RotationalState) => number;\r\n\r\nexport class RotationalJoint implements Resetable {\r\n    initialState?: RotationalState;\r\n    data: Array<RotationalState>;\r\n\r\n    torques: Array<torqueFunction>;\r\n    inertias: Array<inertiaFunction>;\r\n    friction?: RotationalFriction;\r\n\r\n    constructor(initialState?: RotationalState) {\r\n        if (initialState) {\r\n            this.initialState = initialState;\r\n            this.data = [initialState];\r\n        } else {\r\n            this.data = [{\r\n                position: RotationalPosition.rad(0),\r\n                velocity: RotationalVelocity.radS(0),\r\n                acceleration: RotationalAcceleration.radS2(0),\r\n                torque: Torque.nm(0)\r\n            }];\r\n        }\r\n        \r\n        this.torques = [];\r\n        this.inertias = [];\r\n    }\r\n\r\n    addTorque(t: Array<torqueFunction> | torqueFunction) {\r\n        if (Array.isArray(t)) {\r\n            this.torques.push(...t);\r\n        } else {\r\n            this.torques.push(t);\r\n        }\r\n    }\r\n\r\n    addInertia(i: Array<inertiaFunction> | inertiaFunction) {\r\n        if (Array.isArray(i)) {\r\n            this.inertias.push(...i);\r\n        } else {\r\n            this.inertias.push(i);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        if (this.initialState) {\r\n            this.data = [this.initialState];\r\n        } else {\r\n            this.data = [{\r\n                position: RotationalPosition.rad(0),\r\n                velocity: RotationalVelocity.radS(0),\r\n                acceleration: RotationalAcceleration.radS2(0),\r\n                torque: Torque.nm(0)\r\n            }];\r\n        }\r\n    }\r\n\r\n    get current(): RotationalState {\r\n        return this.data[this.data.length - 1]\r\n    }\r\n\r\n    run(deltaTime: Time) {\r\n        let jTotal = this.inertias.reduce((accumulator, j) => {\r\n            return accumulator + j(this.current);\r\n        }, 0);\r\n\r\n        let torqueTotal = this.torques.reduce((accumulator, t) => {\r\n            return accumulator + t(this.current).nm();\r\n        }, 0);\r\n\r\n        if (this.friction) {\r\n            torqueTotal += this.friction.torque(this.current.velocity, Torque.nm(torqueTotal)).nm();\r\n        }\r\n\r\n        let acceleration = RotationalAcceleration.radS2(torqueTotal / jTotal);\r\n        let velocity = RotationalVelocity.radS(this.current.velocity.radS() + (acceleration.radS2() * deltaTime.s()))\r\n        let position = RotationalPosition.rad(this.current.position.rad() + (velocity.radS() * deltaTime.s()));\r\n\r\n        this.data.push({\r\n            position,\r\n            velocity,\r\n            acceleration,\r\n            torque: Torque.nm(torqueTotal)\r\n        });\r\n    }\r\n}","import Unit from \"./Unit\";\r\n\r\nclass Time extends Unit {\r\n    protected constructor(s: number) {\r\n        super(s);\r\n    }\r\n\r\n    /**\r\n     * @param s seconds\r\n     */\r\n    static s(s: number): Time {\r\n        return new Time(s);\r\n    }\r\n\r\n    /**\r\n     * @returns seconds\r\n     */\r\n    s(): number {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * @param ms milliseconds\r\n     */\r\n    static ms(ms: number): Time {\r\n        return new Time(ms / 1000);\r\n    }\r\n\r\n    /**\r\n     * @returns milliseconds\r\n     */\r\n    ms(): number {\r\n        return this.value * 1000;\r\n    }\r\n}\r\n\r\nexport default Time;","import Length from \"../Physics/Units/Length\";\r\nimport Mass from \"../Physics/Units/Mass\";\r\nimport Wheel from \"../Physics/Wheel\";\r\n\r\nexport default class SteelFlywheel extends Wheel {\r\n    private static radius = Length.mm(100);\r\n    private static mass = Mass.kg(4);\r\n\r\n    constructor() {\r\n        super(SteelFlywheel.radius, SteelFlywheel.mass);\r\n    }\r\n}","import Mass from './Units/Mass';\r\nimport Length from './Units/Length';\r\n\r\n/**\r\n * Creates a \"wheel\" simulated as a solid cylinder to hand to a motor.\r\n */\r\nclass Wheel {\r\n    radius: Length;\r\n    mass: Mass;\r\n\r\n    constructor(radius: Length, mass: Mass) {\r\n        this.radius = radius;\r\n        this.mass = mass;\r\n    }\r\n\r\n    inertia(): number {\r\n        return 0.5 * this.mass.kg() * Math.pow(this.radius.m(), 2);\r\n    }\r\n}\r\n\r\nexport default Wheel;","import Time from \"../Sim/Physics/Units/Time\";\r\n\r\nexport type ExerciseData = {\r\n    time: number;\r\n    target: number;\r\n    current: number;\r\n    setPoint: number;\r\n}\r\n\r\nexport type GraphConfig = {\r\n    yLabel?: string,\r\n    xLabel?: string,\r\n    tickFormater?(value: any, index: number): string,\r\n    riseTimeValue?: number;\r\n    overshootValue?: number;\r\n    steadyStateError?: number;\r\n    graphKeys?: Array<string>;\r\n}\r\n\r\nexport type ControlSystem = (target: number, current: number) => number;\r\n\r\nexport interface Resetable {\r\n    reset(): void;\r\n}\r\n\r\nexport abstract class Exercise implements Resetable {\r\n    data: Array<ExerciseData>;\r\n    totalTime: Time;\r\n    timeStep: Time;\r\n    starterCode: string;\r\n    controlSystem: ControlSystem;\r\n    abstract graphConfig: GraphConfig;\r\n\r\n    protected abstract runStep(currentTime: Time): void;\r\n\r\n    constructor(totalTime: Time, timeStep: Time, starterCode: string) {\r\n        this.data = [];\r\n\r\n        this.totalTime = totalTime;\r\n        this.timeStep = timeStep;\r\n        this.starterCode = starterCode;\r\n        this.controlSystem = () => 0;\r\n    }\r\n\r\n    reset() {\r\n        this.data = [];\r\n    }\r\n\r\n    run(): void {\r\n        for(let t = 0; t < this.totalTime.ms(); t += this.timeStep.ms()) {\r\n            this.runStep(Time.ms(t));\r\n        }\r\n    }\r\n};\r\n","import RedLine from \"../Sim/Motors/RedLine\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalVelocity from \"../Sim/Physics/Units/RotationalVelocity\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport SteelFlywheel from \"../Sim/Wheels/SteelFlywheel\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to control a 775 pro to spin a\r\n* steel flywheel at 10 revolutions per second (rps).\r\n* \r\n* Your control system is handed two things, a target rps\r\n* and a current rps. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\nfunction runControlSystem(target, current) {\r\n    return 0;\r\n}\r\n\r\nwindow.runControlSystem = runControlSystem;\r\n`\r\n\r\nclass Exercise1 extends Exercise {\r\n    private static totalTime = Time.s(10);\r\n    private static timeStep = Time.ms(100);\r\n\r\n    private staticFriction = Torque.nm(0.2);\r\n    private dynamicFriction = Torque.nm(0.1);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new RedLine();\r\n    private wheel = new SteelFlywheel();\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    private target: RotationalVelocity;\r\n\r\n    graphConfig = {\r\n        yLabel: \"rps\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any, index: number) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number;\r\n        // overshootValue?: number;\r\n        // steadyStateError?: number;\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise1.totalTime, Exercise1.timeStep, starterCode)\r\n\r\n        this.joint.addInertia([\r\n            this.wheel.inertia.bind(this.wheel),\r\n            this.motor.inertia.bind(this.motor)\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque.bind(this.motor),\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.target = RotationalVelocity.rps(10);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.velocity.rps();\r\n        let setPoint = this.controlSystem(this.target.rps(), current);\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target.rps(),\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n}\r\n\r\nexport default Exercise1;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}