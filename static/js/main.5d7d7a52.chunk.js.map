{"version":3,"sources":["App.js","Editor/Editor.js","Graph/Graph.js","Sim/Sim.js","Exercises/Exercise1.js","reportWebVitals.js","index.js"],"names":["App","props","state","graphData","sim","Sim","newGraphData","setState","run","code","eval","exercise","window","CurrentExercise","this","setup","fluid","className","xs","initialValue","Exercise1","onRun","bind","data","React","Component","Editor","editor","reset","setValue","variant","onClick","getValue","mode","theme","name","editorProps","$blockScrolling","height","width","onLoad","Graph","dataKey","tickFormatter","tick","isNaN","toFixed","strokeDasharray","updateGraphData","durationMs","stepMs","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d7d7a52.chunk.js","sourcesContent":["import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './App.css';\n\nimport Editor from './Editor/Editor';\nimport Graph from './Graph/Graph';\nimport Sim from './Sim/Sim';\n\nimport Exercise1 from './Exercises/Exercise1';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      graphData: []\n    }\n\n    this.sim = new Sim(newGraphData => this.setState({graphData: newGraphData}));\n  }\n\n  run(code) {\n    // eslint-disable-next-line\n    eval(code);\n\n    let exercise = new window.CurrentExercise();\n    this.sim.setup(exercise, 5, 0.1);\n    this.sim.run();\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <Row className=\"app\">\n          <Col xs={6} className=\"section editor\">\n            <Editor initialValue={Exercise1} onRun={this.run.bind(this)} />\n          </Col>\n          <Col xs={6} className=\"section\">\n            <Row className=\"preview\">\n\n            </Row>\n            <Row className=\"graph\">\n              <Graph data={this.state.graphData} />\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nimport AceEditor from 'react-ace';\r\nimport 'ace-builds/src-min-noconflict/mode-javascript';\r\nimport 'ace-builds/src-min-noconflict/theme-github';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport './Editor.css'\r\n\r\nclass Editor extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.editor = null;\r\n  }\r\n\r\n  setup(editor) {\r\n    this.editor = editor;\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    this.editor.setValue(this.props.initialValue)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container className=\"editorContainer\">\r\n        <Row className=\"justify-content-between\">\r\n          <Col xs=\"auto\">\r\n            <Button variant=\"primary\" onClick={this.reset.bind(this)}>Reset</Button>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n              <Button variant=\"success\" onClick={() => this.props.onRun(this.editor.getValue())}>Run</Button>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"editorRow\">\r\n          <AceEditor\r\n            mode='javascript'\r\n            theme='github'\r\n            name='editor'\r\n            editorProps={{ $blockScrolling: true }}\r\n            height=\"100%\"\r\n            width=\"100%\"\r\n            onLoad={this.setup.bind(this)}\r\n          />\r\n        </Row>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Editor","import { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Legend } from 'recharts';\r\n\r\nfunction Graph(props) {\r\n  return (\r\n    <div>\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <LineChart data={props.data}>\r\n          <XAxis dataKey=\"time\" tickFormatter={tick => (isNaN(tick) ? tick : tick.toFixed(2))}/>\r\n          <YAxis/>\r\n          <CartesianGrid strokeDasharray=\"3 3\"/>\r\n          <Line dataKey=\"target\"/>\r\n          <Line dataKey=\"current\"/>\r\n          <Legend/>\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Graph;","\r\nclass Sim {\r\n  constructor(updateGraphData) {\r\n    this.updateGraphData = updateGraphData;\r\n  }\r\n\r\n  setup(exercise, durationMs, stepMs) {\r\n    this.exercise = exercise;\r\n    this.durationMs = durationMs;\r\n    this.stepMs = stepMs;\r\n  }\r\n\r\n  run() {\r\n    this.exercise.reset()\r\n\r\n    for (let i = 0; i < this.durationMs; i += this.stepMs) {\r\n      this.exercise.run(i)\r\n    }\r\n    this.updateGraphData(this.exercise.data)\r\n  }\r\n}\r\n\r\nexport default Sim;","const Exercise1 = `\r\nclass Exercise1 {\r\n\r\n  reset() {\r\n    this.data = []\r\n  }\r\n\r\n  run(time) {\r\n    this.data.push({\r\n      time: time,\r\n      target: 0,\r\n      current: Math.sin(time)\r\n    })\r\n  }\r\n}\r\n\r\nwindow.CurrentExercise = Exercise1;`\r\n\r\nexport default Exercise1;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}