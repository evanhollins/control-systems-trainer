{"version":3,"sources":["App.tsx","Editor/Editor.tsx","Graph/Graph.tsx","Sim/Physics/Units/Time.ts","Preview/Preview.tsx","Console/Console.tsx","Sim/Sim.ts","Sim/Physics/Units/Torque.ts","Sim/Physics/Units/Voltage.ts","Utility.ts","Sim/Physics/DCMotor.ts","Sim/Physics/Units/RotationalVelocity.ts","Sim/Physics/Units/Current.ts","Sim/Physics/Units/Length.ts","Sim/Physics/Units/Mass.ts","Sim/Motors/RedLine.ts","Sim/Physics/RotationalFriction.ts","Sim/Physics/Units/RotationalPosition.ts","Sim/Physics/Units/RotationalAcceleration.ts","Sim/Physics/RotationalJoint.ts","Sim/Wheels/SteelFlywheel.ts","Sim/Physics/Wheel.ts","Exercises/Exercise.ts","Exercises/Exercise1.ts","Sim/Motors/NeverestOrbital20.ts","Sim/Physics/MomentOfInertia.ts","Exercises/Exercise10.ts","Exercises/Exercise2.ts","Exercises/Exercise3.ts","Exercises/Exercise4.ts","Exercises/Exercise5.ts","Exercises/Exercise6.ts","Exercises/Exercise7.ts","Exercises/Exercise8.ts","Exercises/Exercise9.ts","Exercises/ExerciseFactory.ts","Sim/Physics/Units/Unit.ts","reportWebVitals.js","index.tsx"],"names":["getParams","URLSearchParams","window","location","search","App","props","sim","exercise","displayTimerHandle","logBuffer","startDisplay","bind","displayCallback","run","print","state","graphData","logMessages","displayTime","params","GetExercise","get","log","Sim","setState","code","undefined","this","clearInterval","func","eval","e","level","message","Function","controlSystem","reset","setup","setTimeout","drawStep","setInterval","DisplayStep","ms","timeStep","newTime","totalTime","arg","toString","JSON","stringify","push","fluid","className","xs","exerciseName","name","initialValue","starterCode","initialTarget","target","initialTime","s","onRun","onTimeChange","Time","onTargetChange","t","draw","data","config","graphConfig","cursor","React","Component","Editor","editor","timeValue","targetValue","onCodeChange","Cookies","setValue","getValue","value","set","variant","onClick","Text","onChange","parseFloat","type","mode","theme","editorProps","$blockScrolling","height","width","onLoad","colors","Graph","margin","top","right","left","bottom","labelFormatter","label","parseInt","toFixed","formatter","dataKey","tickFormatter","tickFormater","xLabel","position","offset","yLabel","angle","x","stroke","strokeDasharray","graphKeys","map","i","dot","Unit","Preview","useState","setWidth","setHeight","measuredDiv","useCallback","node","getBoundingClientRect","style","getComputedStyle","marginTop","marginBottom","paddingTop","paddingBottom","marginLeft","marginRight","paddingLeft","paddingRight","Math","floor","padding","ref","p5","canvasParentRef","createCanvas","parent","Console","updateGraphData","Torque","nm","ozIn_to_nm","lbFt_to_nm","oz_in","lb_ft","Voltage","volts","v","angleToCoordinate","radius","cos","y","sin","DCMotor","operatingVoltage","stallTorque","stallCurrent","breakawayTorque","noLoadSpeed","noLoadCurrent","resistance","rotorRadius","rotorMass","gearRatio","electricalConstant","suppliedVoltage","setPower","inertia","torque","power","min","max","kg","pow","m","velocity","radS","RotationalVelocity","rps_to_radS","rpm_to_radS","rps","rpm","PI","Current","amps","a","Length","meters","mm","Mass","lbs_to_kg","g","lbs","RedLine","RotationalFriction","staticFriction","dynamicFriction","abs","negate","isPositive","RotationalPosition","rad","deg2rad","rot2rad","deg","rot","RotationalAcceleration","radS2","RotationalJoint","initialState","torques","inertias","friction","acceleration","Array","isArray","length","deltaTime","jTotal","reduce","accumulator","j","current","torqueTotal","SteelFlywheel","mass","Exercise","runStep","Exercise1","joint","motor","wheel","resetables","isNaN","addInertia","addTorque","currentTime","setPoint","time","centerX","centerY","background","fill","noStroke","ellipse","NeverestOrbital20","PointMass","RodAboutEnd","Exercise10","robot","rotationToMm","bodyWidth","bodyHeight","lineLength","distance","rectMode","CENTER","rect","strokeWeight","xOffset","numberOfLines","line","pop","strokeCap","SQUARE","distanceToGo","forEach","circle","noFill","arc","HALF_PI","Exercise2","arm","textAlign","textSize","text","GRAY","Exercise3","weight","armLength","Exercise4","gravity","force","Exercise5","Exercise6","Exercise7","car","currentFloor","floorSpacing","elevatorHeight","elevatorWidth","Exercise8","Exercise9","exerciseNumber","other","toReturn","Object","create","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ef66967.chunk.js","sourcesContent":["import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './App.css';\n\nimport Editor from './Editor/Editor';\nimport Graph from './Graph/Graph';\nimport Preview from './Preview/Preview';\nimport Console, { LogMessage } from './Console/Console';\n\nimport Sim from './Sim/Sim';\nimport Time from './Sim/Physics/Units/Time';\nimport { Exercise, ExerciseData } from './Exercises/Exercise';\nimport GetExercise from './Exercises/ExerciseFactory';\n\nfunction getParams() {\n    return new URLSearchParams(window.location.search);\n}\n\ninterface AppState {\n    graphData: Array<ExerciseData>;\n    logMessages: Array<LogMessage>;\n    displayTime: number;\n}\n\nclass App extends React.Component<{}, AppState> {\n    private sim: Sim;\n    private exercise: Exercise;\n    private displayTimerHandle: number | undefined;\n    private static DisplayStep = Time.ms(15);\n    private logBuffer: Array<LogMessage> = [];\n\n    constructor(props: object) {\n        super(props);\n\n        this.startDisplay = this.startDisplay.bind(this);\n        this.displayCallback = this.displayCallback.bind(this);\n        this.run = this.run.bind(this);\n        this.print = this.print.bind(this);\n\n        this.state = {\n            graphData: [],\n            logMessages: [],\n            displayTime: 0\n        }\n\n        let params = getParams();\n        this.exercise = GetExercise(params.get(\"exercise\"));\n        this.exercise.log = this.print;\n\n        this.sim = new Sim(graphData => this.setState({ graphData }));\n\n        // @ts-ignore\n        window.print = this.print;\n    }\n\n    run(code: string) {\n        if (this.displayTimerHandle !== undefined) {\n            window.clearInterval(this.displayTimerHandle);\n            this.displayTimerHandle = undefined;\n        }\n\n        let func = undefined;\n\n        try {\n            // eslint-disable-next-line\n            func = eval(code);\n        } catch (e) {\n            this.setState({\n                logMessages: [{\n                    level: 'error',\n                    message: (e as Error).message\n                }]\n            })\n            return;\n        }\n\n        if (func instanceof Function) {\n            // @ts-ignore\n            this.exercise.controlSystem = func;\n            this.logBuffer = [];\n            this.exercise.reset();\n            this.sim.setup(this.exercise);\n            this.sim.run();\n            window.setTimeout(this.startDisplay, 1500);\n        } else {\n            this.setState({\n                logMessages: [{\n                    level: 'error',\n                    message: \"Function not found. Make sure you haven't changed the original control system function.\"\n                }]\n            })\n        }\n    }\n\n    startDisplay() {\n        this.setState({logMessages: this.logBuffer});\n\n        this.exercise.drawStep = 0;\n        this.setState({displayTime: 0})\n        this.displayTimerHandle = window.setInterval(this.displayCallback, App.DisplayStep.ms());\n    }\n\n    displayCallback() {\n        this.exercise.drawStep += App.DisplayStep.ms() / this.exercise.timeStep.ms();\n        let newTime = this.state.displayTime + App.DisplayStep.ms();\n\n        if (newTime >= this.exercise.totalTime.ms()) {\n            clearInterval(this.displayTimerHandle)\n            this.displayTimerHandle = undefined;\n            this.setState({displayTime: 0});\n        } else {\n            this.setState({displayTime: newTime});\n        }\n    }\n\n    print(arg: any) {\n        let message: string | undefined;\n\n        switch (typeof arg) {\n            case \"string\":\n                message = arg;\n                break;\n            case \"boolean\":\n                message = arg ? \"true\" : \"false\";\n                break;\n            case \"number\":\n                message = arg.toString();\n                break;\n            case \"object\":\n                message = JSON.stringify(arg);\n                break;\n            default:\n                message = undefined;\n        }\n\n        if (message) {\n            this.logBuffer.push({level: \"log\", message});\n        }\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <Row className=\"app\">\n                    <Col xs={6} className=\"section\">\n                        <Row className=\"editor\">\n                            <Editor \n                                exerciseName={this.exercise.name}\n                                initialValue={this.exercise.starterCode} \n                                initialTarget={this.exercise.target}\n                                initialTime={this.exercise.totalTime.s()}\n                                onRun={this.run} \n                                onTimeChange={s => {this.exercise.totalTime = Time.s(s)}}\n                                onTargetChange={t => {this.exercise.target = t}}\n                            />\n                        </Row>\n                        <Row className=\"console\">\n                            <Console logMessages={this.state.logMessages}/>\n                        </Row>\n                    </Col>\n                    <Col xs={6} className=\"section\">\n                        <Row className=\"preview\">\n                            <Preview draw={this.exercise.draw}/>\n                        </Row>\n                        <Row className=\"graph\">\n                            <Graph data={this.state.graphData} config={this.exercise.graphConfig} cursor={this.state.displayTime}/>\n                        </Row>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nimport AceEditor from 'react-ace';\r\nimport { Ace } from 'ace-builds';\r\nimport 'ace-builds/src-min-noconflict/mode-javascript';\r\nimport 'ace-builds/src-min-noconflict/theme-github';\r\n\r\nimport Cookies from 'js-cookie';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport './Editor.css'\r\nimport { FormControl, InputGroup } from 'react-bootstrap';\r\n\r\ntype EditorProps = {\r\n    initialValue: string;\r\n    initialTime: number;\r\n    initialTarget: number;\r\n    exerciseName: string;\r\n    onRun(code: string):  void;\r\n    onTimeChange(time: number): void;\r\n    onTargetChange(target: number): void;\r\n};\r\n\r\nclass Editor extends React.Component<EditorProps, {}> {\r\n    editor: Ace.Editor | null;\r\n    state: {\r\n        timeValue: number,\r\n        targetValue: number\r\n    }\r\n\r\n    constructor(props: EditorProps) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            timeValue: props.initialTime,\r\n            targetValue: props.initialTarget\r\n        };\r\n\r\n        this.editor = null;\r\n        this.onTimeChange = this.onTimeChange.bind(this);\r\n        this.onTargetChange = this.onTargetChange.bind(this);\r\n        this.onCodeChange = this.onCodeChange.bind(this);\r\n        this.setup = this.setup.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.run = this.run.bind(this);\r\n    }\r\n\r\n    setup(editor: Ace.Editor) {\r\n        this.editor = editor;\r\n        let code = Cookies.get(this.props.exerciseName) || this.props.initialValue;\r\n        this.editor.setValue(code, -1)\r\n    }\r\n\r\n    reset() {\r\n        if (this.editor) {\r\n            let code = this.props.initialValue;\r\n            this.editor.setValue(code, -1)\r\n        }\r\n    }\r\n\r\n    private run() {\r\n        this.props.onRun(this.editor ? this.editor.getValue() : \"\");\r\n    }\r\n\r\n    onTimeChange(t: number) {\r\n        this.setState({timeValue: t});\r\n        this.props.onTimeChange(t);\r\n    }\r\n\r\n    onTargetChange(t: number) {\r\n        this.setState({targetValue: t});\r\n        this.props.onTargetChange(t);\r\n    }\r\n\r\n    onCodeChange(value: string) {\r\n        Cookies.set(this.props.exerciseName, value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container className=\"editorContainer\">\r\n                <Row className=\"justify-content-between\">\r\n                    <Col xs=\"auto\">\r\n                        <Button variant=\"primary\" onClick={this.reset.bind(this)}>Reset</Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup>\r\n                            <InputGroup.Text>Time (s)</InputGroup.Text>\r\n                            <FormControl \r\n                                onChange={(e) => this.onTimeChange(parseFloat(e.target.value))}\r\n                                value={this.state.timeValue}\r\n                                type=\"number\"\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup>\r\n                            <InputGroup.Text>Target</InputGroup.Text>\r\n                            <FormControl \r\n                                onChange={(e) => this.onTargetChange(parseFloat(e.target.value))}\r\n                                value={this.state.targetValue}\r\n                                type=\"number\"\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col xs=\"auto\">\r\n                        <Button variant=\"success\" onClick={this.run}>Run</Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"editorRow\">\r\n                    <AceEditor\r\n                        mode='javascript'\r\n                        theme='github'\r\n                        name='editor'\r\n                        editorProps={{ $blockScrolling: true }}\r\n                        height=\"100%\"\r\n                        width=\"100%\"\r\n                        onLoad={this.setup}\r\n                        onChange={this.onCodeChange}\r\n                    />\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Editor","import { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Legend, Label, ReferenceLine, Tooltip } from 'recharts';\r\nimport { ExerciseData, GraphConfig } from '../Exercises/Exercise'\r\n\r\nconst colors = [\r\n    \"#f95d6a\",\r\n    \"#003f5c\",\r\n    \"#2f4b7c\",\r\n    \"#665191\",\r\n    \"#a05195\",\r\n    \"#d45087\",\r\n    \"#ff7c43\",\r\n    \"#ffa600\"\r\n]\r\n\r\ninterface GraphProps {\r\n    data: Array<ExerciseData>;\r\n    config: GraphConfig;\r\n    cursor: number;\r\n};\r\n\r\nfunction Graph(props: GraphProps) {\r\n    return (\r\n        <div>\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <LineChart data={props.data} margin={{top: 15, right: 15, left: 30, bottom: 30}}>\r\n                    <Tooltip \r\n                        labelFormatter={(label: string) => {\r\n                            return \"time: \" + (parseInt(label) / 1000).toFixed(2) + \"s\";\r\n                        }}\r\n                        formatter={(value: string) => {\r\n                            return parseFloat(value).toFixed(2);\r\n                        }}\r\n                    />\r\n                    <XAxis \r\n                        dataKey=\"time\" \r\n                        tickFormatter={props.config.tickFormater} \r\n                    >\r\n                        {props.config.xLabel ? \r\n                            <Label position=\"insideBottomLeft\" offset={-10}>{props.config.xLabel}</Label>\r\n                            :\r\n                            \"\"\r\n                        }\r\n                    </XAxis>\r\n                    <YAxis>\r\n                        {props.config.yLabel ? \r\n                            <Label position=\"left\" angle={-90}>{props.config.yLabel}</Label>\r\n                            :\r\n                            \"\"\r\n                        }\r\n                    </YAxis>\r\n                    <ReferenceLine x={props.cursor} stroke=\"black\"/>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    {\r\n                        props.config.graphKeys ?\r\n                        props.config.graphKeys.map(((dataKey, i) => \r\n                            <Line dataKey={dataKey} stroke={colors[i]} dot={false} key={i}/>\r\n                        ))\r\n                        : null\r\n                    }\r\n                    <Legend/>\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graph;","import Unit from \"./Unit\";\r\n\r\nclass Time extends Unit {\r\n    protected constructor(s: number) {\r\n        super(s);\r\n    }\r\n\r\n    /**\r\n     * @param s seconds\r\n     */\r\n    static s(s: number): Time {\r\n        return new Time(s);\r\n    }\r\n\r\n    /**\r\n     * @returns seconds\r\n     */\r\n    s(): number {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * @param ms milliseconds\r\n     */\r\n    static ms(ms: number): Time {\r\n        return new Time(ms / 1000);\r\n    }\r\n\r\n    /**\r\n     * @returns milliseconds\r\n     */\r\n    ms(): number {\r\n        return this.value * 1000;\r\n    }\r\n}\r\n\r\nexport default Time;","import React, { useCallback, useState } from 'react';\r\nimport Sketch from 'react-p5';\r\nimport p5Types from 'p5';\r\n\r\ntype PreviewProps = {\r\n    draw: (p5: p5Types) => void;\r\n}\r\n\r\nfunction Preview(props: PreviewProps) {\r\n    const [ width, setWidth ] = useState(0);\r\n    const [ height, setHeight ] = useState(0);\r\n\r\n    const measuredDiv = useCallback(node => {\r\n        if (node !== null && width === 0 && height === 0) {\r\n            let height = node.getBoundingClientRect().height;\r\n            let width = node.getBoundingClientRect().width;\r\n            let style = getComputedStyle(node);\r\n\r\n            height -= parseInt(style.marginTop) + parseInt(style.marginBottom) +\r\n                        parseInt(style.paddingTop) + parseInt(style.paddingBottom);\r\n            width -= parseInt(style.marginLeft) + parseInt(style.marginRight) +\r\n                        parseInt(style.paddingLeft) + parseInt(style.paddingRight);\r\n\r\n            setHeight(Math.floor(height));\r\n            setWidth(Math.floor(width));\r\n        }\r\n    }, [height, width]);\r\n\r\n    const setup = (p5: p5Types, canvasParentRef: Element) => {\r\n\t\tp5.createCanvas(width, height).parent(canvasParentRef);\r\n\t};\r\n\r\n\tconst draw = (p5: p5Types) => {\r\n        props.draw(p5);\r\n\t};\r\n\r\n\treturn (\r\n        <div style={{width: \"95%\", height: \"95%\", margin: \"10px\", padding: \"0px\"}} ref={measuredDiv}>\r\n            {\r\n                height !== 0 && width !== 0\r\n                    ? <Sketch setup={setup} draw={draw} />\r\n                    : <div/>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preview;\r\n","import \"./Console.css\"\r\n\r\nexport type LogMessage = {\r\n    level: \"log\" | \"warn\" | \"error\";\r\n    message: string;\r\n}\r\n\r\ninterface ConsoleProps {\r\n    logMessages: Array<LogMessage>;\r\n};\r\n\r\nfunction Console(props: ConsoleProps) {\r\n    return (\r\n        <div className=\"consoleBox\">\r\n            {props.logMessages.map((message, i) => {\r\n                let variant = message.level === \"log\" ? \"text-secondary\" :\r\n                            message.level === \"warn\" ? \"text-warning\" :\r\n                            message.level === \"error\" ? \"text-danger\" : \"\";\r\n                return <p key={i} className={variant}>{message.message}</p>\r\n            })}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Console;","import { Exercise, ExerciseData } from '../Exercises/Exercise';\r\nclass Sim {\r\n    exercise: Exercise | undefined;\r\n    updateGraphData: (data: Array<ExerciseData>) => void;\r\n\r\n    constructor(updateGraphData: (data: Array<ExerciseData>) => void) {\r\n        this.updateGraphData = updateGraphData;\r\n    }\r\n\r\n    setup(exercise: Exercise) {\r\n        this.exercise = exercise;\r\n    }\r\n\r\n    run() {\r\n        if (this.exercise) {\r\n            this.exercise.reset();\r\n            this.exercise.run();\r\n            this.updateGraphData(this.exercise.data);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Sim;","import Unit from './Unit';\r\n\r\nclass Torque extends Unit {\r\n    private static ozIn_to_nm = 0.007062;\r\n    private static lbFt_to_nm = 1.35584;\r\n\r\n    protected constructor(nm: number) {\r\n        super(nm)\r\n    }\r\n\r\n    /**\r\n     * @param nm newton meters\r\n     */\r\n    static nm(nm: number): Torque {\r\n        return new Torque(nm);\r\n    }\r\n\r\n    /**\r\n     * @returns newton meters\r\n     */\r\n    nm(): number {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * @param oz_in Ounce inches\r\n     */\r\n    static oz_in(oz_in: number): Torque {\r\n        return new Torque(oz_in * Torque.ozIn_to_nm);\r\n    }\r\n\r\n    /**\r\n     * @returns ounce inches\r\n     */\r\n    oz_in(): number {\r\n        return this.value / Torque.ozIn_to_nm;\r\n    }\r\n\r\n    /**\r\n     * @param lb_ft Pound*feet\r\n     */\r\n    static lb_ft(lb_ft: number): Torque {\r\n        return new Torque(lb_ft * Torque.lbFt_to_nm);\r\n    }\r\n\r\n    /**\r\n     * @returns pound feet\r\n     */\r\n    lb_ft(): number {\r\n        return this.value / Torque.lbFt_to_nm;\r\n    }\r\n}\r\n\r\nexport default Torque;","import Unit from \"./Unit\";\r\n\r\nclass Voltage extends Unit {\r\n    protected constructor(volts: number) {\r\n        super(volts)\r\n    }\r\n\r\n    /**\r\n     * @param {Number} v volts\r\n     * @returns {Voltage}\r\n     */\r\n    static v(v: number): Voltage {\r\n        return new Voltage(v);\r\n    }\r\n\r\n    /**\r\n     * @returns volts\r\n     */\r\n    v(): number {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport default Voltage","\r\nexport function clamp(x: number, min: number, max: number) {\r\n    if (x < min) {\r\n        return min;\r\n    } else if (x > max) {\r\n        return max;\r\n    }\r\n\r\n    return x;\r\n}\r\n\r\nexport function angleToCoordinate(angle: number, radius: number): {x: number, y: number} {\r\n    let x = radius * Math.cos(angle);\r\n    let y = radius * Math.sin(angle);\r\n\r\n    return {x, y};\r\n}","import RotationalVelocity from './Units/RotationalVelocity';\r\nimport Torque from './Units/Torque';\r\nimport Voltage from './Units/Voltage';\r\nimport Current from './Units/Current';\r\nimport Length from './Units/Length';\r\nimport Mass from './Units/Mass';\r\nimport { RotationalState } from './RotationalJoint';\r\nimport { Resetable } from '../../Exercises/Exercise';\r\nimport { clamp } from \"../../Utility\";\r\n\r\nclass DCMotor implements Resetable {\r\n    private operatingVoltage: Voltage;\r\n    private stallTorque: Torque;\r\n    private stallCurrent: Current;\r\n    private breakawayTorque: Torque;\r\n    private noLoadSpeed: RotationalVelocity;\r\n    private noLoadCurrent: Current;\r\n    private rotorRadius: Length;\r\n    private rotorMass: Mass;\r\n    private gearRatio: number;\r\n    private electricalConstant: number;\r\n    private suppliedVoltage: Voltage;\r\n    private resistance: number;\r\n\r\n    /**\r\n     * @param {Voltage} operatingVoltage Rated operating voltage\r\n     * @param {Torque} stallTorque Torque when motor is stalled at operating voltage\r\n     * @param {Current} stallCurrent Current when motor is stalled at operating voltage\r\n     * @param {Torque} breakawayTorque Torque required to overcome static friction\r\n     * @param {RotationalVelocity} noLoadSpeed Rotational velocity with no load at operating voltage\r\n     * @param {Current} noLoadCurrent Current with no load at operating voltage\r\n     * @param {Number} electricalConstant K_e of the motor\r\n     * @param {Number} resistance Terminal resistance in ohms\r\n     * @param {Length} rotorRadius Radius of the internal rotor\r\n     * @param {Mass} rotorMass Mass of the internal rotor\r\n     * @param {Number} gearRatio Ratio of built in gearbox (motor revs/output revs)\r\n     */\r\n    constructor(\r\n        operatingVoltage: Voltage,\r\n        stallTorque: Torque,\r\n        stallCurrent: Current,\r\n        breakawayTorque: Torque,\r\n        noLoadSpeed: RotationalVelocity,\r\n        noLoadCurrent: Current,\r\n        resistance: number,\r\n        rotorRadius: Length,\r\n        rotorMass: Mass,\r\n        gearRatio: number\r\n    ) {\r\n        this.operatingVoltage = operatingVoltage;\r\n        this.stallTorque = stallTorque;\r\n        this.stallCurrent = stallCurrent;\r\n        this.breakawayTorque = breakawayTorque;\r\n        this.noLoadSpeed = noLoadSpeed;\r\n        this.noLoadCurrent = noLoadCurrent;\r\n        this.rotorRadius = rotorRadius;\r\n        this.rotorMass = rotorMass;\r\n        this.gearRatio = gearRatio;\r\n        this.resistance = resistance;\r\n\r\n        this.electricalConstant = this.stallTorque.nm() / this.operatingVoltage.v();\r\n\r\n        this.suppliedVoltage = Voltage.v(0);\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.setPower = this.setPower.bind(this);\r\n        this.inertia = this.inertia.bind(this);\r\n        this.torque = this.torque.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        this.suppliedVoltage = Voltage.v(0);\r\n    }\r\n\r\n    setPower(power: number) {\r\n        power = clamp(power, -1, 1);\r\n        this.suppliedVoltage = Voltage.v(this.operatingVoltage.v() * power);\r\n    }\r\n\r\n    inertia(): number {\r\n        // Assume rotor is a solid cylinder\r\n        let rotorInertia = 0.5 * this.rotorMass.kg() * Math.pow(this.rotorRadius.m(), 2);\r\n\r\n        // Translate inertia through gearbox\r\n        let motorInertia = rotorInertia * Math.pow(this.gearRatio, 2)\r\n\r\n        return motorInertia;\r\n    }\r\n\r\n    /**\r\n     * Calculate the output torque of the motor given current\r\n     * rotational velocity and input voltage. Currently ignores motor\r\n     * inductance.\r\n     */\r\n    torque(state: RotationalState): Torque {\r\n        let amps = (this.suppliedVoltage.v() - this.electricalConstant * state.velocity.radS()) / this.resistance;\r\n        let torque = amps * this.electricalConstant;\r\n\r\n        return Torque.nm(torque);\r\n    }\r\n}\r\n\r\nexport default DCMotor;\r\n","import Unit from \"./Unit\";\r\n\r\nclass RotationalVelocity extends Unit {\r\n    private static rps_to_radS = 2 * Math.PI;\r\n    private static rpm_to_radS = 2 * Math.PI / 60;\r\n\r\n    protected constructor(radS: number) {\r\n        super(radS);\r\n    }\r\n\r\n    /**\r\n     * @param radS radians per second\r\n     */\r\n    static radS(radS: number): RotationalVelocity {\r\n        return new RotationalVelocity(radS);\r\n    }\r\n\r\n    /**\r\n     * @returns radians per second\r\n     */\r\n    radS(): number {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * @param rps rotations per second\r\n     */\r\n    static rps(rps: number): RotationalVelocity {\r\n        return new RotationalVelocity(rps * RotationalVelocity.rps_to_radS);\r\n    }\r\n\r\n    /**\r\n     * @returns rotations per second\r\n     */\r\n    rps(): number {\r\n        return this.value / RotationalVelocity.rps_to_radS;\r\n    }\r\n\r\n    /**\r\n     * @param rpm rotations per minute\r\n     */\r\n    static rpm(rpm: number): RotationalVelocity {\r\n        return new RotationalVelocity(rpm * RotationalVelocity.rpm_to_radS);\r\n    }\r\n\r\n    /**\r\n     * @returns rotations per minute\r\n     */\r\n    rpm(): number {\r\n        return this.value / RotationalVelocity.rpm_to_radS;\r\n    }\r\n}\r\n\r\nexport default RotationalVelocity;","import Unit from \"./Unit\";\r\n\r\nclass Current extends Unit {\r\n    protected constructor(amps: number) {\r\n        super(amps);\r\n    }\r\n\r\n    /**\r\n     * @param a amps\r\n     */\r\n    static a(a: number) : Current {\r\n        return new Current(a);\r\n    }\r\n\r\n    /**\r\n     * @returns amps\r\n     */\r\n    a(): number {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport default Current;","import Unit from \"./Unit\";\r\n\r\nclass Length extends Unit {\r\n    protected constructor(meters: number) {\r\n        super(meters)\r\n    }\r\n\r\n    /**\r\n     * @param m meters\r\n     */\r\n    static m(m: number): Length {\r\n        return new Length(m);\r\n    }\r\n\r\n    /**\r\n     * @returns meters\r\n     */\r\n    m(): number {\r\n        return this.value\r\n    }\r\n\r\n    /**\r\n     * @param mm millimetres\r\n     */\r\n    static mm(mm: number): Length {\r\n        return new Length(mm / 1000);\r\n    }\r\n\r\n    /**\r\n     * @returns millimetres\r\n     */\r\n    mm(): number {\r\n        return this.value * 1000;\r\n    }\r\n\r\n}\r\n\r\nexport default Length;","import Unit from \"./Unit\";\r\n\r\nclass Mass extends Unit {\r\n    private static lbs_to_kg = 0.4536;\r\n\r\n    protected constructor(kg: number) {\r\n        super(kg);\r\n    }\r\n\r\n    /**\r\n     * @param kg kilograms\r\n     */\r\n    static kg(kg: number): Mass {\r\n        return new Mass(kg);\r\n    }\r\n\r\n    /**\r\n     * @returns meters\r\n     */\r\n    kg(): number {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * @param g grams\r\n     */\r\n    static g(g: number): Mass {\r\n        return new Mass(g / 1000);\r\n    }\r\n\r\n    /**\r\n     * @returns grams\r\n     */\r\n    g(): number {\r\n        return this.value * 1000;\r\n    }\r\n\r\n    /**\r\n     * @param lbs pounds\r\n     */\r\n    static lbs(lbs: number): Mass {\r\n        return new Mass(lbs * Mass.lbs_to_kg);\r\n    }\r\n\r\n    /**\r\n     * @returns pounds\r\n     */\r\n    lbs(): number {\r\n        return this.value / Mass.lbs_to_kg;\r\n    }\r\n}\r\n\r\nexport default Mass;","import DCMotor from \"../Physics/DCMotor\";\r\nimport RotationalVelocity from '../Physics/Units/RotationalVelocity';\r\nimport Torque from '../Physics/Units/Torque';\r\nimport Voltage from '../Physics/Units/Voltage';\r\nimport Current from '../Physics/Units/Current';\r\nimport Length from '../Physics/Units/Length';\r\nimport Mass from '../Physics/Units/Mass';\r\n\r\n\r\nexport default class RedLine extends DCMotor {\r\n    private static operatingVoltage = Voltage.v(12);\r\n    private static stallTorque = Torque.nm(0.71);\r\n    private static stallCurrent = Current.a(134);\r\n    private static breakawayTorque = Torque.nm(0.05);\r\n    private static noLoadSpeed = RotationalVelocity.rpm(18700);\r\n    private static noLoadCurrent = Current.a(0.7);\r\n    private static resistance = 0.1;\r\n    private static rotorRadius = Length.mm(12.5);\r\n    private static rotorMass = Mass.lbs(0.5);\r\n    private static gearRatio = 1;\r\n\r\n    constructor() {\r\n        super(\r\n            RedLine.operatingVoltage,\r\n            RedLine.stallTorque,\r\n            RedLine.stallCurrent,\r\n            RedLine.breakawayTorque,\r\n            RedLine.noLoadSpeed,\r\n            RedLine.noLoadCurrent,\r\n            RedLine.resistance,\r\n            RedLine.rotorRadius,\r\n            RedLine.rotorMass,\r\n            RedLine.gearRatio\r\n        )\r\n    }\r\n\r\n}\r\n","import Torque from './Units/Torque';\r\nimport RotationalVelocity from './Units/RotationalVelocity';\r\n\r\nclass RotationalFriction {\r\n    staticFriction: Torque;\r\n    dynamicFriction: Torque;\r\n\r\n    constructor(staticFriction: Torque, dynamicFriction: Torque) {\r\n        this.staticFriction = staticFriction;\r\n        this.dynamicFriction = dynamicFriction;\r\n    }\r\n\r\n    /**\r\n     * Get reaction torque at an rpm. Includes torque\r\n     * applied to correctly handle static torque.\r\n     */\r\n    torque(velocity: RotationalVelocity, torque: Torque): Torque {\r\n        if (velocity.radS() === 0 && Math.abs(torque.nm()) <= this.staticFriction.nm()) {\r\n            return torque.negate();\r\n        } else {\r\n            return torque.isPositive() ? this.dynamicFriction.negate() : this.dynamicFriction;\r\n        }\r\n    }\r\n}\r\n\r\nexport default RotationalFriction;","import Unit from \"./Unit\";\r\n\r\nclass RotationalPosition extends Unit {\r\n    private static deg2rad = Math.PI * 2 / 360;\r\n    private static rot2rad = Math.PI * 2;\r\n\r\n    /**\r\n     * @param rad Radians\r\n     */\r\n    protected constructor(rad: number) {\r\n        super(rad);\r\n    }\r\n\r\n    /**\r\n     * @param rad radians\r\n     * @returns {RotationalPosition}\r\n     */\r\n    static rad(rad: number): RotationalPosition {\r\n        return new RotationalPosition(rad);\r\n    }\r\n\r\n    /**\r\n     * @returns radians\r\n     */\r\n    rad(): number {\r\n        return this.value;\r\n    }\r\n\r\n    static deg(deg: number): RotationalPosition {\r\n        return new RotationalPosition(deg * RotationalPosition.deg2rad);\r\n    }\r\n\r\n    /**\r\n     * @returns degrees\r\n     */\r\n    deg(): number {\r\n        return this.value / RotationalPosition.deg2rad;\r\n    }\r\n\r\n    /**\r\n     * @param rot rotations\r\n     * @returns {RotationalPosition}\r\n     */\r\n    static rot(rot: number): RotationalPosition {\r\n        return new RotationalPosition(rot * RotationalPosition.rot2rad);\r\n    }\r\n\r\n    /**\r\n     * @returns rotations\r\n     */\r\n    rot(): number {\r\n        return this.value / RotationalPosition.rot2rad;\r\n    }\r\n}\r\n\r\nexport default RotationalPosition;","import Unit from \"./Unit\";\r\n\r\nclass RotationalAcceleration extends Unit {\r\n    protected constructor(radS2: number) {\r\n        super(radS2)\r\n    }\r\n\r\n    /**\r\n     * @param radS2 radians per second squared\r\n     */\r\n    static radS2(radS2: number): RotationalAcceleration {\r\n        return new RotationalAcceleration(radS2);\r\n    }\r\n\r\n    /**\r\n     * @returns radS2 radians per second squared\r\n     */\r\n    radS2() {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport default RotationalAcceleration;","import Torque from './Units/Torque';\r\nimport RotationalPosition from './Units/RotationalPosition';\r\nimport RotationalVelocity from './Units/RotationalVelocity';\r\nimport RotationalAcceleration from './Units/RotationalAcceleration';\r\nimport Time from './Units/Time';\r\nimport { Resetable } from '../../Exercises/Exercise';\r\nimport RotationalFriction from './RotationalFriction';\r\n\r\nexport class RotationalState {\r\n    position: RotationalPosition;\r\n    velocity: RotationalVelocity;\r\n    acceleration: RotationalAcceleration;\r\n    torque: Torque;\r\n\r\n    /**\r\n     * @param p position in radians\r\n     * @param v velocity in radians per second\r\n     * @param a acceleration in radians per second squared\r\n     * @param t torque in newton meters\r\n     */\r\n    constructor(\r\n        p: number | RotationalPosition, \r\n        v: number | RotationalVelocity, \r\n        a: number | RotationalAcceleration,\r\n        t: number | Torque\r\n    ) {\r\n        this.position = (p instanceof RotationalPosition) ? p : RotationalPosition.rad(p);\r\n        this.velocity = (v instanceof RotationalVelocity) ? v : RotationalVelocity.radS(v);\r\n        this.acceleration = (a instanceof RotationalAcceleration) ? a : RotationalAcceleration.radS2(a);\r\n        this.torque = (t instanceof Torque) ? t : Torque.nm(t);\r\n    }\r\n};\r\n\r\ntype torqueFunction = (state: RotationalState) => Torque;\r\ntype inertiaFunction = (state: RotationalState) => number;\r\n\r\nexport class RotationalJoint implements Resetable {\r\n    initialState?: RotationalState;\r\n    data: Array<RotationalState>;\r\n\r\n    torques: Array<torqueFunction>;\r\n    inertias: Array<inertiaFunction>;\r\n    friction?: RotationalFriction;\r\n\r\n    constructor(initialState?: RotationalState) {\r\n        if (initialState) {\r\n            this.initialState = initialState;\r\n            this.data = [initialState];\r\n        } else {\r\n            this.data = [{\r\n                position: RotationalPosition.rad(0),\r\n                velocity: RotationalVelocity.radS(0),\r\n                acceleration: RotationalAcceleration.radS2(0),\r\n                torque: Torque.nm(0)\r\n            }];\r\n        }\r\n        \r\n        this.torques = [];\r\n        this.inertias = [];\r\n    }\r\n\r\n    addTorque(t: Array<torqueFunction> | torqueFunction) {\r\n        if (Array.isArray(t)) {\r\n            this.torques.push(...t);\r\n        } else {\r\n            this.torques.push(t);\r\n        }\r\n    }\r\n\r\n    addInertia(i: Array<inertiaFunction> | inertiaFunction) {\r\n        if (Array.isArray(i)) {\r\n            this.inertias.push(...i);\r\n        } else {\r\n            this.inertias.push(i);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        if (this.initialState) {\r\n            this.data = [this.initialState];\r\n        } else {\r\n            this.data = [{\r\n                position: RotationalPosition.rad(0),\r\n                velocity: RotationalVelocity.radS(0),\r\n                acceleration: RotationalAcceleration.radS2(0),\r\n                torque: Torque.nm(0)\r\n            }];\r\n        }\r\n    }\r\n\r\n    get current(): RotationalState {\r\n        return this.data[this.data.length - 1]\r\n    }\r\n\r\n    run(deltaTime: Time) {\r\n        let jTotal = this.inertias.reduce((accumulator, j) => {\r\n            return accumulator + j(this.current);\r\n        }, 0);\r\n\r\n        let torqueTotal = this.torques.reduce((accumulator, t) => {\r\n            return accumulator + t(this.current).nm();\r\n        }, 0);\r\n\r\n        if (this.friction) {\r\n            torqueTotal += this.friction.torque(this.current.velocity, Torque.nm(torqueTotal)).nm();\r\n        }\r\n\r\n        let acceleration = RotationalAcceleration.radS2(torqueTotal / jTotal);\r\n        let velocity = RotationalVelocity.radS(this.current.velocity.radS() + (acceleration.radS2() * deltaTime.s()))\r\n        let position = RotationalPosition.rad(this.current.position.rad() + (velocity.radS() * deltaTime.s()));\r\n\r\n        this.data.push({\r\n            position,\r\n            velocity,\r\n            acceleration,\r\n            torque: Torque.nm(torqueTotal)\r\n        });\r\n    }\r\n}","import Length from \"../Physics/Units/Length\";\r\nimport Mass from \"../Physics/Units/Mass\";\r\nimport Wheel from \"../Physics/Wheel\";\r\n\r\nexport default class SteelFlywheel extends Wheel {\r\n    private static radius = Length.mm(100);\r\n    private static mass = Mass.kg(4);\r\n\r\n    constructor() {\r\n        super(SteelFlywheel.radius, SteelFlywheel.mass);\r\n    }\r\n}","import Mass from './Units/Mass';\r\nimport Length from './Units/Length';\r\n\r\n/**\r\n * Creates a \"wheel\" simulated as a solid cylinder to hand to a motor.\r\n */\r\nclass Wheel {\r\n    radius: Length;\r\n    mass: Mass;\r\n\r\n    constructor(radius: Length, mass: Mass) {\r\n        this.radius = radius;\r\n        this.mass = mass;\r\n\r\n        this.inertia = this.inertia.bind(this);\r\n    }\r\n\r\n    inertia(): number {\r\n        return 0.5 * this.mass.kg() * Math.pow(this.radius.m(), 2);\r\n    }\r\n}\r\n\r\nexport default Wheel;","import Time from \"../Sim/Physics/Units/Time\";\r\nimport p5Type from \"p5\";\r\n\r\nexport type ControlSystem = {\r\n    (target: number, current: number, timeStep?: number): number;\r\n}\r\n\r\nexport type ExerciseData = {\r\n    time: number;\r\n    target: number;\r\n    current: number;\r\n    setPoint: number;\r\n}\r\n\r\nexport type GraphConfig = {\r\n    yLabel?: string,\r\n    xLabel?: string,\r\n    tickFormater?(value: any, index: number): string,\r\n    riseTimeValue?: number;\r\n    overshootValue?: number;\r\n    steadyStateError?: number;\r\n    graphKeys?: Array<string>;\r\n}\r\n\r\nexport interface Resetable {\r\n    reset(): void;\r\n}\r\n\r\ntype LogFunction = (message: string) => void;\r\n\r\nexport abstract class Exercise implements Resetable {\r\n    abstract name: string;\r\n    data: Array<ExerciseData>;\r\n    totalTime: Time;\r\n    timeStep: Time;\r\n    starterCode: string;\r\n    target: number;\r\n    controlSystem: ControlSystem;\r\n    abstract graphConfig: GraphConfig;\r\n    drawStep: number;\r\n    log: LogFunction;\r\n\r\n    abstract draw(p5: p5Type): void;\r\n    protected abstract runStep(currentTime: Time): void;\r\n\r\n    constructor(totalTime: Time, timeStep: Time, starterCode: string, target: number) {\r\n        this.data = [];\r\n\r\n        this.totalTime = totalTime;\r\n        this.timeStep = timeStep;\r\n        this.starterCode = starterCode;\r\n        this.target = target;\r\n        this.log = () => {};\r\n        this.controlSystem = () => 0;\r\n        this.drawStep = 0;\r\n    }\r\n\r\n    reset() {\r\n        this.data = [];\r\n    }\r\n\r\n    run(): void {\r\n        for(let t = 0; t < this.totalTime.ms(); t += this.timeStep.ms()) {\r\n            this.runStep(Time.ms(t));\r\n        }\r\n    }\r\n};\r\n","import RedLine from \"../Sim/Motors/RedLine\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalVelocity from \"../Sim/Physics/Units/RotationalVelocity\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport SteelFlywheel from \"../Sim/Wheels/SteelFlywheel\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to control a 775 pro to spin a\r\n* steel flywheel at 10 revolutions per second (rps).\r\n* \r\n* Your control system is handed two things, a target rps\r\n* and a current rps. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n(target, current, timeStep) => {\r\n    return 0;\r\n}\r\n\r\n`\r\n\r\nclass Exercise1 extends Exercise {\r\n    name = \"Exercise1\";\r\n    private static totalTime = Time.s(5);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalVelocity.rps(10);\r\n\r\n    private staticFriction = Torque.nm(0.2);\r\n    private dynamicFriction = Torque.nm(0.1);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new RedLine();\r\n    private wheel = new SteelFlywheel();\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n\r\n    graphConfig = {\r\n        yLabel: \"rps\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise1.totalTime, Exercise1.timeStep, starterCode, Exercise1.initialTarget.rps())\r\n\r\n        this.joint.addInertia([\r\n            this.wheel.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque,\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.velocity.rps();\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let radius = 75;\r\n        let angle = this.joint.data[this.drawStep] ? this.joint.data[this.drawStep].position.rad() : 0;\r\n        let {x, y} = angleToCoordinate(angle, radius);\r\n\r\n\t\tp5.background(255);\r\n\r\n        p5.fill(66, 135, 245);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 200, 200);\r\n\r\n        p5.fill(66, 245, 111);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX + x, centerY + y, 20, 20);\r\n    }\r\n}\r\n\r\nexport default Exercise1;","import DCMotor from \"../Physics/DCMotor\";\r\nimport RotationalVelocity from '../Physics/Units/RotationalVelocity';\r\nimport Torque from '../Physics/Units/Torque';\r\nimport Voltage from '../Physics/Units/Voltage';\r\nimport Current from '../Physics/Units/Current';\r\nimport Length from '../Physics/Units/Length';\r\nimport Mass from '../Physics/Units/Mass';\r\n\r\nexport default class NeverestOrbital20 extends DCMotor {\r\n    private static operatingVoltage = Voltage.v(12);\r\n    private static stallTorque = Torque.nm(3.32);\r\n    private static stallCurrent = Current.a(11.5);\r\n    private static breakawayTorque = Torque.oz_in(6.4);\r\n    private static noLoadSpeed = RotationalVelocity.rpm(285);\r\n    private static noLoadCurrent = Current.a(0.2);\r\n    private static resistance = 1;\r\n    private static rotorRadius = Length.mm(12);\r\n    private static rotorMass = Mass.g(83);\r\n    private static gearRatio = 19.2;\r\n\r\n    constructor() {\r\n        super(\r\n            NeverestOrbital20.operatingVoltage,\r\n            NeverestOrbital20.stallTorque,\r\n            NeverestOrbital20.stallCurrent,\r\n            NeverestOrbital20.breakawayTorque,\r\n            NeverestOrbital20.noLoadSpeed,\r\n            NeverestOrbital20.noLoadCurrent,\r\n            NeverestOrbital20.resistance,\r\n            NeverestOrbital20.rotorRadius,\r\n            NeverestOrbital20.rotorMass,\r\n            NeverestOrbital20.gearRatio\r\n        )\r\n    }\r\n\r\n}\r\n","import Mass from \"./Units/Mass\";\r\nimport Length from \"./Units/Length\";\r\n\r\nexport class PointMass {\r\n    mass: Mass;\r\n    length: Length;\r\n\r\n    constructor(mass: Mass, length: Length) {\r\n        this.mass = mass;\r\n        this.length = length;\r\n\r\n        this.inertia = this.inertia.bind(this);\r\n    }\r\n\r\n    inertia(): number {\r\n        return this.mass.kg() * Math.pow(this.length.m(), 2);\r\n    }\r\n}\r\n\r\nexport class RodAboutEnd {\r\n    mass: Mass;\r\n    length: Length;\r\n\r\n    constructor(mass: Mass, length: Length) {\r\n        this.mass = mass;\r\n        this.length = length;\r\n\r\n        this.inertia = this.inertia.bind(this);\r\n    }\r\n\r\n    inertia(): number {\r\n        return this.mass.kg() * Math.pow(this.length.m(), 2) / 3;\r\n    }\r\n}","import RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport { PointMass } from \"../Sim/Physics/MomentOfInertia\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\n\r\nconst starterCode = `\r\n/*\r\n* You are trying to drive a robot to a position!\r\n*\r\n* Your control system is handed two things, current position\r\n* in meters, and a target position in meters. Based on those, \r\n* you must decide what to set the motor to, which is any \r\n* number between -1 and 1.\r\n*\r\n* Good luck!\r\n*/\r\n\r\nlet error = 0;\r\nlet cumulativeError = 0;\r\nlet changeInError = 0;\r\nlet previousError = 0;\r\n\r\nlet Kp = 0;\r\nlet Ki = 0;\r\nlet Kd = 0;\r\n\r\n(target, current, timeStep) => {\r\n    error = target - current;\r\n    changeInError = (error - previousError) / timeStep;\r\n    cumulativeError += error * timeStep;\r\n\r\n    previousError = error;\r\n\r\n    return error * Kp + changeInError * Kd + cumulativeError * Ki;\r\n}\r\n\r\n`\r\n\r\nclass Exercise10 extends Exercise {\r\n    name = \"Exercise10\";\r\n    private static totalTime = Time.s(3);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = 1;\r\n    private static rotationToMm = 0.3;\r\n\r\n    private staticFriction = Torque.nm(2);\r\n    private dynamicFriction = Torque.nm(2);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private robot = new PointMass(Mass.kg(5), Length.mm(50))\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n\r\n    graphConfig = {\r\n        yLabel: \"meters\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise10.totalTime, Exercise10.timeStep, starterCode, Exercise10.initialTarget)\r\n\r\n        this.joint.addInertia([\r\n            this.robot.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque,\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.rot() * Exercise10.rotationToMm;\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        const bodyWidth = 300;\r\n        const bodyHeight = 150;\r\n        const numberOfLines = 5;\r\n        const lineLength = p5.width / (numberOfLines * 2);\r\n\r\n        let distance = this.joint.data[this.drawStep]\r\n                        ? this.joint.data[this.drawStep].position.rot() * Exercise10.rotationToMm\r\n                        : 0;\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Road\r\n        p5.push();\r\n        p5.fill(50);\r\n        p5.noStroke();\r\n        p5.rectMode(p5.CENTER)\r\n        p5.rect(centerX, centerY + 50, p5.width, bodyHeight);\r\n        p5.stroke(230, 221, 53);\r\n        p5.strokeWeight(3);\r\n\r\n        let xOffset = ((distance % 0.2) / 0.2) * (lineLength * 2);\r\n\r\n        for (let i = 0; i < numberOfLines + 1; i++) {\r\n            p5.line(i * 2 * lineLength - xOffset, centerY + 50, i * 2 * lineLength + lineLength - xOffset, centerY + 50);\r\n        }\r\n        p5.pop();\r\n\r\n        // Finish line\r\n        p5.push();\r\n        p5.stroke(201, 34, 34);\r\n        p5.strokeWeight(20);\r\n        p5.strokeCap(p5.SQUARE);\r\n\r\n        let distanceToGo = this.target - distance;\r\n\r\n        p5.line(\r\n            centerX + (distanceToGo / 0.2) * (lineLength * 2), \r\n            centerY - bodyHeight * 0.5 + 50, \r\n            centerX + (distanceToGo / 0.2) * (lineLength * 2),\r\n            centerY + bodyHeight * 0.5 + 50, \r\n        );\r\n        p5.pop();\r\n\r\n        // Body\r\n        p5.push();\r\n        p5.fill(0, 0, 176);\r\n        p5.noStroke();\r\n        p5.rectMode(p5.CENTER);\r\n        p5.rect(centerX, centerY, bodyWidth, bodyHeight);\r\n        p5.pop();\r\n\r\n        // Tire and wheel\r\n        p5.push();\r\n        p5.noStroke();\r\n        [-(bodyWidth * 0.35), 0, (bodyWidth * 0.35)].forEach(xOffset => {\r\n            p5.fill(135);\r\n            p5.circle(centerX + xOffset, centerY + bodyHeight * 0.35, 80);\r\n            p5.fill(0);\r\n            p5.circle(centerX + xOffset, centerY + bodyHeight * 0.35, 40);\r\n        })\r\n        p5.pop();\r\n\r\n        // Dozer\r\n        p5.push();\r\n        p5.noFill();\r\n        p5.stroke(80);\r\n        p5.strokeWeight(10);\r\n        p5.arc(centerX + bodyWidth * 0.5 + 75, centerY, 50, bodyHeight, p5.HALF_PI, -p5.HALF_PI);\r\n        p5.line(centerX + bodyWidth * 0.5, centerY, centerX + bodyWidth * 0.5 + 50, centerY);\r\n        p5.pop();\r\n\r\n    }\r\n}\r\n\r\nexport default Exercise10;","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalPosition from \"../Sim/Physics/Units/RotationalPosition\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { RodAboutEnd } from \"../Sim/Physics/MomentOfInertia\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to point an arm at a particular angle using a Neverest\r\n* orbital 20.\r\n* \r\n* Your control system is handed two things, a target angle in degrees\r\n* and a current angle in degrees. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n(target, current, timeStep) => {\r\n    if (current < target) {\r\n        return 1;\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\n`\r\n\r\nclass Exercise2 extends Exercise {\r\n    name = \"Exercise2\";\r\n    private static totalTime = Time.s(3);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalPosition.deg(180);\r\n\r\n    private staticFriction = Torque.nm(0.2);\r\n    private dynamicFriction = Torque.nm(0.1);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private arm = new RodAboutEnd(Mass.g(100), Length.mm(300));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"degrees\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise2.totalTime, Exercise2.timeStep, starterCode, Exercise2.initialTarget.deg())\r\n\r\n        this.joint.addInertia([\r\n            this.arm.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg();\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let armLength = 200;\r\n        let angle = this.joint.data[this.drawStep].position.rad();\r\n        let {x, y} = angleToCoordinate(angle, armLength);\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Coordinate system\r\n        p5.push();\r\n        p5.strokeWeight(1);\r\n        p5.stroke(100);\r\n        p5.line(centerX, 0, centerX, p5.height);\r\n        p5.line(0, centerY, p5.width, centerY);\r\n        p5.pop();\r\n        \r\n        // Text\r\n        p5.push();\r\n        p5.textAlign(\"center\", \"center\");\r\n        p5.textSize(36);\r\n        p5.fill(255, 0, 0);\r\n        p5.text(\"N\", centerX, 50);\r\n        p5.fill(0);\r\n        p5.text(\"S\", centerX, p5.height - 50);\r\n        p5.text(\"W\", 50, centerY);\r\n        p5.text(\"E\", p5.width - 50, centerY);\r\n\r\n        p5.pop();\r\n\r\n        // Wires\r\n        p5.push();\r\n        p5.strokeWeight(5);\r\n        p5.stroke(0);\r\n        p5.line(centerX - 2, centerY, centerX - 2, centerY - 100);\r\n        p5.stroke(255, 0, 0);\r\n        p5.line(centerX + 2, centerY, centerX + 2, centerY - 100);\r\n        p5.pop();\r\n\r\n        // Motor outline\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.fill(255);\r\n        p5.strokeWeight(3);\r\n        p5.ellipse(centerX, centerY, 100, 100);\r\n        p5.pop();\r\n\r\n        // Bolt holes\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.ellipse(centerX - 35, centerY, 8, 8);\r\n        p5.ellipse(centerX + 35, centerY, 8, 8);\r\n        p5.ellipse(centerX, centerY - 35, 8, 8);\r\n        p5.ellipse(centerX, centerY + 35, 8, 8);\r\n        p5.pop();\r\n\r\n        // Arm\r\n        p5.push();\r\n        p5.stroke(p5.GRAY);\r\n        p5.strokeWeight(20);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX, centerY, centerX + x, centerY + y);\r\n        p5.pop();\r\n\r\n        // Motor shaft\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 10, 10);\r\n        p5.pop();\r\n    }\r\n}\r\n\r\nexport default Exercise2;","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalPosition from \"../Sim/Physics/Units/RotationalPosition\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { PointMass, RodAboutEnd } from \"../Sim/Physics/MomentOfInertia\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to point an arm at a particular angle using a Neverest\r\n* orbital 20. This time, we've added a weight on the end!\r\n* \r\n* Your control system is handed two things, a target angle in degrees\r\n* and a current angle in degrees. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n(target, current, timeStep) => {\r\n    if (current < target) {\r\n        return 1;\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\n`\r\n\r\nclass Exercise3 extends Exercise {\r\n    name = \"Exercise3\";\r\n    private static totalTime = Time.s(3);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalPosition.deg(180);\r\n\r\n    private staticFriction = Torque.nm(0.2);\r\n    private dynamicFriction = Torque.nm(0.1);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private arm = new RodAboutEnd(Mass.g(100), Length.mm(300));\r\n    private weight = new PointMass(Mass.g(200), Length.mm(300));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"degrees\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise3.totalTime, Exercise3.timeStep, starterCode, Exercise3.initialTarget.deg())\r\n\r\n        this.joint.addInertia([\r\n            this.arm.inertia,\r\n            this.weight.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg();\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let armLength = 200;\r\n        let angle = this.joint.data[this.drawStep].position.rad();\r\n        let arm = angleToCoordinate(angle, armLength);\r\n        let weight = angleToCoordinate(angle, armLength - 20);\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Coordinate system\r\n        p5.push();\r\n        p5.strokeWeight(1);\r\n        p5.stroke(100);\r\n        p5.line(centerX, 0, centerX, p5.height);\r\n        p5.line(0, centerY, p5.width, centerY);\r\n        p5.pop();\r\n        \r\n        // Text\r\n        p5.push();\r\n        p5.textAlign(\"center\", \"center\");\r\n        p5.textSize(36);\r\n        p5.fill(255, 0, 0);\r\n        p5.text(\"N\", centerX, 50);\r\n        p5.fill(0);\r\n        p5.text(\"S\", centerX, p5.height - 50);\r\n        p5.text(\"W\", 50, centerY);\r\n        p5.text(\"E\", p5.width - 50, centerY);\r\n\r\n        // Wires\r\n        p5.push();\r\n        p5.strokeWeight(5);\r\n        p5.stroke(0);\r\n        p5.line(centerX - 2, centerY, centerX - 2, centerY - 100);\r\n        p5.stroke(255, 0, 0);\r\n        p5.line(centerX + 2, centerY, centerX + 2, centerY - 100);\r\n        p5.pop();\r\n\r\n        // Motor outline\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.fill(255);\r\n        p5.strokeWeight(3);\r\n        p5.ellipse(centerX, centerY, 100, 100);\r\n        p5.pop();\r\n\r\n        // Bolt holes\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.ellipse(centerX - 35, centerY, 8, 8);\r\n        p5.ellipse(centerX + 35, centerY, 8, 8);\r\n        p5.ellipse(centerX, centerY - 35, 8, 8);\r\n        p5.ellipse(centerX, centerY + 35, 8, 8);\r\n        p5.pop();\r\n\r\n        // Arm\r\n        p5.push();\r\n        p5.stroke(p5.GRAY);\r\n        p5.strokeWeight(20);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX, centerY, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Weight\r\n        p5.push();\r\n        p5.stroke(50);\r\n        p5.strokeWeight(50);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX + weight.x, centerY + weight.y, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Motor shaft\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 10, 10);\r\n        p5.pop();\r\n    }\r\n}\r\n\r\nexport default Exercise3;","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint, RotationalState } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalPosition from \"../Sim/Physics/Units/RotationalPosition\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { RodAboutEnd } from \"../Sim/Physics/MomentOfInertia\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to point an arm at a particular angle using a Neverest\r\n* orbital 20. This time, gravity exists, and it isn't helping!\r\n* \r\n* Your control system is handed two things, a target angle in degrees\r\n* and a current angle in degrees. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n(target, current, timeStep) => {\r\n    if (current < target) {\r\n        return 1;\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\n`\r\n\r\nclass Exercise4 extends Exercise {\r\n    name = \"Exercise4\";\r\n    private static totalTime = Time.s(3);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalPosition.deg(180);\r\n\r\n    private staticFriction = Torque.nm(0.2);\r\n    private dynamicFriction = Torque.nm(0.1);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private arm = new RodAboutEnd(Mass.g(300), Length.mm(300));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"degrees\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise4.totalTime, Exercise4.timeStep, starterCode, Exercise4.initialTarget.deg())\r\n\r\n        this.gravity = this.gravity.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n\r\n        this.joint.addInertia([\r\n            this.arm.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque,\r\n            this.gravity\r\n        ])\r\n        this.joint.friction = this.friction;\r\n    }\r\n\r\n    private gravity(state: RotationalState): Torque {\r\n        let force = this.arm.mass.kg() * 9.81;\r\n        let radius = 0.5 * this.arm.length.m() * Math.cos(state.position.rad());\r\n\r\n        return Torque.nm(force * radius);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg();\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let armLength = 200;\r\n        let angle = this.joint.data[this.drawStep].position.rad();\r\n        let {x, y} = angleToCoordinate(angle, armLength);\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Coordinate system\r\n        p5.push();\r\n        p5.strokeWeight(1);\r\n        p5.stroke(100);\r\n        p5.line(centerX, 0, centerX, p5.height);\r\n        p5.line(0, centerY, p5.width, centerY);\r\n        p5.pop();\r\n\r\n        // Wires\r\n        p5.push();\r\n        p5.strokeWeight(5);\r\n        p5.stroke(0);\r\n        p5.line(centerX - 2, centerY, centerX - 2, centerY - 100);\r\n        p5.stroke(255, 0, 0);\r\n        p5.line(centerX + 2, centerY, centerX + 2, centerY - 100);\r\n        p5.pop();\r\n\r\n        // Motor outline\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.fill(255);\r\n        p5.strokeWeight(3);\r\n        p5.ellipse(centerX, centerY, 100, 100);\r\n        p5.pop();\r\n\r\n        // Bolt holes\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.ellipse(centerX - 35, centerY, 8, 8);\r\n        p5.ellipse(centerX + 35, centerY, 8, 8);\r\n        p5.ellipse(centerX, centerY - 35, 8, 8);\r\n        p5.ellipse(centerX, centerY + 35, 8, 8);\r\n        p5.pop();\r\n\r\n        // Arm\r\n        p5.push();\r\n        p5.stroke(p5.GRAY);\r\n        p5.strokeWeight(20);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX, centerY, centerX + x, centerY + y);\r\n        p5.pop();\r\n\r\n        // Motor shaft\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 10, 10);\r\n        p5.pop();\r\n    }\r\n}\r\n\r\nexport default Exercise4;","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint, RotationalState } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalPosition from \"../Sim/Physics/Units/RotationalPosition\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { RodAboutEnd, PointMass } from \"../Sim/Physics/MomentOfInertia\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to point an arm at a particular angle using a Neverest\r\n* orbital 20. This time, gravity exists, and it isn't helping!\r\n* \r\n* Your control system is handed two things, a target angle in degrees\r\n* and a current angle in degrees. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n(target, current, timeStep) => {\r\n    if (current < target) {\r\n        return 1;\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\n`\r\n\r\nclass Exercise5 extends Exercise {\r\n    name = \"Exercise5\";\r\n    private static totalTime = Time.s(3);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalPosition.deg(180);\r\n\r\n    private staticFriction = Torque.nm(0.2);\r\n    private dynamicFriction = Torque.nm(0.1);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private arm = new RodAboutEnd(Mass.g(100), Length.mm(300));\r\n    private weight = new PointMass(Mass.g(200), Length.mm(300));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"degrees\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise5.totalTime, Exercise5.timeStep, starterCode, Exercise5.initialTarget.deg())\r\n\r\n        this.gravity = this.gravity.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n\r\n        this.joint.addInertia([\r\n            this.arm.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque,\r\n            this.gravity\r\n        ])\r\n        this.joint.friction = this.friction;\r\n    }\r\n\r\n    private gravity(state: RotationalState): Torque {\r\n        let armForce = this.arm.mass.kg() * 9.81;\r\n        let armRaidus = 0.5 * this.arm.length.m() * Math.cos(state.position.rad());\r\n\r\n        let weightForce = this.weight.mass.kg() * 9.81;\r\n        let weightRadius = this.weight.length.m() * Math.cos(state.position.rad()); \r\n\r\n        let torque = armForce * armRaidus + weightForce * weightRadius;\r\n\r\n        return Torque.nm(torque);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg();\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let armLength = 200;\r\n        let angle = this.joint.data[this.drawStep].position.rad();\r\n        let arm = angleToCoordinate(angle, armLength);\r\n        let weight = angleToCoordinate(angle, armLength - 20);\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Coordinate system\r\n        p5.push();\r\n        p5.strokeWeight(1);\r\n        p5.stroke(100);\r\n        p5.line(centerX, 0, centerX, p5.height);\r\n        p5.line(0, centerY, p5.width, centerY);\r\n        p5.pop();\r\n\r\n        // Wires\r\n        p5.push();\r\n        p5.strokeWeight(5);\r\n        p5.stroke(0);\r\n        p5.line(centerX - 2, centerY, centerX - 2, centerY - 100);\r\n        p5.stroke(255, 0, 0);\r\n        p5.line(centerX + 2, centerY, centerX + 2, centerY - 100);\r\n        p5.pop();\r\n\r\n        // Motor outline\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.fill(255);\r\n        p5.strokeWeight(3);\r\n        p5.ellipse(centerX, centerY, 100, 100);\r\n        p5.pop();\r\n\r\n        // Bolt holes\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.ellipse(centerX - 35, centerY, 8, 8);\r\n        p5.ellipse(centerX + 35, centerY, 8, 8);\r\n        p5.ellipse(centerX, centerY - 35, 8, 8);\r\n        p5.ellipse(centerX, centerY + 35, 8, 8);\r\n        p5.pop();\r\n\r\n        // Arm\r\n        p5.push();\r\n        p5.stroke(p5.GRAY);\r\n        p5.strokeWeight(20);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX, centerY, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Weight\r\n        p5.push();\r\n        p5.stroke(50);\r\n        p5.strokeWeight(50);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX + weight.x, centerY + weight.y, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Motor shaft\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 10, 10);\r\n        p5.pop();\r\n    }\r\n}\r\n\r\nexport default Exercise5;","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalPosition from \"../Sim/Physics/Units/RotationalPosition\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { PointMass, RodAboutEnd } from \"../Sim/Physics/MomentOfInertia\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to point an arm at a particular angle using a Neverest\r\n* orbital 20. This time, we've added a weight on the end! Additionally,\r\n* we have added super special bearings that reduce friction!\r\n* \r\n* Your control system is handed two things, a target angle in degrees\r\n* and a current angle in degrees. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n\r\nlet Kp = 0.003;\r\n\r\n(target, current, timeStep) => {\r\n    let error = target - current;\r\n\r\n    return error * Kp;\r\n}\r\n\r\n`\r\n\r\nclass Exercise6 extends Exercise {\r\n    name = \"Exercise6\";\r\n    private static totalTime = Time.s(3);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalPosition.deg(180);\r\n\r\n    private staticFriction = Torque.nm(0.02);\r\n    private dynamicFriction = Torque.nm(0.01);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private arm = new RodAboutEnd(Mass.g(100), Length.mm(300));\r\n    private weight = new PointMass(Mass.g(200), Length.mm(300));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"degrees\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise6.totalTime, Exercise6.timeStep, starterCode, Exercise6.initialTarget.deg())\r\n\r\n        this.joint.addInertia([\r\n            this.arm.inertia,\r\n            this.weight.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg();\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let armLength = 200;\r\n        let angle = this.joint.data[this.drawStep].position.rad();\r\n        let arm = angleToCoordinate(angle, armLength);\r\n        let weight = angleToCoordinate(angle, armLength - 20);\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Coordinate system\r\n        p5.push();\r\n        p5.strokeWeight(1);\r\n        p5.stroke(100);\r\n        p5.line(centerX, 0, centerX, p5.height);\r\n        p5.line(0, centerY, p5.width, centerY);\r\n        p5.pop();\r\n        \r\n        // Text\r\n        p5.push();\r\n        p5.textAlign(\"center\", \"center\");\r\n        p5.textSize(36);\r\n        p5.fill(255, 0, 0);\r\n        p5.text(\"N\", centerX, 50);\r\n        p5.fill(0);\r\n        p5.text(\"S\", centerX, p5.height - 50);\r\n        p5.text(\"W\", 50, centerY);\r\n        p5.text(\"E\", p5.width - 50, centerY);\r\n\r\n        // Wires\r\n        p5.push();\r\n        p5.strokeWeight(5);\r\n        p5.stroke(0);\r\n        p5.line(centerX - 2, centerY, centerX - 2, centerY - 100);\r\n        p5.stroke(255, 0, 0);\r\n        p5.line(centerX + 2, centerY, centerX + 2, centerY - 100);\r\n        p5.pop();\r\n\r\n        // Motor outline\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.fill(255);\r\n        p5.strokeWeight(3);\r\n        p5.ellipse(centerX, centerY, 100, 100);\r\n        p5.pop();\r\n\r\n        // Bolt holes\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.ellipse(centerX - 35, centerY, 8, 8);\r\n        p5.ellipse(centerX + 35, centerY, 8, 8);\r\n        p5.ellipse(centerX, centerY - 35, 8, 8);\r\n        p5.ellipse(centerX, centerY + 35, 8, 8);\r\n        p5.pop();\r\n\r\n        // Arm\r\n        p5.push();\r\n        p5.stroke(p5.GRAY);\r\n        p5.strokeWeight(20);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX, centerY, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Weight\r\n        p5.push();\r\n        p5.stroke(50);\r\n        p5.strokeWeight(50);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX + weight.x, centerY + weight.y, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Motor shaft\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 10, 10);\r\n        p5.pop();\r\n    }\r\n}\r\n\r\nexport default Exercise6;","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { PointMass } from \"../Sim/Physics/MomentOfInertia\";\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are controlling an elevator, and need to up to the top floor.\r\n* This elevator is empty, so the counterweight removes all affects \r\n* of gravity.\r\n* \r\n* Your control system is handed a target floor and a current floor, \r\n* where the ground floor is 0, first floor is 1, etc. If the elevator\r\n* is between floors, you get a floating point number, e.g. 0.5.\r\n* Based on those, you must decide what to set the motor to, which is \r\n* any number between -1 and 1.\r\n*\r\n* Good luck!\r\n*/\r\n\r\nlet Kp = 0;\r\nlet Kd = 0;\r\nlet previous = 0;\r\n\r\n(target, current, timeStep) => {\r\n    let error = target - current;\r\n    let changeInError = (current - previous) / timeStep;\r\n    previous = current;\r\n\r\n    return error * Kp + changeInError * Kd;\r\n}\r\n\r\n`\r\n\r\nclass Exercise7 extends Exercise {\r\n    name = \"Exercise7\";\r\n    private static totalTime = Time.s(9);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = 3;\r\n\r\n    private staticFriction = Torque.nm(0.02);\r\n    private dynamicFriction = Torque.nm(0.01);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private car = new PointMass(Mass.kg(1), Length.mm(300));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"floor\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise7.totalTime, Exercise7.timeStep, starterCode, Exercise7.initialTarget)\r\n\r\n        this.joint.addInertia([\r\n            this.car.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg() / (5 * 360);\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n\r\n        let currentFloor = this.joint.data[this.drawStep].position.deg() / (360 * 5);\r\n\r\n        let floors = 4;\r\n        let floorSpacing  = p5.height / (floors + 1);\r\n        let elevatorHeight = floorSpacing;\r\n        let elevatorWidth = floorSpacing * 0.75;\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Floors background\r\n        p5.push();\r\n        p5.noStroke();\r\n        p5.fill(207, 91, 85);\r\n        p5.rect(0, floorSpacing, centerX, p5.height);\r\n        p5.pop();\r\n\r\n        // Elevator background\r\n        p5.push();\r\n        p5.noStroke();\r\n        p5.fill(100, 100, 100);\r\n        p5.rect(centerX, 0, elevatorWidth * 2, p5.height);\r\n        p5.pop();\r\n\r\n        // Elevator background\r\n        p5.push();\r\n        p5.noStroke();\r\n        p5.fill(0);\r\n        p5.ellipse(centerX + elevatorWidth, floorSpacing / 2, elevatorWidth, elevatorWidth);\r\n        p5.pop();\r\n\r\n        // Elevator\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.fill(171, 164, 87);\r\n        p5.rect(centerX, p5.height - elevatorHeight - (currentFloor * elevatorHeight), elevatorWidth, elevatorHeight);\r\n        p5.pop();\r\n\r\n        // Weight\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.rect(centerX + elevatorWidth + 10, elevatorHeight * (currentFloor + 1), elevatorWidth - 20, elevatorHeight);\r\n        p5.pop();\r\n\r\n        // Cable\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.line(centerX + (elevatorWidth / 2), elevatorHeight / 2, centerX + (elevatorWidth / 2), p5.height - elevatorHeight * (currentFloor + 1))\r\n        p5.line(centerX + (elevatorWidth * 1.5), elevatorHeight / 2, centerX + (elevatorWidth * 1.5), elevatorHeight * (currentFloor + 1))\r\n        p5.pop();\r\n\r\n        // Floors\r\n        for (let i = 0; i < floors; i++) {\r\n            p5.push();\r\n            p5.stroke(0);\r\n            p5.strokeWeight(5);\r\n            let height = p5.height - (i * floorSpacing);\r\n            p5.line(0, height, centerX, height);\r\n            p5.pop();\r\n        }\r\n    }\r\n}\r\n\r\nexport default Exercise7;","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint, RotationalState } from \"../Sim/Physics/RotationalJoint\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { PointMass } from \"../Sim/Physics/MomentOfInertia\";\r\nimport RotationalPosition from \"../Sim/Physics/Units/RotationalPosition\";\r\nimport RotationalVelocity from \"../Sim/Physics/Units/RotationalVelocity\";\r\nimport RotationalAcceleration from \"../Sim/Physics/Units/RotationalAcceleration\";\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are controlling an elevator, and need to up to the top floor.\r\n* This elevator is no longer empty, and you must contend with gravity!\r\n* \r\n* Your control system is handed a target floor and a current floor, \r\n* where the ground floor is 0, first floor is 1, etc. If the elevator\r\n* is between floors, you get a floating point number e.g. 0.5.\r\n* Based on those, you must decide what to set the motor to, which is \r\n* any number between -1 and 1.\r\n*\r\n* Good luck!\r\n*/\r\n\r\nlet Kp = 0;\r\nlet Kd = 0;\r\nlet previous = 0;\r\n\r\n(target, current, timeStep) => {\r\n    let error = target - current;\r\n    let changeInError = (current - previous) / timeStep;\r\n    previous = current;\r\n\r\n    return error * Kp + changeInError * Kd;\r\n}\r\n\r\n`\r\n\r\nclass Exercise8 extends Exercise {\r\n    name = \"Exercise8\";\r\n    private static totalTime = Time.s(9);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = 0;\r\n    private initialState: RotationalState = {\r\n        position: RotationalPosition.deg(360 * 5 * 2),\r\n        velocity: RotationalVelocity.radS(0),\r\n        acceleration: RotationalAcceleration.radS2(0),\r\n        torque: Torque.nm(0)\r\n    }\r\n\r\n    private staticFriction = Torque.nm(0.02);\r\n    private dynamicFriction = Torque.nm(0.01);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint(this.initialState);\r\n    private motor = new NeverestOrbital20();\r\n    private car = new PointMass(Mass.kg(1), Length.mm(300));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"floor\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise8.totalTime, Exercise8.timeStep, starterCode, Exercise8.initialTarget)\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n        this.gravity = this.gravity.bind(this);\r\n\r\n        this.joint.addInertia([\r\n            this.car.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque,\r\n            this.gravity\r\n        ])\r\n        this.joint.friction = this.friction;\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    gravity(state: RotationalState) {\r\n        return state.position.deg() > 0 ? Torque.nm(-1) : Torque.nm(0);\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg() / (5 * 360);\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n\r\n        let currentFloor = this.joint.data[this.drawStep].position.deg() / (360 * 5);\r\n\r\n        let floors = 4;\r\n        let floorSpacing  = p5.height / (floors + 1);\r\n        let elevatorHeight = floorSpacing;\r\n        let elevatorWidth = floorSpacing * 0.75;\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Floors background\r\n        p5.push();\r\n        p5.noStroke();\r\n        p5.fill(207, 91, 85);\r\n        p5.rect(0, floorSpacing, centerX, p5.height);\r\n        p5.pop();\r\n\r\n        // Elevator background\r\n        p5.push();\r\n        p5.noStroke();\r\n        p5.fill(100, 100, 100);\r\n        p5.rect(centerX, 0, elevatorWidth * 2, p5.height);\r\n        p5.pop();\r\n\r\n        // Elevator background\r\n        p5.push();\r\n        p5.noStroke();\r\n        p5.fill(0);\r\n        p5.ellipse(centerX + elevatorWidth, floorSpacing / 2, elevatorWidth, elevatorWidth);\r\n        p5.pop();\r\n\r\n        // Elevator\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.fill(171, 164, 87);\r\n        p5.rect(centerX, p5.height - elevatorHeight - (currentFloor * elevatorHeight), elevatorWidth, elevatorHeight);\r\n        p5.pop();\r\n\r\n        // Weight\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.rect(centerX + elevatorWidth + 10, elevatorHeight * (currentFloor + 1), elevatorWidth - 20, elevatorHeight);\r\n        p5.pop();\r\n\r\n        // Cable\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.line(centerX + (elevatorWidth / 2), elevatorHeight / 2, centerX + (elevatorWidth / 2), p5.height - elevatorHeight * (currentFloor + 1))\r\n        p5.line(centerX + (elevatorWidth * 1.5), elevatorHeight / 2, centerX + (elevatorWidth * 1.5), elevatorHeight * (currentFloor + 1))\r\n        p5.pop();\r\n\r\n        // Box\r\n        p5.push();\r\n        p5.noStroke();\r\n        p5.fill(100, 70, 30);\r\n        p5.rect(centerX + elevatorWidth / 4, p5.height - elevatorHeight / 2 - (currentFloor * elevatorHeight), elevatorWidth / 2, elevatorHeight / 2);\r\n        p5.pop();\r\n\r\n        // Floors\r\n        for (let i = 0; i < floors; i++) {\r\n            p5.push();\r\n            p5.stroke(0);\r\n            p5.strokeWeight(5);\r\n            let height = p5.height - (i * floorSpacing);\r\n            p5.line(0, height, centerX, height);\r\n            p5.pop();\r\n        }\r\n    }\r\n}\r\n\r\nexport default Exercise8;","import RedLine from \"../Sim/Motors/RedLine\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalVelocity from \"../Sim/Physics/Units/RotationalVelocity\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport SteelFlywheel from \"../Sim/Wheels/SteelFlywheel\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to control a 775 pro to spin a\r\n* steel flywheel at 10 revolutions per second (rps).\r\n* \r\n* Your control system is handed two things, a target rps\r\n* and a current rps. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n\r\nlet Kp = 0;\r\n\r\n(target, current, timeStep) => {\r\n    let error = target - current;\r\n\r\n    return error * Kp;\r\n}\r\n\r\n`\r\n\r\nclass Exercise9 extends Exercise {\r\n    name = \"Exercise9\";\r\n    private static totalTime = Time.s(5);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalVelocity.rps(10);\r\n\r\n    private staticFriction = Torque.nm(0.2);\r\n    private dynamicFriction = Torque.nm(0.1);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new RedLine();\r\n    private wheel = new SteelFlywheel();\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n\r\n    graphConfig = {\r\n        yLabel: \"rps\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise9.totalTime, Exercise9.timeStep, starterCode, Exercise9.initialTarget.rps())\r\n\r\n        this.joint.addInertia([\r\n            this.wheel.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque,\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.velocity.rps();\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let radius = 75;\r\n        let angle = this.joint.data[this.drawStep] ? this.joint.data[this.drawStep].position.rad() : 0;\r\n        let {x, y} = angleToCoordinate(angle, radius);\r\n\r\n\t\tp5.background(255);\r\n\r\n        p5.fill(66, 135, 245);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 200, 200);\r\n\r\n        p5.fill(66, 245, 111);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX + x, centerY + y, 20, 20);\r\n    }\r\n}\r\n\r\nexport default Exercise9;","import { Exercise } from \"./Exercise\";\r\nimport Exercise1 from \"./Exercise1\";\r\nimport Exercise10 from \"./Exercise10\";\r\nimport Exercise2 from \"./Exercise2\";\r\nimport Exercise3 from \"./Exercise3\";\r\nimport Exercise4 from \"./Exercise4\";\r\nimport Exercise5 from \"./Exercise5\";\r\nimport Exercise6 from \"./Exercise6\";\r\nimport Exercise7 from \"./Exercise7\";\r\nimport Exercise8 from \"./Exercise8\";\r\nimport Exercise9 from \"./Exercise9\";\r\n\r\nfunction GetExercise(exerciseNumber: string | null): Exercise {\r\n    switch(exerciseNumber) {\r\n        case \"1\":\r\n            return new Exercise1();\r\n        case \"2\":\r\n            return new Exercise2();\r\n        case \"3\":\r\n            return new Exercise3();\r\n        case \"4\":\r\n            return new Exercise4();\r\n        case \"5\":\r\n            return new Exercise5();\r\n        case \"6\":\r\n            return new Exercise6();\r\n        case \"7\":\r\n            return new Exercise7();\r\n        case \"8\":\r\n            return new Exercise8();\r\n        case \"9\":\r\n            return new Exercise9();\r\n        case \"10\":\r\n            return new Exercise10();\r\n        default:\r\n            return new Exercise1();\r\n    }\r\n}\r\n\r\nexport default GetExercise;","\r\nclass Unit {\r\n    protected value: number;\r\n\r\n    constructor(value: number) {\r\n        this.value = value;\r\n    }\r\n\r\n    equals(other: Unit): boolean {\r\n        return this.value === other.value;\r\n    }\r\n\r\n    isPositive(): boolean {\r\n        return this.value >= 0;\r\n    }\r\n\r\n    isNegative(): boolean {\r\n        return !this.isPositive();\r\n    }\r\n\r\n    negate<UnitType extends Unit>(): UnitType {\r\n        let toReturn = Object.create(this);\r\n        toReturn.value = -this.value;\r\n        return toReturn;\r\n    }\r\n}\r\n\r\nexport default Unit;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}