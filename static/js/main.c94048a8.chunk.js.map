{"version":3,"sources":["Sim/Physics/Units/Time.ts","App.tsx","Editor/Editor.tsx","Graph/Graph.tsx","Preview/Preview.tsx","Console/Console.tsx","Sim/Sim.ts","Sim/Physics/Units/Torque.ts","Sim/Physics/Units/Voltage.ts","Utility.ts","Sim/Physics/DCMotor.ts","Sim/Physics/Units/RotationalVelocity.ts","Sim/Physics/Units/Current.ts","Sim/Physics/Units/Length.ts","Sim/Physics/Units/Mass.ts","Sim/Motors/RedLine.ts","Sim/Physics/RotationalFriction.ts","Sim/Physics/Units/RotationalPosition.ts","Sim/Physics/Units/RotationalAcceleration.ts","Sim/Physics/RotationalJoint.ts","Sim/Wheels/SteelFlywheel.ts","Sim/Physics/Wheel.ts","Exercises/Exercise.ts","Exercises/Exercise1.ts","Sim/Motors/NeverestOrbital20.ts","Sim/Physics/MomentOfInertia.ts","Exercises/Exercise2.ts","Exercises/Exercise3.ts","Exercises/Exercise4.ts","Exercises/Exercise5.ts","Exercises/Exercise6.ts","Exercises/Exercise7.ts","Exercises/Exercise8.ts","Exercises/Exercise9.ts","Exercises/Exercise10.ts","Exercises/Exercise11.ts","Exercises/Exercise12.ts","Exercises/ExerciseFactory.ts","Sim/Physics/Units/Unit.ts","reportWebVitals.js","index.tsx"],"names":["Time","s","this","value","ms","Unit","getParams","URLSearchParams","window","location","search","App","props","sim","exercise","displayTimerHandle","logBuffer","startDisplay","bind","displayCallback","run","print","state","graphData","logMessages","displayTime","params","GetExercise","get","log","Sim","setState","code","undefined","clearInterval","func","eval","e","level","message","Function","controlSystem","reset","setup","setTimeout","drawStep","setInterval","DisplayStep","timeStep","newTime","totalTime","arg","toString","JSON","stringify","push","fluid","className","xs","exerciseName","name","initialValue","starterCode","initialTarget","target","initialTime","initialTimeStep","showTimeStep","onRun","onTimeChange","onTargetChange","t","onTimeStepChange","controlSystemTimeStep","draw","data","config","graphConfig","cursor","React","Component","Editor","editor","timeValue","targetValue","timeStepValue","onCodeChange","Cookies","setValue","getValue","set","variant","onClick","Text","onChange","parseFloat","type","mode","theme","editorProps","$blockScrolling","height","width","onLoad","colors","Graph","margin","top","right","left","bottom","labelFormatter","label","parseInt","toFixed","formatter","dataKey","tickFormatter","tickFormater","xLabel","position","offset","yLabel","angle","x","stroke","strokeDasharray","graphKeys","map","i","dot","Preview","useState","setWidth","setHeight","measuredDiv","useCallback","node","getBoundingClientRect","style","getComputedStyle","marginTop","marginBottom","paddingTop","paddingBottom","marginLeft","marginRight","paddingLeft","paddingRight","Math","floor","padding","ref","p5","canvasParentRef","createCanvas","parent","Console","updateGraphData","Torque","nm","ozIn_to_nm","lbFt_to_nm","oz_in","lb_ft","Voltage","volts","v","angleToCoordinate","radius","cos","y","sin","DCMotor","operatingVoltage","stallTorque","stallCurrent","breakawayTorque","noLoadSpeed","noLoadCurrent","resistance","rotorRadius","rotorMass","gearRatio","electricalConstant","suppliedVoltage","setPower","inertia","torque","power","min","max","kg","pow","m","velocity","radS","RotationalVelocity","rps_to_radS","rpm_to_radS","rps","rpm","PI","Current","amps","a","Length","meters","mm","Mass","lbs_to_kg","g","lbs","RedLine","RotationalFriction","staticFriction","dynamicFriction","abs","negate","isPositive","RotationalPosition","rad","deg2rad","rot2rad","deg","rot","RotationalAcceleration","radS2","RotationalJoint","initialState","torques","inertias","friction","acceleration","Array","isArray","length","deltaTime","jTotal","reduce","accumulator","j","current","torqueTotal","SteelFlywheel","mass","Exercise","runStep","Exercise1","joint","motor","wheel","resetables","isNaN","addInertia","addTorque","currentTime","setPoint","time","centerX","centerY","background","fill","noStroke","ellipse","NeverestOrbital20","PointMass","RodAboutEnd","Exercise2","arm","strokeWeight","line","pop","textAlign","textSize","text","GRAY","strokeCap","Exercise3","weight","armLength","Exercise4","gravity","force","Exercise5","Exercise6","Exercise7","car","currentFloor","floorSpacing","elevatorHeight","elevatorWidth","rect","Exercise8","Exercise9","Exercise10","robot","rotationToMm","bodyWidth","bodyHeight","lineLength","distance","rectMode","CENTER","xOffset","numberOfLines","SQUARE","distanceToGo","forEach","circle","noFill","arc","HALF_PI","Exercise11","lastControlSystemUpdate","Exercise12","round","exerciseNumber","other","toReturn","Object","create","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c94048a8.chunk.js","sourcesContent":["import Unit from \"./Unit\";\r\n\r\nclass Time extends Unit {\r\n    protected constructor(s: number) {\r\n        super(s);\r\n    }\r\n\r\n    /**\r\n     * @param s seconds\r\n     */\r\n    static s(s: number): Time {\r\n        return new Time(s);\r\n    }\r\n\r\n    /**\r\n     * @returns seconds\r\n     */\r\n    s(): number {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * @param ms milliseconds\r\n     */\r\n    static ms(ms: number): Time {\r\n        return new Time(ms / 1000);\r\n    }\r\n\r\n    /**\r\n     * @returns milliseconds\r\n     */\r\n    ms(): number {\r\n        return this.value * 1000;\r\n    }\r\n}\r\n\r\nexport default Time;","import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './App.css';\n\nimport Editor from './Editor/Editor';\nimport Graph from './Graph/Graph';\nimport Preview from './Preview/Preview';\nimport Console, { LogMessage } from './Console/Console';\n\nimport Sim from './Sim/Sim';\nimport Time from './Sim/Physics/Units/Time';\nimport { Exercise, ExerciseData } from './Exercises/Exercise';\nimport GetExercise from './Exercises/ExerciseFactory';\n\nfunction getParams() {\n    return new URLSearchParams(window.location.search);\n}\n\ninterface AppState {\n    graphData: Array<ExerciseData>;\n    logMessages: Array<LogMessage>;\n    displayTime: number;\n}\n\nclass App extends React.Component<{}, AppState> {\n    private sim: Sim;\n    private exercise: Exercise;\n    private displayTimerHandle: number | undefined;\n    private static DisplayStep = Time.ms(15);\n    private logBuffer: Array<LogMessage> = [];\n\n    constructor(props: object) {\n        super(props);\n\n        this.startDisplay = this.startDisplay.bind(this);\n        this.displayCallback = this.displayCallback.bind(this);\n        this.run = this.run.bind(this);\n        this.print = this.print.bind(this);\n\n        this.state = {\n            graphData: [],\n            logMessages: [],\n            displayTime: 0\n        }\n\n        let params = getParams();\n        this.exercise = GetExercise(params.get(\"exercise\"));\n        this.exercise.log = this.print;\n\n        this.sim = new Sim(graphData => this.setState({ graphData }));\n\n        // @ts-ignore\n        window.print = this.print;\n    }\n\n    run(code: string) {\n        if (this.displayTimerHandle !== undefined) {\n            window.clearInterval(this.displayTimerHandle);\n            this.displayTimerHandle = undefined;\n        }\n\n        let func = undefined;\n\n        try {\n            // eslint-disable-next-line\n            func = eval(code);\n        } catch (e) {\n            this.setState({\n                logMessages: [{\n                    level: 'error',\n                    message: (e as Error).message\n                }]\n            })\n            return;\n        }\n\n        if (func instanceof Function) {\n            // @ts-ignore\n            this.exercise.controlSystem = func;\n            this.logBuffer = [];\n            this.exercise.reset();\n            this.sim.setup(this.exercise);\n            this.sim.run();\n            window.setTimeout(this.startDisplay, 1500);\n        } else {\n            this.setState({\n                logMessages: [{\n                    level: 'error',\n                    message: \"Function not found. Make sure you haven't changed the original control system function.\"\n                }]\n            })\n        }\n    }\n\n    startDisplay() {\n        this.setState({logMessages: this.logBuffer});\n\n        this.exercise.drawStep = 0;\n        this.setState({displayTime: 0})\n        this.displayTimerHandle = window.setInterval(this.displayCallback, App.DisplayStep.ms());\n    }\n\n    displayCallback() {\n        this.exercise.drawStep += App.DisplayStep.ms() / this.exercise.timeStep.ms();\n        let newTime = this.state.displayTime + App.DisplayStep.ms();\n\n        if (newTime >= this.exercise.totalTime.ms()) {\n            clearInterval(this.displayTimerHandle)\n            this.displayTimerHandle = undefined;\n            this.setState({displayTime: 0});\n        } else {\n            this.setState({displayTime: newTime});\n        }\n    }\n\n    print(arg: any) {\n        let message: string | undefined;\n\n        switch (typeof arg) {\n            case \"string\":\n                message = arg;\n                break;\n            case \"boolean\":\n                message = arg ? \"true\" : \"false\";\n                break;\n            case \"number\":\n                message = arg.toString();\n                break;\n            case \"object\":\n                message = JSON.stringify(arg);\n                break;\n            default:\n                message = undefined;\n        }\n\n        if (message) {\n            this.logBuffer.push({level: \"log\", message});\n        }\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <Row className=\"app\">\n                    <Col xs={6} className=\"section\">\n                        <Row className=\"editor\">\n                            <Editor \n                                exerciseName={this.exercise.name}\n                                initialValue={this.exercise.starterCode} \n                                initialTarget={this.exercise.target}\n                                initialTime={this.exercise.totalTime.s()}\n                                initialTimeStep={this.exercise.timeStep.ms()}\n                                showTimeStep={this.exercise.showTimeStep}\n                                onRun={this.run} \n                                onTimeChange={s => {this.exercise.totalTime = Time.s(s)}}\n                                onTargetChange={t => {this.exercise.target = t}}\n                                onTimeStepChange={t => {this.exercise.controlSystemTimeStep = Time.ms(t)}}\n                            />\n                        </Row>\n                        <Row className=\"console\">\n                            <Console logMessages={this.state.logMessages}/>\n                        </Row>\n                    </Col>\n                    <Col xs={6} className=\"section\">\n                        <Row className=\"preview\">\n                            <Preview draw={this.exercise.draw}/>\n                        </Row>\n                        <Row className=\"graph\">\n                            <Graph data={this.state.graphData} config={this.exercise.graphConfig} cursor={this.state.displayTime}/>\n                        </Row>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nimport AceEditor from 'react-ace';\r\nimport { Ace } from 'ace-builds';\r\nimport 'ace-builds/src-min-noconflict/mode-javascript';\r\nimport 'ace-builds/src-min-noconflict/theme-github';\r\n\r\nimport Cookies from 'js-cookie';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport './Editor.css'\r\nimport { FormControl, InputGroup } from 'react-bootstrap';\r\n\r\ntype EditorProps = {\r\n    initialValue: string;\r\n    initialTime: number;\r\n    initialTarget: number;\r\n    initialTimeStep: number;\r\n    exerciseName: string;\r\n    showTimeStep: boolean;\r\n    onRun(code: string):  void;\r\n    onTimeChange(time: number): void;\r\n    onTargetChange(target: number): void;\r\n    onTimeStepChange(timeStep: number): void;\r\n};\r\n\r\ntype EditorState = {\r\n    timeValue: number,\r\n    targetValue: number\r\n    timeStepValue: number;\r\n}\r\n\r\nclass Editor extends React.Component<EditorProps, EditorState> {\r\n    editor: Ace.Editor | null;\r\n\r\n    constructor(props: EditorProps) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            timeValue: props.initialTime,\r\n            targetValue: props.initialTarget,\r\n            timeStepValue: props.initialTimeStep\r\n        };\r\n\r\n        this.editor = null;\r\n        this.onTimeChange = this.onTimeChange.bind(this);\r\n        this.onTargetChange = this.onTargetChange.bind(this);\r\n        this.onTimeStepChange = this.onTimeStepChange.bind(this);\r\n        this.onCodeChange = this.onCodeChange.bind(this);\r\n        this.setup = this.setup.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.run = this.run.bind(this);\r\n    }\r\n\r\n    setup(editor: Ace.Editor) {\r\n        this.editor = editor;\r\n        let code = Cookies.get(this.props.exerciseName) || this.props.initialValue;\r\n        this.editor.setValue(code, -1)\r\n    }\r\n\r\n    reset() {\r\n        if (this.editor) {\r\n            let code = this.props.initialValue;\r\n            this.editor.setValue(code, -1)\r\n        }\r\n    }\r\n\r\n    private run() {\r\n        this.props.onRun(this.editor ? this.editor.getValue() : \"\");\r\n    }\r\n\r\n    onTimeChange(t: number) {\r\n        this.setState({timeValue: t});\r\n        this.props.onTimeChange(t);\r\n    }\r\n\r\n    onTargetChange(t: number) {\r\n        this.setState({targetValue: t});\r\n        this.props.onTargetChange(t);\r\n    }\r\n\r\n    onTimeStepChange(t: number) {\r\n        this.setState({timeStepValue: t});\r\n        this.props.onTimeStepChange(t);\r\n    }\r\n\r\n    onCodeChange(value: string) {\r\n        Cookies.set(this.props.exerciseName, value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container className=\"editorContainer\">\r\n                <Row className=\"justify-content-between\">\r\n                    <Col xs=\"auto\">\r\n                        <Button variant=\"primary\" onClick={this.reset.bind(this)}>Reset</Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup>\r\n                            <InputGroup.Text>Time (s)</InputGroup.Text>\r\n                            <FormControl \r\n                                onChange={(e) => this.onTimeChange(parseFloat(e.target.value))}\r\n                                value={this.state.timeValue}\r\n                                type=\"number\"\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup>\r\n                            <InputGroup.Text>Target</InputGroup.Text>\r\n                            <FormControl \r\n                                onChange={(e) => this.onTargetChange(parseFloat(e.target.value))}\r\n                                value={this.state.targetValue}\r\n                                type=\"number\"\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    {\r\n                        this.props.showTimeStep ?\r\n                        <Col>\r\n                            <InputGroup>\r\n                                <InputGroup.Text>Time Step</InputGroup.Text>\r\n                                <FormControl \r\n                                    onChange={(e) => this.onTimeStepChange(parseFloat(e.target.value))}\r\n                                    value={this.state.timeStepValue}\r\n                                    type=\"number\"\r\n                                />\r\n                            </InputGroup>\r\n                        </Col> :\r\n                        null\r\n                    }\r\n                    <Col xs=\"auto\">\r\n                        <Button variant=\"success\" onClick={this.run}>Run</Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"editorRow\">\r\n                    <AceEditor\r\n                        mode='javascript'\r\n                        theme='github'\r\n                        name='editor'\r\n                        editorProps={{ $blockScrolling: true }}\r\n                        height=\"100%\"\r\n                        width=\"100%\"\r\n                        onLoad={this.setup}\r\n                        onChange={this.onCodeChange}\r\n                    />\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Editor","import { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Legend, Label, ReferenceLine, Tooltip } from 'recharts';\r\nimport { ExerciseData, GraphConfig } from '../Exercises/Exercise'\r\n\r\nconst colors = [\r\n    \"#f95d6a\",\r\n    \"#003f5c\",\r\n    \"#2f4b7c\",\r\n    \"#665191\",\r\n    \"#a05195\",\r\n    \"#d45087\",\r\n    \"#ff7c43\",\r\n    \"#ffa600\"\r\n]\r\n\r\ninterface GraphProps {\r\n    data: Array<ExerciseData>;\r\n    config: GraphConfig;\r\n    cursor: number;\r\n};\r\n\r\nfunction Graph(props: GraphProps) {\r\n    return (\r\n        <div>\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <LineChart data={props.data} margin={{top: 15, right: 15, left: 30, bottom: 30}}>\r\n                    <Tooltip \r\n                        labelFormatter={(label: string) => {\r\n                            return \"time: \" + (parseInt(label) / 1000).toFixed(2) + \"s\";\r\n                        }}\r\n                        formatter={(value: string) => {\r\n                            return parseFloat(value).toFixed(2);\r\n                        }}\r\n                    />\r\n                    <XAxis \r\n                        dataKey=\"time\" \r\n                        tickFormatter={props.config.tickFormater} \r\n                    >\r\n                        {props.config.xLabel ? \r\n                            <Label position=\"insideBottomLeft\" offset={-10}>{props.config.xLabel}</Label>\r\n                            :\r\n                            \"\"\r\n                        }\r\n                    </XAxis>\r\n                    <YAxis>\r\n                        {props.config.yLabel ? \r\n                            <Label position=\"left\" angle={-90}>{props.config.yLabel}</Label>\r\n                            :\r\n                            \"\"\r\n                        }\r\n                    </YAxis>\r\n                    <ReferenceLine x={props.cursor} stroke=\"black\"/>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    {\r\n                        props.config.graphKeys ?\r\n                        props.config.graphKeys.map(((dataKey, i) => \r\n                            <Line dataKey={dataKey} stroke={colors[i]} dot={false} key={i}/>\r\n                        ))\r\n                        : null\r\n                    }\r\n                    <Legend/>\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graph;","import React, { useCallback, useState } from 'react';\r\nimport Sketch from 'react-p5';\r\nimport p5Types from 'p5';\r\n\r\ntype PreviewProps = {\r\n    draw: (p5: p5Types) => void;\r\n}\r\n\r\nfunction Preview(props: PreviewProps) {\r\n    const [ width, setWidth ] = useState(0);\r\n    const [ height, setHeight ] = useState(0);\r\n\r\n    const measuredDiv = useCallback(node => {\r\n        if (node !== null && width === 0 && height === 0) {\r\n            let height = node.getBoundingClientRect().height;\r\n            let width = node.getBoundingClientRect().width;\r\n            let style = getComputedStyle(node);\r\n\r\n            height -= parseInt(style.marginTop) + parseInt(style.marginBottom) +\r\n                        parseInt(style.paddingTop) + parseInt(style.paddingBottom);\r\n            width -= parseInt(style.marginLeft) + parseInt(style.marginRight) +\r\n                        parseInt(style.paddingLeft) + parseInt(style.paddingRight);\r\n\r\n            setHeight(Math.floor(height));\r\n            setWidth(Math.floor(width));\r\n        }\r\n    }, [height, width]);\r\n\r\n    const setup = (p5: p5Types, canvasParentRef: Element) => {\r\n\t\tp5.createCanvas(width, height).parent(canvasParentRef);\r\n\t};\r\n\r\n\tconst draw = (p5: p5Types) => {\r\n        props.draw(p5);\r\n\t};\r\n\r\n\treturn (\r\n        <div style={{width: \"95%\", height: \"95%\", margin: \"10px\", padding: \"0px\"}} ref={measuredDiv}>\r\n            {\r\n                height !== 0 && width !== 0\r\n                    ? <Sketch setup={setup} draw={draw} />\r\n                    : <div/>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preview;\r\n","import \"./Console.css\"\r\n\r\nexport type LogMessage = {\r\n    level: \"log\" | \"warn\" | \"error\";\r\n    message: string;\r\n}\r\n\r\ninterface ConsoleProps {\r\n    logMessages: Array<LogMessage>;\r\n};\r\n\r\nfunction Console(props: ConsoleProps) {\r\n    return (\r\n        <div className=\"consoleBox\">\r\n            {props.logMessages.map((message, i) => {\r\n                let variant = message.level === \"log\" ? \"text-secondary\" :\r\n                            message.level === \"warn\" ? \"text-warning\" :\r\n                            message.level === \"error\" ? \"text-danger\" : \"\";\r\n                return <p key={i} className={variant}>{message.message}</p>\r\n            })}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Console;","import { Exercise, ExerciseData } from '../Exercises/Exercise';\r\nclass Sim {\r\n    exercise: Exercise | undefined;\r\n    updateGraphData: (data: Array<ExerciseData>) => void;\r\n\r\n    constructor(updateGraphData: (data: Array<ExerciseData>) => void) {\r\n        this.updateGraphData = updateGraphData;\r\n    }\r\n\r\n    setup(exercise: Exercise) {\r\n        this.exercise = exercise;\r\n    }\r\n\r\n    run() {\r\n        if (this.exercise) {\r\n            this.exercise.reset();\r\n            this.exercise.run();\r\n            this.updateGraphData(this.exercise.data);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Sim;","import Unit from './Unit';\r\n\r\nclass Torque extends Unit {\r\n    private static ozIn_to_nm = 0.007062;\r\n    private static lbFt_to_nm = 1.35584;\r\n\r\n    protected constructor(nm: number) {\r\n        super(nm)\r\n    }\r\n\r\n    /**\r\n     * @param nm newton meters\r\n     */\r\n    static nm(nm: number): Torque {\r\n        return new Torque(nm);\r\n    }\r\n\r\n    /**\r\n     * @returns newton meters\r\n     */\r\n    nm(): number {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * @param oz_in Ounce inches\r\n     */\r\n    static oz_in(oz_in: number): Torque {\r\n        return new Torque(oz_in * Torque.ozIn_to_nm);\r\n    }\r\n\r\n    /**\r\n     * @returns ounce inches\r\n     */\r\n    oz_in(): number {\r\n        return this.value / Torque.ozIn_to_nm;\r\n    }\r\n\r\n    /**\r\n     * @param lb_ft Pound*feet\r\n     */\r\n    static lb_ft(lb_ft: number): Torque {\r\n        return new Torque(lb_ft * Torque.lbFt_to_nm);\r\n    }\r\n\r\n    /**\r\n     * @returns pound feet\r\n     */\r\n    lb_ft(): number {\r\n        return this.value / Torque.lbFt_to_nm;\r\n    }\r\n}\r\n\r\nexport default Torque;","import Unit from \"./Unit\";\r\n\r\nclass Voltage extends Unit {\r\n    protected constructor(volts: number) {\r\n        super(volts)\r\n    }\r\n\r\n    /**\r\n     * @param {Number} v volts\r\n     * @returns {Voltage}\r\n     */\r\n    static v(v: number): Voltage {\r\n        return new Voltage(v);\r\n    }\r\n\r\n    /**\r\n     * @returns volts\r\n     */\r\n    v(): number {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport default Voltage","\r\nexport function clamp(x: number, min: number, max: number) {\r\n    if (x < min) {\r\n        return min;\r\n    } else if (x > max) {\r\n        return max;\r\n    }\r\n\r\n    return x;\r\n}\r\n\r\nexport function angleToCoordinate(angle: number, radius: number): {x: number, y: number} {\r\n    let x = radius * Math.cos(angle);\r\n    let y = radius * Math.sin(angle);\r\n\r\n    return {x, y};\r\n}","import RotationalVelocity from './Units/RotationalVelocity';\r\nimport Torque from './Units/Torque';\r\nimport Voltage from './Units/Voltage';\r\nimport Current from './Units/Current';\r\nimport Length from './Units/Length';\r\nimport Mass from './Units/Mass';\r\nimport { RotationalState } from './RotationalJoint';\r\nimport { Resetable } from '../../Exercises/Exercise';\r\nimport { clamp } from \"../../Utility\";\r\n\r\nclass DCMotor implements Resetable {\r\n    private operatingVoltage: Voltage;\r\n    private stallTorque: Torque;\r\n    private stallCurrent: Current;\r\n    private breakawayTorque: Torque;\r\n    private noLoadSpeed: RotationalVelocity;\r\n    private noLoadCurrent: Current;\r\n    private rotorRadius: Length;\r\n    private rotorMass: Mass;\r\n    private gearRatio: number;\r\n    private electricalConstant: number;\r\n    private suppliedVoltage: Voltage;\r\n    private resistance: number;\r\n\r\n    /**\r\n     * @param {Voltage} operatingVoltage Rated operating voltage\r\n     * @param {Torque} stallTorque Torque when motor is stalled at operating voltage\r\n     * @param {Current} stallCurrent Current when motor is stalled at operating voltage\r\n     * @param {Torque} breakawayTorque Torque required to overcome static friction\r\n     * @param {RotationalVelocity} noLoadSpeed Rotational velocity with no load at operating voltage\r\n     * @param {Current} noLoadCurrent Current with no load at operating voltage\r\n     * @param {Number} electricalConstant K_e of the motor\r\n     * @param {Number} resistance Terminal resistance in ohms\r\n     * @param {Length} rotorRadius Radius of the internal rotor\r\n     * @param {Mass} rotorMass Mass of the internal rotor\r\n     * @param {Number} gearRatio Ratio of built in gearbox (motor revs/output revs)\r\n     */\r\n    constructor(\r\n        operatingVoltage: Voltage,\r\n        stallTorque: Torque,\r\n        stallCurrent: Current,\r\n        breakawayTorque: Torque,\r\n        noLoadSpeed: RotationalVelocity,\r\n        noLoadCurrent: Current,\r\n        resistance: number,\r\n        rotorRadius: Length,\r\n        rotorMass: Mass,\r\n        gearRatio: number\r\n    ) {\r\n        this.operatingVoltage = operatingVoltage;\r\n        this.stallTorque = stallTorque;\r\n        this.stallCurrent = stallCurrent;\r\n        this.breakawayTorque = breakawayTorque;\r\n        this.noLoadSpeed = noLoadSpeed;\r\n        this.noLoadCurrent = noLoadCurrent;\r\n        this.rotorRadius = rotorRadius;\r\n        this.rotorMass = rotorMass;\r\n        this.gearRatio = gearRatio;\r\n        this.resistance = resistance;\r\n\r\n        this.electricalConstant = this.stallTorque.nm() / this.operatingVoltage.v();\r\n\r\n        this.suppliedVoltage = Voltage.v(0);\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.setPower = this.setPower.bind(this);\r\n        this.inertia = this.inertia.bind(this);\r\n        this.torque = this.torque.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        this.suppliedVoltage = Voltage.v(0);\r\n    }\r\n\r\n    setPower(power: number) {\r\n        power = clamp(power, -1, 1);\r\n        this.suppliedVoltage = Voltage.v(this.operatingVoltage.v() * power);\r\n    }\r\n\r\n    inertia(): number {\r\n        // Assume rotor is a solid cylinder\r\n        let rotorInertia = 0.5 * this.rotorMass.kg() * Math.pow(this.rotorRadius.m(), 2);\r\n\r\n        // Translate inertia through gearbox\r\n        let motorInertia = rotorInertia * Math.pow(this.gearRatio, 2)\r\n\r\n        return motorInertia;\r\n    }\r\n\r\n    /**\r\n     * Calculate the output torque of the motor given current\r\n     * rotational velocity and input voltage. Currently ignores motor\r\n     * inductance.\r\n     */\r\n    torque(state: RotationalState): Torque {\r\n        let amps = (this.suppliedVoltage.v() - this.electricalConstant * state.velocity.radS()) / this.resistance;\r\n        let torque = amps * this.electricalConstant;\r\n\r\n        return Torque.nm(torque);\r\n    }\r\n}\r\n\r\nexport default DCMotor;\r\n","import Unit from \"./Unit\";\r\n\r\nclass RotationalVelocity extends Unit {\r\n    private static rps_to_radS = 2 * Math.PI;\r\n    private static rpm_to_radS = 2 * Math.PI / 60;\r\n\r\n    protected constructor(radS: number) {\r\n        super(radS);\r\n    }\r\n\r\n    /**\r\n     * @param radS radians per second\r\n     */\r\n    static radS(radS: number): RotationalVelocity {\r\n        return new RotationalVelocity(radS);\r\n    }\r\n\r\n    /**\r\n     * @returns radians per second\r\n     */\r\n    radS(): number {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * @param rps rotations per second\r\n     */\r\n    static rps(rps: number): RotationalVelocity {\r\n        return new RotationalVelocity(rps * RotationalVelocity.rps_to_radS);\r\n    }\r\n\r\n    /**\r\n     * @returns rotations per second\r\n     */\r\n    rps(): number {\r\n        return this.value / RotationalVelocity.rps_to_radS;\r\n    }\r\n\r\n    /**\r\n     * @param rpm rotations per minute\r\n     */\r\n    static rpm(rpm: number): RotationalVelocity {\r\n        return new RotationalVelocity(rpm * RotationalVelocity.rpm_to_radS);\r\n    }\r\n\r\n    /**\r\n     * @returns rotations per minute\r\n     */\r\n    rpm(): number {\r\n        return this.value / RotationalVelocity.rpm_to_radS;\r\n    }\r\n}\r\n\r\nexport default RotationalVelocity;","import Unit from \"./Unit\";\r\n\r\nclass Current extends Unit {\r\n    protected constructor(amps: number) {\r\n        super(amps);\r\n    }\r\n\r\n    /**\r\n     * @param a amps\r\n     */\r\n    static a(a: number) : Current {\r\n        return new Current(a);\r\n    }\r\n\r\n    /**\r\n     * @returns amps\r\n     */\r\n    a(): number {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport default Current;","import Unit from \"./Unit\";\r\n\r\nclass Length extends Unit {\r\n    protected constructor(meters: number) {\r\n        super(meters)\r\n    }\r\n\r\n    /**\r\n     * @param m meters\r\n     */\r\n    static m(m: number): Length {\r\n        return new Length(m);\r\n    }\r\n\r\n    /**\r\n     * @returns meters\r\n     */\r\n    m(): number {\r\n        return this.value\r\n    }\r\n\r\n    /**\r\n     * @param mm millimetres\r\n     */\r\n    static mm(mm: number): Length {\r\n        return new Length(mm / 1000);\r\n    }\r\n\r\n    /**\r\n     * @returns millimetres\r\n     */\r\n    mm(): number {\r\n        return this.value * 1000;\r\n    }\r\n\r\n}\r\n\r\nexport default Length;","import Unit from \"./Unit\";\r\n\r\nclass Mass extends Unit {\r\n    private static lbs_to_kg = 0.4536;\r\n\r\n    protected constructor(kg: number) {\r\n        super(kg);\r\n    }\r\n\r\n    /**\r\n     * @param kg kilograms\r\n     */\r\n    static kg(kg: number): Mass {\r\n        return new Mass(kg);\r\n    }\r\n\r\n    /**\r\n     * @returns meters\r\n     */\r\n    kg(): number {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * @param g grams\r\n     */\r\n    static g(g: number): Mass {\r\n        return new Mass(g / 1000);\r\n    }\r\n\r\n    /**\r\n     * @returns grams\r\n     */\r\n    g(): number {\r\n        return this.value * 1000;\r\n    }\r\n\r\n    /**\r\n     * @param lbs pounds\r\n     */\r\n    static lbs(lbs: number): Mass {\r\n        return new Mass(lbs * Mass.lbs_to_kg);\r\n    }\r\n\r\n    /**\r\n     * @returns pounds\r\n     */\r\n    lbs(): number {\r\n        return this.value / Mass.lbs_to_kg;\r\n    }\r\n}\r\n\r\nexport default Mass;","import DCMotor from \"../Physics/DCMotor\";\r\nimport RotationalVelocity from '../Physics/Units/RotationalVelocity';\r\nimport Torque from '../Physics/Units/Torque';\r\nimport Voltage from '../Physics/Units/Voltage';\r\nimport Current from '../Physics/Units/Current';\r\nimport Length from '../Physics/Units/Length';\r\nimport Mass from '../Physics/Units/Mass';\r\n\r\n\r\nexport default class RedLine extends DCMotor {\r\n    private static operatingVoltage = Voltage.v(12);\r\n    private static stallTorque = Torque.nm(0.71);\r\n    private static stallCurrent = Current.a(134);\r\n    private static breakawayTorque = Torque.nm(0.05);\r\n    private static noLoadSpeed = RotationalVelocity.rpm(18700);\r\n    private static noLoadCurrent = Current.a(0.7);\r\n    private static resistance = 0.1;\r\n    private static rotorRadius = Length.mm(12.5);\r\n    private static rotorMass = Mass.lbs(0.5);\r\n    private static gearRatio = 1;\r\n\r\n    constructor() {\r\n        super(\r\n            RedLine.operatingVoltage,\r\n            RedLine.stallTorque,\r\n            RedLine.stallCurrent,\r\n            RedLine.breakawayTorque,\r\n            RedLine.noLoadSpeed,\r\n            RedLine.noLoadCurrent,\r\n            RedLine.resistance,\r\n            RedLine.rotorRadius,\r\n            RedLine.rotorMass,\r\n            RedLine.gearRatio\r\n        )\r\n    }\r\n\r\n}\r\n","import Torque from './Units/Torque';\r\nimport RotationalVelocity from './Units/RotationalVelocity';\r\n\r\nclass RotationalFriction {\r\n    staticFriction: Torque;\r\n    dynamicFriction: Torque;\r\n\r\n    constructor(staticFriction: Torque, dynamicFriction: Torque) {\r\n        this.staticFriction = staticFriction;\r\n        this.dynamicFriction = dynamicFriction;\r\n    }\r\n\r\n    /**\r\n     * Get reaction torque at an rpm. Includes torque\r\n     * applied to correctly handle static torque.\r\n     */\r\n    torque(velocity: RotationalVelocity, torque: Torque): Torque {\r\n        if (velocity.radS() === 0 && Math.abs(torque.nm()) <= this.staticFriction.nm()) {\r\n            return torque.negate();\r\n        } else {\r\n            return torque.isPositive() ? this.dynamicFriction.negate() : this.dynamicFriction;\r\n        }\r\n    }\r\n}\r\n\r\nexport default RotationalFriction;","import Unit from \"./Unit\";\r\n\r\nclass RotationalPosition extends Unit {\r\n    private static deg2rad = Math.PI * 2 / 360;\r\n    private static rot2rad = Math.PI * 2;\r\n\r\n    /**\r\n     * @param rad Radians\r\n     */\r\n    protected constructor(rad: number) {\r\n        super(rad);\r\n    }\r\n\r\n    /**\r\n     * @param rad radians\r\n     * @returns {RotationalPosition}\r\n     */\r\n    static rad(rad: number): RotationalPosition {\r\n        return new RotationalPosition(rad);\r\n    }\r\n\r\n    /**\r\n     * @returns radians\r\n     */\r\n    rad(): number {\r\n        return this.value;\r\n    }\r\n\r\n    static deg(deg: number): RotationalPosition {\r\n        return new RotationalPosition(deg * RotationalPosition.deg2rad);\r\n    }\r\n\r\n    /**\r\n     * @returns degrees\r\n     */\r\n    deg(): number {\r\n        return this.value / RotationalPosition.deg2rad;\r\n    }\r\n\r\n    /**\r\n     * @param rot rotations\r\n     * @returns {RotationalPosition}\r\n     */\r\n    static rot(rot: number): RotationalPosition {\r\n        return new RotationalPosition(rot * RotationalPosition.rot2rad);\r\n    }\r\n\r\n    /**\r\n     * @returns rotations\r\n     */\r\n    rot(): number {\r\n        return this.value / RotationalPosition.rot2rad;\r\n    }\r\n}\r\n\r\nexport default RotationalPosition;","import Unit from \"./Unit\";\r\n\r\nclass RotationalAcceleration extends Unit {\r\n    protected constructor(radS2: number) {\r\n        super(radS2)\r\n    }\r\n\r\n    /**\r\n     * @param radS2 radians per second squared\r\n     */\r\n    static radS2(radS2: number): RotationalAcceleration {\r\n        return new RotationalAcceleration(radS2);\r\n    }\r\n\r\n    /**\r\n     * @returns radS2 radians per second squared\r\n     */\r\n    radS2() {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport default RotationalAcceleration;","import Torque from './Units/Torque';\r\nimport RotationalPosition from './Units/RotationalPosition';\r\nimport RotationalVelocity from './Units/RotationalVelocity';\r\nimport RotationalAcceleration from './Units/RotationalAcceleration';\r\nimport Time from './Units/Time';\r\nimport { Resetable } from '../../Exercises/Exercise';\r\nimport RotationalFriction from './RotationalFriction';\r\n\r\nexport class RotationalState {\r\n    position: RotationalPosition;\r\n    velocity: RotationalVelocity;\r\n    acceleration: RotationalAcceleration;\r\n    torque: Torque;\r\n\r\n    /**\r\n     * @param p position in radians\r\n     * @param v velocity in radians per second\r\n     * @param a acceleration in radians per second squared\r\n     * @param t torque in newton meters\r\n     */\r\n    constructor(\r\n        p: number | RotationalPosition, \r\n        v: number | RotationalVelocity, \r\n        a: number | RotationalAcceleration,\r\n        t: number | Torque\r\n    ) {\r\n        this.position = (p instanceof RotationalPosition) ? p : RotationalPosition.rad(p);\r\n        this.velocity = (v instanceof RotationalVelocity) ? v : RotationalVelocity.radS(v);\r\n        this.acceleration = (a instanceof RotationalAcceleration) ? a : RotationalAcceleration.radS2(a);\r\n        this.torque = (t instanceof Torque) ? t : Torque.nm(t);\r\n    }\r\n};\r\n\r\ntype torqueFunction = (state: RotationalState) => Torque;\r\ntype inertiaFunction = (state: RotationalState) => number;\r\n\r\nexport class RotationalJoint implements Resetable {\r\n    initialState?: RotationalState;\r\n    data: Array<RotationalState>;\r\n\r\n    torques: Array<torqueFunction>;\r\n    inertias: Array<inertiaFunction>;\r\n    friction?: RotationalFriction;\r\n\r\n    constructor(initialState?: RotationalState) {\r\n        if (initialState) {\r\n            this.initialState = initialState;\r\n            this.data = [initialState];\r\n        } else {\r\n            this.data = [{\r\n                position: RotationalPosition.rad(0),\r\n                velocity: RotationalVelocity.radS(0),\r\n                acceleration: RotationalAcceleration.radS2(0),\r\n                torque: Torque.nm(0)\r\n            }];\r\n        }\r\n        \r\n        this.torques = [];\r\n        this.inertias = [];\r\n    }\r\n\r\n    addTorque(t: Array<torqueFunction> | torqueFunction) {\r\n        if (Array.isArray(t)) {\r\n            this.torques.push(...t);\r\n        } else {\r\n            this.torques.push(t);\r\n        }\r\n    }\r\n\r\n    addInertia(i: Array<inertiaFunction> | inertiaFunction) {\r\n        if (Array.isArray(i)) {\r\n            this.inertias.push(...i);\r\n        } else {\r\n            this.inertias.push(i);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        if (this.initialState) {\r\n            this.data = [this.initialState];\r\n        } else {\r\n            this.data = [{\r\n                position: RotationalPosition.rad(0),\r\n                velocity: RotationalVelocity.radS(0),\r\n                acceleration: RotationalAcceleration.radS2(0),\r\n                torque: Torque.nm(0)\r\n            }];\r\n        }\r\n    }\r\n\r\n    get current(): RotationalState {\r\n        return this.data[this.data.length - 1]\r\n    }\r\n\r\n    run(deltaTime: Time) {\r\n        let jTotal = this.inertias.reduce((accumulator, j) => {\r\n            return accumulator + j(this.current);\r\n        }, 0);\r\n\r\n        let torqueTotal = this.torques.reduce((accumulator, t) => {\r\n            return accumulator + t(this.current).nm();\r\n        }, 0);\r\n\r\n        if (this.friction) {\r\n            torqueTotal += this.friction.torque(this.current.velocity, Torque.nm(torqueTotal)).nm();\r\n        }\r\n\r\n        let acceleration = RotationalAcceleration.radS2(torqueTotal / jTotal);\r\n        let velocity = RotationalVelocity.radS(this.current.velocity.radS() + (acceleration.radS2() * deltaTime.s()))\r\n        let position = RotationalPosition.rad(this.current.position.rad() + (velocity.radS() * deltaTime.s()));\r\n\r\n        this.data.push({\r\n            position,\r\n            velocity,\r\n            acceleration,\r\n            torque: Torque.nm(torqueTotal)\r\n        });\r\n    }\r\n}","import Length from \"../Physics/Units/Length\";\r\nimport Mass from \"../Physics/Units/Mass\";\r\nimport Wheel from \"../Physics/Wheel\";\r\n\r\nexport default class SteelFlywheel extends Wheel {\r\n    private static radius = Length.mm(100);\r\n    private static mass = Mass.kg(4);\r\n\r\n    constructor() {\r\n        super(SteelFlywheel.radius, SteelFlywheel.mass);\r\n    }\r\n}","import Mass from './Units/Mass';\r\nimport Length from './Units/Length';\r\n\r\n/**\r\n * Creates a \"wheel\" simulated as a solid cylinder to hand to a motor.\r\n */\r\nclass Wheel {\r\n    radius: Length;\r\n    mass: Mass;\r\n\r\n    constructor(radius: Length, mass: Mass) {\r\n        this.radius = radius;\r\n        this.mass = mass;\r\n\r\n        this.inertia = this.inertia.bind(this);\r\n    }\r\n\r\n    inertia(): number {\r\n        return 0.5 * this.mass.kg() * Math.pow(this.radius.m(), 2);\r\n    }\r\n}\r\n\r\nexport default Wheel;","import Time from \"../Sim/Physics/Units/Time\";\r\nimport p5Type from \"p5\";\r\n\r\nexport type ControlSystem = {\r\n    (target: number, current: number, timeStep?: number): number;\r\n}\r\n\r\nexport type ExerciseData = {\r\n    time: number;\r\n    target: number;\r\n    current: number;\r\n    setPoint: number;\r\n}\r\n\r\nexport type GraphConfig = {\r\n    yLabel?: string,\r\n    xLabel?: string,\r\n    tickFormater?(value: any, index: number): string,\r\n    riseTimeValue?: number;\r\n    overshootValue?: number;\r\n    steadyStateError?: number;\r\n    graphKeys?: Array<string>;\r\n}\r\n\r\nexport interface Resetable {\r\n    reset(): void;\r\n}\r\n\r\ntype LogFunction = (message: string) => void;\r\n\r\nexport abstract class Exercise implements Resetable {\r\n    abstract name: string;\r\n    data: Array<ExerciseData>;\r\n    totalTime: Time;\r\n    timeStep: Time;\r\n    starterCode: string;\r\n    target: number;\r\n    controlSystem: ControlSystem;\r\n    abstract graphConfig: GraphConfig;\r\n    drawStep: number;\r\n    log: LogFunction;\r\n    showTimeStep = false;\r\n    controlSystemTimeStep: Time;\r\n\r\n    abstract draw(p5: p5Type): void;\r\n    protected abstract runStep(currentTime: Time): void;\r\n\r\n    constructor(totalTime: Time, timeStep: Time, starterCode: string, target: number) {\r\n        this.data = [];\r\n\r\n        this.totalTime = totalTime;\r\n        this.timeStep = timeStep;\r\n        this.controlSystemTimeStep = timeStep;\r\n        this.starterCode = starterCode;\r\n        this.target = target;\r\n        this.log = () => {};\r\n        this.controlSystem = () => 0;\r\n        this.drawStep = 0;\r\n    }\r\n\r\n    reset() {\r\n        this.data = [];\r\n    }\r\n\r\n    run(): void {\r\n        for(let t = 0; t < this.totalTime.ms(); t += this.timeStep.ms()) {\r\n            this.runStep(Time.ms(t));\r\n        }\r\n    }\r\n};\r\n","import RedLine from \"../Sim/Motors/RedLine\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalVelocity from \"../Sim/Physics/Units/RotationalVelocity\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport SteelFlywheel from \"../Sim/Wheels/SteelFlywheel\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to control a 775 pro to spin a\r\n* steel flywheel at 10 revolutions per second (rps).\r\n* \r\n* Your control system is handed two things, a target rps\r\n* and a current rps. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n(target, current, timeStep) => {\r\n    return 0;\r\n}\r\n\r\n`\r\n\r\nclass Exercise1 extends Exercise {\r\n    name = \"Exercise1\";\r\n    private static totalTime = Time.s(5);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalVelocity.rps(10);\r\n\r\n    private staticFriction = Torque.nm(0.2);\r\n    private dynamicFriction = Torque.nm(0.1);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new RedLine();\r\n    private wheel = new SteelFlywheel();\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n\r\n    graphConfig = {\r\n        yLabel: \"rps\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise1.totalTime, Exercise1.timeStep, starterCode, Exercise1.initialTarget.rps())\r\n\r\n        this.joint.addInertia([\r\n            this.wheel.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque,\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.velocity.rps();\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let radius = 75;\r\n        let angle = this.joint.data[this.drawStep] ? this.joint.data[this.drawStep].position.rad() : 0;\r\n        let {x, y} = angleToCoordinate(angle, radius);\r\n\r\n\t\tp5.background(255);\r\n\r\n        p5.fill(66, 135, 245);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 200, 200);\r\n\r\n        p5.fill(66, 245, 111);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX + x, centerY + y, 20, 20);\r\n    }\r\n}\r\n\r\nexport default Exercise1;","import DCMotor from \"../Physics/DCMotor\";\r\nimport RotationalVelocity from '../Physics/Units/RotationalVelocity';\r\nimport Torque from '../Physics/Units/Torque';\r\nimport Voltage from '../Physics/Units/Voltage';\r\nimport Current from '../Physics/Units/Current';\r\nimport Length from '../Physics/Units/Length';\r\nimport Mass from '../Physics/Units/Mass';\r\n\r\nexport default class NeverestOrbital20 extends DCMotor {\r\n    private static operatingVoltage = Voltage.v(12);\r\n    private static stallTorque = Torque.nm(3.32);\r\n    private static stallCurrent = Current.a(11.5);\r\n    private static breakawayTorque = Torque.oz_in(6.4);\r\n    private static noLoadSpeed = RotationalVelocity.rpm(285);\r\n    private static noLoadCurrent = Current.a(0.2);\r\n    private static resistance = 0.8;\r\n    private static rotorRadius = Length.mm(12);\r\n    private static rotorMass = Mass.g(83);\r\n    private static gearRatio = 19.2;\r\n\r\n    constructor() {\r\n        super(\r\n            NeverestOrbital20.operatingVoltage,\r\n            NeverestOrbital20.stallTorque,\r\n            NeverestOrbital20.stallCurrent,\r\n            NeverestOrbital20.breakawayTorque,\r\n            NeverestOrbital20.noLoadSpeed,\r\n            NeverestOrbital20.noLoadCurrent,\r\n            NeverestOrbital20.resistance,\r\n            NeverestOrbital20.rotorRadius,\r\n            NeverestOrbital20.rotorMass,\r\n            NeverestOrbital20.gearRatio\r\n        )\r\n    }\r\n\r\n}\r\n","import Mass from \"./Units/Mass\";\r\nimport Length from \"./Units/Length\";\r\n\r\nexport class PointMass {\r\n    mass: Mass;\r\n    length: Length;\r\n\r\n    constructor(mass: Mass, length: Length) {\r\n        this.mass = mass;\r\n        this.length = length;\r\n\r\n        this.inertia = this.inertia.bind(this);\r\n    }\r\n\r\n    inertia(): number {\r\n        return this.mass.kg() * Math.pow(this.length.m(), 2);\r\n    }\r\n}\r\n\r\nexport class RodAboutEnd {\r\n    mass: Mass;\r\n    length: Length;\r\n\r\n    constructor(mass: Mass, length: Length) {\r\n        this.mass = mass;\r\n        this.length = length;\r\n\r\n        this.inertia = this.inertia.bind(this);\r\n    }\r\n\r\n    inertia(): number {\r\n        return this.mass.kg() * Math.pow(this.length.m(), 2) / 3;\r\n    }\r\n}","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalPosition from \"../Sim/Physics/Units/RotationalPosition\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { RodAboutEnd } from \"../Sim/Physics/MomentOfInertia\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to point an arm at a particular angle using a Neverest\r\n* orbital 20.\r\n* \r\n* Your control system is handed two things, a target angle in degrees\r\n* and a current angle in degrees. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n(target, current, timeStep) => {\r\n    if (current < target) {\r\n        return 1;\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\n`\r\n\r\nclass Exercise2 extends Exercise {\r\n    name = \"Exercise2\";\r\n    private static totalTime = Time.s(3);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalPosition.deg(180);\r\n\r\n    private staticFriction = Torque.nm(0.2);\r\n    private dynamicFriction = Torque.nm(0.1);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private arm = new RodAboutEnd(Mass.g(100), Length.mm(300));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"degrees\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise2.totalTime, Exercise2.timeStep, starterCode, Exercise2.initialTarget.deg())\r\n\r\n        this.joint.addInertia([\r\n            this.arm.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg();\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let armLength = 200;\r\n        let angle = this.joint.data[this.drawStep].position.rad();\r\n        let {x, y} = angleToCoordinate(angle, armLength);\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Coordinate system\r\n        p5.push();\r\n        p5.strokeWeight(1);\r\n        p5.stroke(100);\r\n        p5.line(centerX, 0, centerX, p5.height);\r\n        p5.line(0, centerY, p5.width, centerY);\r\n        p5.pop();\r\n        \r\n        // Text\r\n        p5.push();\r\n        p5.textAlign(\"center\", \"center\");\r\n        p5.textSize(36);\r\n        p5.fill(255, 0, 0);\r\n        p5.text(\"N\", centerX, 50);\r\n        p5.fill(0);\r\n        p5.text(\"S\", centerX, p5.height - 50);\r\n        p5.text(\"W\", 50, centerY);\r\n        p5.text(\"E\", p5.width - 50, centerY);\r\n\r\n        p5.pop();\r\n\r\n        // Wires\r\n        p5.push();\r\n        p5.strokeWeight(5);\r\n        p5.stroke(0);\r\n        p5.line(centerX - 2, centerY, centerX - 2, centerY - 100);\r\n        p5.stroke(255, 0, 0);\r\n        p5.line(centerX + 2, centerY, centerX + 2, centerY - 100);\r\n        p5.pop();\r\n\r\n        // Motor outline\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.fill(255);\r\n        p5.strokeWeight(3);\r\n        p5.ellipse(centerX, centerY, 100, 100);\r\n        p5.pop();\r\n\r\n        // Bolt holes\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.ellipse(centerX - 35, centerY, 8, 8);\r\n        p5.ellipse(centerX + 35, centerY, 8, 8);\r\n        p5.ellipse(centerX, centerY - 35, 8, 8);\r\n        p5.ellipse(centerX, centerY + 35, 8, 8);\r\n        p5.pop();\r\n\r\n        // Arm\r\n        p5.push();\r\n        p5.stroke(p5.GRAY);\r\n        p5.strokeWeight(20);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX, centerY, centerX + x, centerY + y);\r\n        p5.pop();\r\n\r\n        // Motor shaft\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 10, 10);\r\n        p5.pop();\r\n    }\r\n}\r\n\r\nexport default Exercise2;","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalPosition from \"../Sim/Physics/Units/RotationalPosition\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { PointMass, RodAboutEnd } from \"../Sim/Physics/MomentOfInertia\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to point an arm at a particular angle using a Neverest\r\n* orbital 20. This time, we've added a weight on the end!\r\n* \r\n* Your control system is handed two things, a target angle in degrees\r\n* and a current angle in degrees. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n(target, current, timeStep) => {\r\n    if (current < target) {\r\n        return 1;\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\n`\r\n\r\nclass Exercise3 extends Exercise {\r\n    name = \"Exercise3\";\r\n    private static totalTime = Time.s(3);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalPosition.deg(180);\r\n\r\n    private staticFriction = Torque.nm(0.2);\r\n    private dynamicFriction = Torque.nm(0.1);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private arm = new RodAboutEnd(Mass.g(50), Length.mm(200));\r\n    private weight = new PointMass(Mass.g(125), Length.mm(139));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"degrees\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise3.totalTime, Exercise3.timeStep, starterCode, Exercise3.initialTarget.deg())\r\n\r\n        this.joint.addInertia([\r\n            this.arm.inertia,\r\n            this.weight.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg();\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let armLength = 200;\r\n        let angle = this.joint.data[this.drawStep].position.rad();\r\n        let arm = angleToCoordinate(angle, armLength);\r\n        let weight = angleToCoordinate(angle, armLength - 20);\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Coordinate system\r\n        p5.push();\r\n        p5.strokeWeight(1);\r\n        p5.stroke(100);\r\n        p5.line(centerX, 0, centerX, p5.height);\r\n        p5.line(0, centerY, p5.width, centerY);\r\n        p5.pop();\r\n        \r\n        // Text\r\n        p5.push();\r\n        p5.textAlign(\"center\", \"center\");\r\n        p5.textSize(36);\r\n        p5.fill(255, 0, 0);\r\n        p5.text(\"N\", centerX, 50);\r\n        p5.fill(0);\r\n        p5.text(\"S\", centerX, p5.height - 50);\r\n        p5.text(\"W\", 50, centerY);\r\n        p5.text(\"E\", p5.width - 50, centerY);\r\n\r\n        // Wires\r\n        p5.push();\r\n        p5.strokeWeight(5);\r\n        p5.stroke(0);\r\n        p5.line(centerX - 2, centerY, centerX - 2, centerY - 100);\r\n        p5.stroke(255, 0, 0);\r\n        p5.line(centerX + 2, centerY, centerX + 2, centerY - 100);\r\n        p5.pop();\r\n\r\n        // Motor outline\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.fill(255);\r\n        p5.strokeWeight(3);\r\n        p5.ellipse(centerX, centerY, 100, 100);\r\n        p5.pop();\r\n\r\n        // Bolt holes\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.ellipse(centerX - 35, centerY, 8, 8);\r\n        p5.ellipse(centerX + 35, centerY, 8, 8);\r\n        p5.ellipse(centerX, centerY - 35, 8, 8);\r\n        p5.ellipse(centerX, centerY + 35, 8, 8);\r\n        p5.pop();\r\n\r\n        // Arm\r\n        p5.push();\r\n        p5.stroke(p5.GRAY);\r\n        p5.strokeWeight(20);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX, centerY, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Weight\r\n        p5.push();\r\n        p5.stroke(50);\r\n        p5.strokeWeight(50);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX + weight.x, centerY + weight.y, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Motor shaft\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 10, 10);\r\n        p5.pop();\r\n    }\r\n}\r\n\r\nexport default Exercise3;","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint, RotationalState } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalPosition from \"../Sim/Physics/Units/RotationalPosition\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { RodAboutEnd } from \"../Sim/Physics/MomentOfInertia\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to point an arm at a particular angle using a Neverest\r\n* orbital 20. This time, gravity exists, and it isn't helping!\r\n* \r\n* Your control system is handed two things, a target angle in degrees\r\n* and a current angle in degrees. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n(target, current, timeStep) => {\r\n    if (current < target) {\r\n        return 1;\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\n`\r\n\r\nclass Exercise4 extends Exercise {\r\n    name = \"Exercise4\";\r\n    private static totalTime = Time.s(3);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalPosition.deg(180);\r\n\r\n    private staticFriction = Torque.nm(0.2);\r\n    private dynamicFriction = Torque.nm(0.1);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private arm = new RodAboutEnd(Mass.g(300), Length.mm(300));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"degrees\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise4.totalTime, Exercise4.timeStep, starterCode, Exercise4.initialTarget.deg())\r\n\r\n        this.gravity = this.gravity.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n\r\n        this.joint.addInertia([\r\n            this.arm.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque,\r\n            this.gravity\r\n        ])\r\n        this.joint.friction = this.friction;\r\n    }\r\n\r\n    private gravity(state: RotationalState): Torque {\r\n        let force = this.arm.mass.kg() * 9.81;\r\n        let radius = 0.5 * this.arm.length.m() * Math.cos(state.position.rad());\r\n\r\n        return Torque.nm(force * radius);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg();\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let armLength = 200;\r\n        let angle = this.joint.data[this.drawStep].position.rad();\r\n        let {x, y} = angleToCoordinate(angle, armLength);\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Coordinate system\r\n        p5.push();\r\n        p5.strokeWeight(1);\r\n        p5.stroke(100);\r\n        p5.line(centerX, 0, centerX, p5.height);\r\n        p5.line(0, centerY, p5.width, centerY);\r\n        p5.pop();\r\n\r\n        // Wires\r\n        p5.push();\r\n        p5.strokeWeight(5);\r\n        p5.stroke(0);\r\n        p5.line(centerX - 2, centerY, centerX - 2, centerY - 100);\r\n        p5.stroke(255, 0, 0);\r\n        p5.line(centerX + 2, centerY, centerX + 2, centerY - 100);\r\n        p5.pop();\r\n\r\n        // Motor outline\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.fill(255);\r\n        p5.strokeWeight(3);\r\n        p5.ellipse(centerX, centerY, 100, 100);\r\n        p5.pop();\r\n\r\n        // Bolt holes\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.ellipse(centerX - 35, centerY, 8, 8);\r\n        p5.ellipse(centerX + 35, centerY, 8, 8);\r\n        p5.ellipse(centerX, centerY - 35, 8, 8);\r\n        p5.ellipse(centerX, centerY + 35, 8, 8);\r\n        p5.pop();\r\n\r\n        // Arm\r\n        p5.push();\r\n        p5.stroke(p5.GRAY);\r\n        p5.strokeWeight(20);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX, centerY, centerX + x, centerY + y);\r\n        p5.pop();\r\n\r\n        // Motor shaft\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 10, 10);\r\n        p5.pop();\r\n    }\r\n}\r\n\r\nexport default Exercise4;","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint, RotationalState } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalPosition from \"../Sim/Physics/Units/RotationalPosition\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { RodAboutEnd, PointMass } from \"../Sim/Physics/MomentOfInertia\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to point an arm at a particular angle using a Neverest\r\n* orbital 20. This time, gravity exists, and it isn't helping!\r\n* \r\n* Your control system is handed two things, a target angle in degrees\r\n* and a current angle in degrees. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n(target, current, timeStep) => {\r\n    if (current < target) {\r\n        return 1;\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\n`\r\n\r\nclass Exercise5 extends Exercise {\r\n    name = \"Exercise5\";\r\n    private static totalTime = Time.s(3);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalPosition.deg(180);\r\n\r\n    private staticFriction = Torque.nm(0.2);\r\n    private dynamicFriction = Torque.nm(0.1);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private arm = new RodAboutEnd(Mass.g(50), Length.mm(200));\r\n    private weight = new PointMass(Mass.g(125), Length.mm(139));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"degrees\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise5.totalTime, Exercise5.timeStep, starterCode, Exercise5.initialTarget.deg())\r\n\r\n        this.gravity = this.gravity.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n\r\n        this.joint.addInertia([\r\n            this.arm.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque,\r\n            this.gravity\r\n        ])\r\n        this.joint.friction = this.friction;\r\n    }\r\n\r\n    private gravity(state: RotationalState): Torque {\r\n        let armForce = this.arm.mass.kg() * 9.81;\r\n        let armRaidus = 0.5 * this.arm.length.m() * Math.cos(state.position.rad());\r\n\r\n        let weightForce = this.weight.mass.kg() * 9.81;\r\n        let weightRadius = this.weight.length.m() * Math.cos(state.position.rad()); \r\n\r\n        let torque = armForce * armRaidus + weightForce * weightRadius;\r\n\r\n        return Torque.nm(torque);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg();\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let armLength = 200;\r\n        let angle = this.joint.data[this.drawStep].position.rad();\r\n        let arm = angleToCoordinate(angle, armLength);\r\n        let weight = angleToCoordinate(angle, armLength - 20);\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Coordinate system\r\n        p5.push();\r\n        p5.strokeWeight(1);\r\n        p5.stroke(100);\r\n        p5.line(centerX, 0, centerX, p5.height);\r\n        p5.line(0, centerY, p5.width, centerY);\r\n        p5.pop();\r\n\r\n        // Wires\r\n        p5.push();\r\n        p5.strokeWeight(5);\r\n        p5.stroke(0);\r\n        p5.line(centerX - 2, centerY, centerX - 2, centerY - 100);\r\n        p5.stroke(255, 0, 0);\r\n        p5.line(centerX + 2, centerY, centerX + 2, centerY - 100);\r\n        p5.pop();\r\n\r\n        // Motor outline\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.fill(255);\r\n        p5.strokeWeight(3);\r\n        p5.ellipse(centerX, centerY, 100, 100);\r\n        p5.pop();\r\n\r\n        // Bolt holes\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.ellipse(centerX - 35, centerY, 8, 8);\r\n        p5.ellipse(centerX + 35, centerY, 8, 8);\r\n        p5.ellipse(centerX, centerY - 35, 8, 8);\r\n        p5.ellipse(centerX, centerY + 35, 8, 8);\r\n        p5.pop();\r\n\r\n        // Arm\r\n        p5.push();\r\n        p5.stroke(p5.GRAY);\r\n        p5.strokeWeight(20);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX, centerY, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Weight\r\n        p5.push();\r\n        p5.stroke(50);\r\n        p5.strokeWeight(50);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX + weight.x, centerY + weight.y, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Motor shaft\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 10, 10);\r\n        p5.pop();\r\n    }\r\n}\r\n\r\nexport default Exercise5;","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalPosition from \"../Sim/Physics/Units/RotationalPosition\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { PointMass, RodAboutEnd } from \"../Sim/Physics/MomentOfInertia\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to point an arm at a particular angle using a Neverest\r\n* orbital 20. This time, we've added a weight on the end! Additionally,\r\n* we have added super special bearings that reduce friction!\r\n* \r\n* Your control system is handed two things, a target angle in degrees\r\n* and a current angle in degrees. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n\r\nlet Kp = 0.003;\r\n\r\n(target, current, timeStep) => {\r\n    let error = target - current;\r\n\r\n    return error * Kp;\r\n}\r\n\r\n`\r\n\r\nclass Exercise6 extends Exercise {\r\n    name = \"Exercise6\";\r\n    private static totalTime = Time.s(3);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalPosition.deg(180);\r\n\r\n    private staticFriction = Torque.nm(0.02);\r\n    private dynamicFriction = Torque.nm(0.01);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private arm = new RodAboutEnd(Mass.g(100), Length.mm(300));\r\n    private weight = new PointMass(Mass.g(200), Length.mm(300));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"degrees\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise6.totalTime, Exercise6.timeStep, starterCode, Exercise6.initialTarget.deg())\r\n\r\n        this.joint.addInertia([\r\n            this.arm.inertia,\r\n            this.weight.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg();\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let armLength = 200;\r\n        let angle = this.joint.data[this.drawStep].position.rad();\r\n        let arm = angleToCoordinate(angle, armLength);\r\n        let weight = angleToCoordinate(angle, armLength - 20);\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Coordinate system\r\n        p5.push();\r\n        p5.strokeWeight(1);\r\n        p5.stroke(100);\r\n        p5.line(centerX, 0, centerX, p5.height);\r\n        p5.line(0, centerY, p5.width, centerY);\r\n        p5.pop();\r\n        \r\n        // Text\r\n        p5.push();\r\n        p5.textAlign(\"center\", \"center\");\r\n        p5.textSize(36);\r\n        p5.fill(255, 0, 0);\r\n        p5.text(\"N\", centerX, 50);\r\n        p5.fill(0);\r\n        p5.text(\"S\", centerX, p5.height - 50);\r\n        p5.text(\"W\", 50, centerY);\r\n        p5.text(\"E\", p5.width - 50, centerY);\r\n\r\n        // Wires\r\n        p5.push();\r\n        p5.strokeWeight(5);\r\n        p5.stroke(0);\r\n        p5.line(centerX - 2, centerY, centerX - 2, centerY - 100);\r\n        p5.stroke(255, 0, 0);\r\n        p5.line(centerX + 2, centerY, centerX + 2, centerY - 100);\r\n        p5.pop();\r\n\r\n        // Motor outline\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.fill(255);\r\n        p5.strokeWeight(3);\r\n        p5.ellipse(centerX, centerY, 100, 100);\r\n        p5.pop();\r\n\r\n        // Bolt holes\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.ellipse(centerX - 35, centerY, 8, 8);\r\n        p5.ellipse(centerX + 35, centerY, 8, 8);\r\n        p5.ellipse(centerX, centerY - 35, 8, 8);\r\n        p5.ellipse(centerX, centerY + 35, 8, 8);\r\n        p5.pop();\r\n\r\n        // Arm\r\n        p5.push();\r\n        p5.stroke(p5.GRAY);\r\n        p5.strokeWeight(20);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX, centerY, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Weight\r\n        p5.push();\r\n        p5.stroke(50);\r\n        p5.strokeWeight(50);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX + weight.x, centerY + weight.y, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Motor shaft\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 10, 10);\r\n        p5.pop();\r\n    }\r\n}\r\n\r\nexport default Exercise6;","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { PointMass } from \"../Sim/Physics/MomentOfInertia\";\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are controlling an elevator, and need to up to the top floor.\r\n* This elevator is empty, so the counterweight removes all affects \r\n* of gravity.\r\n* \r\n* Your control system is handed a target floor and a current floor, \r\n* where the ground floor is 0, first floor is 1, etc. If the elevator\r\n* is between floors, you get a floating point number, e.g. 0.5.\r\n* Based on those, you must decide what to set the motor to, which is \r\n* any number between -1 and 1.\r\n*\r\n* Good luck!\r\n*/\r\n\r\nlet Kp = 0;\r\nlet Kd = 0;\r\nlet previous = 0;\r\n\r\n(target, current, timeStep) => {\r\n    let error = target - current;\r\n    let changeInError = (current - previous) / timeStep;\r\n    previous = current;\r\n\r\n    return error * Kp + changeInError * Kd;\r\n}\r\n\r\n`\r\n\r\nclass Exercise7 extends Exercise {\r\n    name = \"Exercise7\";\r\n    private static totalTime = Time.s(9);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = 3;\r\n\r\n    private staticFriction = Torque.nm(0.02);\r\n    private dynamicFriction = Torque.nm(0.01);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private car = new PointMass(Mass.kg(1), Length.mm(300));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"floor\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise7.totalTime, Exercise7.timeStep, starterCode, Exercise7.initialTarget)\r\n\r\n        this.joint.addInertia([\r\n            this.car.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg() / (5 * 360);\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n\r\n        let currentFloor = this.joint.data[this.drawStep].position.deg() / (360 * 5);\r\n\r\n        let floors = 4;\r\n        let floorSpacing  = p5.height / (floors + 1);\r\n        let elevatorHeight = floorSpacing;\r\n        let elevatorWidth = floorSpacing * 0.75;\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Floors background\r\n        p5.push();\r\n        p5.noStroke();\r\n        p5.fill(207, 91, 85);\r\n        p5.rect(0, floorSpacing, centerX, p5.height);\r\n        p5.pop();\r\n\r\n        // Elevator background\r\n        p5.push();\r\n        p5.noStroke();\r\n        p5.fill(100, 100, 100);\r\n        p5.rect(centerX, 0, elevatorWidth * 2, p5.height);\r\n        p5.pop();\r\n\r\n        // Elevator background\r\n        p5.push();\r\n        p5.noStroke();\r\n        p5.fill(0);\r\n        p5.ellipse(centerX + elevatorWidth, floorSpacing / 2, elevatorWidth, elevatorWidth);\r\n        p5.pop();\r\n\r\n        // Elevator\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.fill(171, 164, 87);\r\n        p5.rect(centerX, p5.height - elevatorHeight - (currentFloor * elevatorHeight), elevatorWidth, elevatorHeight);\r\n        p5.pop();\r\n\r\n        // Weight\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.rect(centerX + elevatorWidth + 10, elevatorHeight * (currentFloor + 1), elevatorWidth - 20, elevatorHeight);\r\n        p5.pop();\r\n\r\n        // Cable\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.line(centerX + (elevatorWidth / 2), elevatorHeight / 2, centerX + (elevatorWidth / 2), p5.height - elevatorHeight * (currentFloor + 1))\r\n        p5.line(centerX + (elevatorWidth * 1.5), elevatorHeight / 2, centerX + (elevatorWidth * 1.5), elevatorHeight * (currentFloor + 1))\r\n        p5.pop();\r\n\r\n        // Floors\r\n        for (let i = 0; i < floors; i++) {\r\n            p5.push();\r\n            p5.stroke(0);\r\n            p5.strokeWeight(5);\r\n            let height = p5.height - (i * floorSpacing);\r\n            p5.line(0, height, centerX, height);\r\n            p5.pop();\r\n        }\r\n    }\r\n}\r\n\r\nexport default Exercise7;","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint, RotationalState } from \"../Sim/Physics/RotationalJoint\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { PointMass } from \"../Sim/Physics/MomentOfInertia\";\r\nimport RotationalPosition from \"../Sim/Physics/Units/RotationalPosition\";\r\nimport RotationalVelocity from \"../Sim/Physics/Units/RotationalVelocity\";\r\nimport RotationalAcceleration from \"../Sim/Physics/Units/RotationalAcceleration\";\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are controlling an elevator, and need to up to the top floor.\r\n* This elevator is no longer empty, and you must contend with gravity!\r\n* \r\n* Your control system is handed a target floor and a current floor, \r\n* where the ground floor is 0, first floor is 1, etc. If the elevator\r\n* is between floors, you get a floating point number e.g. 0.5.\r\n* Based on those, you must decide what to set the motor to, which is \r\n* any number between -1 and 1.\r\n*\r\n* Good luck!\r\n*/\r\n\r\nlet Kp = 0;\r\nlet Kd = 0;\r\nlet previous = 0;\r\n\r\n(target, current, timeStep) => {\r\n    let error = target - current;\r\n    let changeInError = (current - previous) / timeStep;\r\n    previous = current;\r\n\r\n    return error * Kp + changeInError * Kd;\r\n}\r\n\r\n`\r\n\r\nclass Exercise8 extends Exercise {\r\n    name = \"Exercise8\";\r\n    private static totalTime = Time.s(9);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = 0;\r\n    private initialState: RotationalState = {\r\n        position: RotationalPosition.deg(360 * 5 * 2),\r\n        velocity: RotationalVelocity.radS(0),\r\n        acceleration: RotationalAcceleration.radS2(0),\r\n        torque: Torque.nm(0)\r\n    }\r\n\r\n    private staticFriction = Torque.nm(0.02);\r\n    private dynamicFriction = Torque.nm(0.01);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint(this.initialState);\r\n    private motor = new NeverestOrbital20();\r\n    private car = new PointMass(Mass.kg(1), Length.mm(300));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"floor\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise8.totalTime, Exercise8.timeStep, starterCode, Exercise8.initialTarget)\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n        this.gravity = this.gravity.bind(this);\r\n\r\n        this.joint.addInertia([\r\n            this.car.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque,\r\n            this.gravity\r\n        ])\r\n        this.joint.friction = this.friction;\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    gravity(state: RotationalState) {\r\n        return state.position.deg() > 0 ? Torque.nm(-1) : Torque.nm(0);\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg() / (5 * 360);\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n\r\n        let currentFloor = this.joint.data[this.drawStep].position.deg() / (360 * 5);\r\n\r\n        let floors = 4;\r\n        let floorSpacing  = p5.height / (floors + 1);\r\n        let elevatorHeight = floorSpacing;\r\n        let elevatorWidth = floorSpacing * 0.75;\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Floors background\r\n        p5.push();\r\n        p5.noStroke();\r\n        p5.fill(207, 91, 85);\r\n        p5.rect(0, floorSpacing, centerX, p5.height);\r\n        p5.pop();\r\n\r\n        // Elevator background\r\n        p5.push();\r\n        p5.noStroke();\r\n        p5.fill(100, 100, 100);\r\n        p5.rect(centerX, 0, elevatorWidth * 2, p5.height);\r\n        p5.pop();\r\n\r\n        // Elevator background\r\n        p5.push();\r\n        p5.noStroke();\r\n        p5.fill(0);\r\n        p5.ellipse(centerX + elevatorWidth, floorSpacing / 2, elevatorWidth, elevatorWidth);\r\n        p5.pop();\r\n\r\n        // Elevator\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.fill(171, 164, 87);\r\n        p5.rect(centerX, p5.height - elevatorHeight - (currentFloor * elevatorHeight), elevatorWidth, elevatorHeight);\r\n        p5.pop();\r\n\r\n        // Weight\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.rect(centerX + elevatorWidth + 10, elevatorHeight * (currentFloor + 1), elevatorWidth - 20, elevatorHeight);\r\n        p5.pop();\r\n\r\n        // Cable\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.line(centerX + (elevatorWidth / 2), elevatorHeight / 2, centerX + (elevatorWidth / 2), p5.height - elevatorHeight * (currentFloor + 1))\r\n        p5.line(centerX + (elevatorWidth * 1.5), elevatorHeight / 2, centerX + (elevatorWidth * 1.5), elevatorHeight * (currentFloor + 1))\r\n        p5.pop();\r\n\r\n        // Box\r\n        p5.push();\r\n        p5.noStroke();\r\n        p5.fill(100, 70, 30);\r\n        p5.rect(centerX + elevatorWidth / 4, p5.height - elevatorHeight / 2 - (currentFloor * elevatorHeight), elevatorWidth / 2, elevatorHeight / 2);\r\n        p5.pop();\r\n\r\n        // Floors\r\n        for (let i = 0; i < floors; i++) {\r\n            p5.push();\r\n            p5.stroke(0);\r\n            p5.strokeWeight(5);\r\n            let height = p5.height - (i * floorSpacing);\r\n            p5.line(0, height, centerX, height);\r\n            p5.pop();\r\n        }\r\n    }\r\n}\r\n\r\nexport default Exercise8;","import RedLine from \"../Sim/Motors/RedLine\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalVelocity from \"../Sim/Physics/Units/RotationalVelocity\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport SteelFlywheel from \"../Sim/Wheels/SteelFlywheel\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to control a 775 pro to spin a\r\n* steel flywheel at 10 revolutions per second (rps).\r\n* \r\n* Your control system is handed two things, a target rps\r\n* and a current rps. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n\r\nlet Kp = 0;\r\n\r\n(target, current, timeStep) => {\r\n    let error = target - current;\r\n\r\n    return error * Kp;\r\n}\r\n\r\n`\r\n\r\nclass Exercise9 extends Exercise {\r\n    name = \"Exercise9\";\r\n    private static totalTime = Time.s(5);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalVelocity.rps(10);\r\n\r\n    private staticFriction = Torque.nm(0.2);\r\n    private dynamicFriction = Torque.nm(0.1);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new RedLine();\r\n    private wheel = new SteelFlywheel();\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n\r\n    graphConfig = {\r\n        yLabel: \"rps\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise9.totalTime, Exercise9.timeStep, starterCode, Exercise9.initialTarget.rps())\r\n\r\n        this.joint.addInertia([\r\n            this.wheel.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque,\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.velocity.rps();\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let radius = 75;\r\n        let angle = this.joint.data[this.drawStep] ? this.joint.data[this.drawStep].position.rad() : 0;\r\n        let {x, y} = angleToCoordinate(angle, radius);\r\n\r\n\t\tp5.background(255);\r\n\r\n        p5.fill(66, 135, 245);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 200, 200);\r\n\r\n        p5.fill(66, 245, 111);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX + x, centerY + y, 20, 20);\r\n    }\r\n}\r\n\r\nexport default Exercise9;","import RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport { PointMass } from \"../Sim/Physics/MomentOfInertia\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\n\r\nconst starterCode = `\r\n/*\r\n* You are trying to drive a robot to a position!\r\n*\r\n* Your control system is handed two things, current position\r\n* in meters, and a target position in meters. Based on those, \r\n* you must decide what to set the motor to, which is any \r\n* number between -1 and 1.\r\n*\r\n* Good luck!\r\n*/\r\n\r\nlet error = 0;\r\nlet cumulativeError = 0;\r\nlet changeInError = 0;\r\nlet previousError = 0;\r\n\r\nlet Kp = 0;\r\nlet Ki = 0;\r\nlet Kd = 0;\r\n\r\n(target, current, timeStep) => {\r\n    error = target - current;\r\n    changeInError = (error - previousError) / timeStep;\r\n    cumulativeError += error * timeStep;\r\n\r\n    previousError = error;\r\n\r\n    return error * Kp + changeInError * Kd + cumulativeError * Ki;\r\n}\r\n\r\n`\r\n\r\nclass Exercise10 extends Exercise {\r\n    name = \"Exercise10\";\r\n    private static totalTime = Time.s(3);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = 1;\r\n    private static rotationToMm = 0.3;\r\n\r\n    private staticFriction = Torque.nm(2);\r\n    private dynamicFriction = Torque.nm(2);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private robot = new PointMass(Mass.kg(5), Length.mm(50))\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n\r\n    graphConfig = {\r\n        yLabel: \"meters\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise10.totalTime, Exercise10.timeStep, starterCode, Exercise10.initialTarget)\r\n\r\n        this.joint.addInertia([\r\n            this.robot.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque,\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.rot() * Exercise10.rotationToMm;\r\n        let setPoint = this.controlSystem(this.target, current, this.timeStep.s());\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        const bodyWidth = 300;\r\n        const bodyHeight = 150;\r\n        const numberOfLines = 5;\r\n        const lineLength = p5.width / (numberOfLines * 2);\r\n\r\n        let distance = this.joint.data[this.drawStep]\r\n                        ? this.joint.data[this.drawStep].position.rot() * Exercise10.rotationToMm\r\n                        : 0;\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Road\r\n        p5.push();\r\n        p5.fill(50);\r\n        p5.noStroke();\r\n        p5.rectMode(p5.CENTER)\r\n        p5.rect(centerX, centerY + 50, p5.width, bodyHeight);\r\n        p5.stroke(230, 221, 53);\r\n        p5.strokeWeight(3);\r\n\r\n        let xOffset = ((distance % 0.2) / 0.2) * (lineLength * 2);\r\n\r\n        for (let i = 0; i < numberOfLines + 1; i++) {\r\n            p5.line(i * 2 * lineLength - xOffset, centerY + 50, i * 2 * lineLength + lineLength - xOffset, centerY + 50);\r\n        }\r\n        p5.pop();\r\n\r\n        // Finish line\r\n        p5.push();\r\n        p5.stroke(201, 34, 34);\r\n        p5.strokeWeight(20);\r\n        p5.strokeCap(p5.SQUARE);\r\n\r\n        let distanceToGo = this.target - distance;\r\n\r\n        p5.line(\r\n            centerX + (distanceToGo / 0.2) * (lineLength * 2), \r\n            centerY - bodyHeight * 0.5 + 50, \r\n            centerX + (distanceToGo / 0.2) * (lineLength * 2),\r\n            centerY + bodyHeight * 0.5 + 50, \r\n        );\r\n        p5.pop();\r\n\r\n        // Body\r\n        p5.push();\r\n        p5.fill(0, 0, 176);\r\n        p5.noStroke();\r\n        p5.rectMode(p5.CENTER);\r\n        p5.rect(centerX, centerY, bodyWidth, bodyHeight);\r\n        p5.pop();\r\n\r\n        // Tire and wheel\r\n        p5.push();\r\n        p5.noStroke();\r\n        [-(bodyWidth * 0.35), 0, (bodyWidth * 0.35)].forEach(xOffset => {\r\n            p5.fill(135);\r\n            p5.circle(centerX + xOffset, centerY + bodyHeight * 0.35, 80);\r\n            p5.fill(0);\r\n            p5.circle(centerX + xOffset, centerY + bodyHeight * 0.35, 40);\r\n        })\r\n        p5.pop();\r\n\r\n        // Dozer\r\n        p5.push();\r\n        p5.noFill();\r\n        p5.stroke(80);\r\n        p5.strokeWeight(10);\r\n        p5.arc(centerX + bodyWidth * 0.5 + 75, centerY, 50, bodyHeight, p5.HALF_PI, -p5.HALF_PI);\r\n        p5.line(centerX + bodyWidth * 0.5, centerY, centerX + bodyWidth * 0.5 + 50, centerY);\r\n        p5.pop();\r\n\r\n    }\r\n}\r\n\r\nexport default Exercise10;","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalPosition from \"../Sim/Physics/Units/RotationalPosition\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { PointMass, RodAboutEnd } from \"../Sim/Physics/MomentOfInertia\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to point an arm at a particular angle using a Neverest\r\n* orbital 20. This time, we've added a weight on the end! Additionally,\r\n* we have added super special bearings that reduce friction!\r\n* \r\n* Your control system is handed two things, a target angle in degrees\r\n* and a current angle in degrees. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n\r\n\r\nlet error = 0;\r\nlet cumulativeError = 0;\r\nlet changeInError = 0;\r\nlet previousError = 0;\r\n\r\nlet Kp = 0;\r\nlet Ki = 0;\r\nlet Kd = 0;\r\n\r\n(target, current, timeStep) => {\r\n    error = target - current;\r\n    changeInError = (error - previousError) / timeStep;\r\n    cumulativeError += error * timeStep;\r\n\r\n    previousError = error;\r\n\r\n    return error * Kp + changeInError * Kd + cumulativeError * Ki;\r\n}\r\n\r\n`\r\n\r\nclass Exercise11 extends Exercise {\r\n    name = \"Exercise11\";\r\n    private static totalTime = Time.s(3);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalPosition.deg(180);\r\n    showTimeStep = true;\r\n    private lastControlSystemUpdate: Time = this.controlSystemTimeStep.negate();\r\n\r\n    private staticFriction = Torque.nm(0.02);\r\n    private dynamicFriction = Torque.nm(0.01);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private arm = new RodAboutEnd(Mass.g(100), Length.mm(300));\r\n    private weight = new PointMass(Mass.g(200), Length.mm(300));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"degrees\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise11.totalTime, Exercise11.timeStep, starterCode, Exercise11.initialTarget.deg())\r\n\r\n        this.joint.addInertia([\r\n            this.arm.inertia,\r\n            this.weight.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n        this.lastControlSystemUpdate = this.controlSystemTimeStep.negate();\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg();\r\n        let setPoint;\r\n        if (currentTime.ms() - this.lastControlSystemUpdate.ms() >= this.controlSystemTimeStep.ms()) {\r\n            setPoint = this.controlSystem(this.target, current, this.controlSystemTimeStep.s());\r\n            this.lastControlSystemUpdate = Time.ms(currentTime.ms());\r\n        } else {\r\n            setPoint = this.data.length > 1 ? this.data[this.data.length - 1].setPoint : 0;\r\n        }\r\n\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let armLength = 200;\r\n        let angle = this.joint.data[this.drawStep] ? this.joint.data[this.drawStep].position.rad() : 0;\r\n        let arm = angleToCoordinate(angle, armLength);\r\n        let weight = angleToCoordinate(angle, armLength - 20);\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Coordinate system\r\n        p5.push();\r\n        p5.strokeWeight(1);\r\n        p5.stroke(100);\r\n        p5.line(centerX, 0, centerX, p5.height);\r\n        p5.line(0, centerY, p5.width, centerY);\r\n        p5.pop();\r\n        \r\n        // Text\r\n        p5.push();\r\n        p5.textAlign(\"center\", \"center\");\r\n        p5.textSize(36);\r\n        p5.fill(255, 0, 0);\r\n        p5.text(\"N\", centerX, 50);\r\n        p5.fill(0);\r\n        p5.text(\"S\", centerX, p5.height - 50);\r\n        p5.text(\"W\", 50, centerY);\r\n        p5.text(\"E\", p5.width - 50, centerY);\r\n\r\n        // Wires\r\n        p5.push();\r\n        p5.strokeWeight(5);\r\n        p5.stroke(0);\r\n        p5.line(centerX - 2, centerY, centerX - 2, centerY - 100);\r\n        p5.stroke(255, 0, 0);\r\n        p5.line(centerX + 2, centerY, centerX + 2, centerY - 100);\r\n        p5.pop();\r\n\r\n        // Motor outline\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.fill(255);\r\n        p5.strokeWeight(3);\r\n        p5.ellipse(centerX, centerY, 100, 100);\r\n        p5.pop();\r\n\r\n        // Bolt holes\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.ellipse(centerX - 35, centerY, 8, 8);\r\n        p5.ellipse(centerX + 35, centerY, 8, 8);\r\n        p5.ellipse(centerX, centerY - 35, 8, 8);\r\n        p5.ellipse(centerX, centerY + 35, 8, 8);\r\n        p5.pop();\r\n\r\n        // Arm\r\n        p5.push();\r\n        p5.stroke(p5.GRAY);\r\n        p5.strokeWeight(20);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX, centerY, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Weight\r\n        p5.push();\r\n        p5.stroke(50);\r\n        p5.strokeWeight(50);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX + weight.x, centerY + weight.y, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Motor shaft\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 10, 10);\r\n        p5.pop();\r\n    }\r\n}\r\n\r\nexport default Exercise11;","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalPosition from \"../Sim/Physics/Units/RotationalPosition\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { PointMass, RodAboutEnd } from \"../Sim/Physics/MomentOfInertia\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to point an arm at a particular angle using a Neverest\r\n* orbital 20. This time, we've added a weight on the end! Additionally,\r\n* we have added super special bearings that reduce friction!\r\n* \r\n* Your control system is handed two things, a target angle in degrees\r\n* and a current angle in degrees. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* For this exercise, we have added a sensor with much lower precision than before,\r\n* it only works in even degrees.\r\n*\r\n* Good luck!\r\n*/\r\n\r\n\r\nlet error = 0;\r\nlet cumulativeError = 0;\r\nlet changeInError = 0;\r\nlet previousError = 0;\r\n\r\nlet Kp = 0;\r\nlet Ki = 0;\r\nlet Kd = 0;\r\n\r\n(target, current, timeStep) => {\r\n    error = target - current;\r\n    changeInError = (error - previousError) / timeStep;\r\n    cumulativeError += error * timeStep;\r\n\r\n    previousError = error;\r\n\r\n    return error * Kp + changeInError * Kd + cumulativeError * Ki;\r\n}\r\n\r\n`\r\n\r\nclass Exercise12 extends Exercise {\r\n    name = \"Exercise12\";\r\n    private static totalTime = Time.s(3);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalPosition.deg(180);\r\n    showTimeStep = true;\r\n    private lastControlSystemUpdate: Time = this.controlSystemTimeStep.negate();\r\n\r\n    private staticFriction = Torque.nm(0.02);\r\n    private dynamicFriction = Torque.nm(0.01);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private arm = new RodAboutEnd(Mass.g(100), Length.mm(300));\r\n    private weight = new PointMass(Mass.g(200), Length.mm(300));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"degrees\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise12.totalTime, Exercise12.timeStep, starterCode, Exercise12.initialTarget.deg())\r\n\r\n        this.joint.addInertia([\r\n            this.arm.inertia,\r\n            this.weight.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n        this.lastControlSystemUpdate = this.controlSystemTimeStep.negate();\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg();\r\n        current = Math.round(current / 4) * 4;\r\n        let setPoint;\r\n        if (currentTime.ms() - this.lastControlSystemUpdate.ms() >= this.controlSystemTimeStep.ms()) {\r\n            setPoint = this.controlSystem(this.target, current, this.controlSystemTimeStep.s());\r\n            this.lastControlSystemUpdate = Time.ms(currentTime.ms());\r\n        } else {\r\n            setPoint = this.data.length > 1 ? this.data[this.data.length - 1].setPoint : 0;\r\n        }\r\n\r\n\r\n        if (setPoint === null || setPoint === undefined) {\r\n            this.log(\"Control system didn't return anything. Make sure your function will always return a number.\")\r\n        } else if (typeof setPoint !== \"number\") {\r\n            this.log(\"Control system returned something that wasn't a number. Make sure your function will always return a number.\")\r\n        }\r\n\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let armLength = 200;\r\n        let angle = this.joint.data[this.drawStep] ? this.joint.data[this.drawStep].position.rad() : 0;\r\n        let arm = angleToCoordinate(angle, armLength);\r\n        let weight = angleToCoordinate(angle, armLength - 20);\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Coordinate system\r\n        p5.push();\r\n        p5.strokeWeight(1);\r\n        p5.stroke(100);\r\n        p5.line(centerX, 0, centerX, p5.height);\r\n        p5.line(0, centerY, p5.width, centerY);\r\n        p5.pop();\r\n        \r\n        // Text\r\n        p5.push();\r\n        p5.textAlign(\"center\", \"center\");\r\n        p5.textSize(36);\r\n        p5.fill(255, 0, 0);\r\n        p5.text(\"N\", centerX, 50);\r\n        p5.fill(0);\r\n        p5.text(\"S\", centerX, p5.height - 50);\r\n        p5.text(\"W\", 50, centerY);\r\n        p5.text(\"E\", p5.width - 50, centerY);\r\n\r\n        // Wires\r\n        p5.push();\r\n        p5.strokeWeight(5);\r\n        p5.stroke(0);\r\n        p5.line(centerX - 2, centerY, centerX - 2, centerY - 100);\r\n        p5.stroke(255, 0, 0);\r\n        p5.line(centerX + 2, centerY, centerX + 2, centerY - 100);\r\n        p5.pop();\r\n\r\n        // Motor outline\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.fill(255);\r\n        p5.strokeWeight(3);\r\n        p5.ellipse(centerX, centerY, 100, 100);\r\n        p5.pop();\r\n\r\n        // Bolt holes\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.ellipse(centerX - 35, centerY, 8, 8);\r\n        p5.ellipse(centerX + 35, centerY, 8, 8);\r\n        p5.ellipse(centerX, centerY - 35, 8, 8);\r\n        p5.ellipse(centerX, centerY + 35, 8, 8);\r\n        p5.pop();\r\n\r\n        // Arm\r\n        p5.push();\r\n        p5.stroke(p5.GRAY);\r\n        p5.strokeWeight(20);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX, centerY, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Weight\r\n        p5.push();\r\n        p5.stroke(50);\r\n        p5.strokeWeight(50);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX + weight.x, centerY + weight.y, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Motor shaft\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 10, 10);\r\n        p5.pop();\r\n    }\r\n}\r\n\r\nexport default Exercise12;","import { Exercise } from \"./Exercise\";\r\nimport Exercise1 from \"./Exercise1\";\r\nimport Exercise2 from \"./Exercise2\";\r\nimport Exercise3 from \"./Exercise3\";\r\nimport Exercise4 from \"./Exercise4\";\r\nimport Exercise5 from \"./Exercise5\";\r\nimport Exercise6 from \"./Exercise6\";\r\nimport Exercise7 from \"./Exercise7\";\r\nimport Exercise8 from \"./Exercise8\";\r\nimport Exercise9 from \"./Exercise9\";\r\nimport Exercise10 from \"./Exercise10\";\r\nimport Exercise11 from \"./Exercise11\";\r\nimport Exercise12 from \"./Exercise12\";\r\n\r\nfunction GetExercise(exerciseNumber: string | null): Exercise {\r\n    switch(exerciseNumber) {\r\n        case \"1\":\r\n            return new Exercise1();\r\n        case \"2\":\r\n            return new Exercise2();\r\n        case \"3\":\r\n            return new Exercise3();\r\n        case \"4\":\r\n            return new Exercise4();\r\n        case \"5\":\r\n            return new Exercise5();\r\n        case \"6\":\r\n            return new Exercise6();\r\n        case \"7\":\r\n            return new Exercise7();\r\n        case \"8\":\r\n            return new Exercise8();\r\n        case \"9\":\r\n            return new Exercise9();\r\n        case \"10\":\r\n            return new Exercise10();\r\n        case \"11\":\r\n            return new Exercise11();\r\n        case \"12\":\r\n            return new Exercise12();\r\n        default:\r\n            return new Exercise1();\r\n    }\r\n}\r\n\r\nexport default GetExercise;","\r\nclass Unit {\r\n    protected value: number;\r\n\r\n    constructor(value: number) {\r\n        this.value = value;\r\n    }\r\n\r\n    equals(other: Unit): boolean {\r\n        return this.value === other.value;\r\n    }\r\n\r\n    isPositive(): boolean {\r\n        return this.value >= 0;\r\n    }\r\n\r\n    isNegative(): boolean {\r\n        return !this.isPositive();\r\n    }\r\n\r\n    negate<UnitType extends Unit>(): UnitType {\r\n        let toReturn = Object.create(this);\r\n        toReturn.value = -this.value;\r\n        return toReturn;\r\n    }\r\n}\r\n\r\nexport default Unit;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}