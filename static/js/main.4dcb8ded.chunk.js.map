{"version":3,"sources":["App.tsx","Editor/Editor.tsx","Graph/Graph.tsx","Preview/Preview.tsx","Console/Console.tsx","Sim/Sim.ts","Sim/Physics/Units/Torque.ts","Sim/Physics/Units/Voltage.ts","Utility.ts","Sim/Physics/DCMotor.ts","Sim/Physics/Units/RotationalVelocity.ts","Sim/Physics/Units/Current.ts","Sim/Physics/Units/Length.ts","Sim/Physics/Units/Mass.ts","Sim/Motors/RedLine.ts","Sim/Physics/RotationalFriction.ts","Sim/Physics/Units/RotationalPosition.ts","Sim/Physics/Units/RotationalAcceleration.ts","Sim/Physics/RotationalJoint.ts","Sim/Wheels/SteelFlywheel.ts","Sim/Physics/Wheel.ts","Exercises/Exercise.ts","Exercises/Exercise1.ts","Sim/Motors/NeverestOrbital20.ts","Sim/Physics/MomentOfInertia.ts","Exercises/Exercise2.ts","Exercises/Exercise3.ts","Exercises/ExerciseFactory.ts","Sim/Physics/Units/Unit.ts","Sim/Physics/Units/Time.ts","reportWebVitals.js","index.tsx"],"names":["getParams","URLSearchParams","window","location","search","App","props","sim","exercise","displayTimerHandle","state","graphData","logMessages","displayTime","params","GetExercise","get","Sim","newGraphData","setState","startDisplay","bind","displayCallback","run","code","undefined","this","clearInterval","func","eval","e","level","message","Function","controlSystem","reset","setup","setTimeout","drawStep","setInterval","DisplayStep","ms","timeStep","newTime","totalTime","fluid","className","xs","exerciseName","name","initialValue","starterCode","initialTarget","target","initialTime","s","onRun","onTimeChange","Time","onTargetChange","t","draw","data","config","graphConfig","cursor","React","Component","Editor","editor","timeValue","targetValue","onCodeChange","Cookies","setValue","getValue","value","set","variant","onClick","Text","onChange","parseInt","type","mode","theme","editorProps","$blockScrolling","height","width","onLoad","colors","Graph","margin","top","right","left","bottom","labelFormatter","label","toFixed","formatter","parseFloat","dataKey","tickFormatter","tickFormater","xLabel","position","offset","yLabel","angle","x","stroke","strokeDasharray","graphKeys","map","i","dot","Preview","useState","setWidth","setHeight","measuredDiv","useCallback","node","getBoundingClientRect","style","getComputedStyle","marginTop","marginBottom","paddingTop","paddingBottom","marginLeft","marginRight","paddingLeft","paddingRight","Math","floor","padding","ref","p5","canvasParentRef","createCanvas","parent","Console","updateGraphData","Torque","nm","ozIn_to_nm","lbFt_to_nm","oz_in","lb_ft","Unit","Voltage","volts","v","angleToCoordinate","radius","cos","y","sin","DCMotor","operatingVoltage","stallTorque","stallCurrent","breakawayTorque","noLoadSpeed","noLoadCurrent","resistance","rotorRadius","rotorMass","gearRatio","electricalConstant","suppliedVoltage","setPower","inertia","torque","power","min","max","kg","pow","m","velocity","radS","RotationalVelocity","rps_to_radS","rpm_to_radS","rps","rpm","PI","Current","amps","a","Length","meters","mm","Mass","lbs_to_kg","g","lbs","RedLine","RotationalFriction","staticFriction","dynamicFriction","abs","negate","isPositive","RotationalPosition","rad","conversion","deg","RotationalAcceleration","radS2","RotationalJoint","initialState","torques","inertias","friction","acceleration","Array","isArray","push","length","deltaTime","jTotal","reduce","accumulator","j","current","torqueTotal","SteelFlywheel","mass","Exercise","runStep","Exercise1","joint","motor","wheel","resetables","isNaN","toString","addInertia","addTorque","currentTime","setPoint","time","centerX","centerY","background","fill","noStroke","ellipse","NeverestOrbital20","PointMass","RodAboutEnd","Exercise2","arm","strokeWeight","line","pop","GRAY","strokeCap","Exercise3","weight","armLength","exerciseNumber","other","toReturn","Object","create","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4dcb8ded.chunk.js","sourcesContent":["import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './App.css';\n\nimport Editor from './Editor/Editor';\nimport Graph from './Graph/Graph';\nimport Preview from './Preview/Preview';\nimport Console, { LogMessage } from './Console/Console';\n\nimport Sim from './Sim/Sim';\nimport Time from './Sim/Physics/Units/Time';\nimport { Exercise, ExerciseData } from './Exercises/Exercise';\nimport GetExercise from './Exercises/ExerciseFactory';\n\nfunction getParams() {\n    return new URLSearchParams(window.location.search);\n}\n\ninterface AppState {\n    graphData: Array<ExerciseData>;\n    logMessages: Array<LogMessage>;\n    displayTime: number;\n}\n\nclass App extends React.Component<{}, AppState> {\n    private sim: Sim;\n    private exercise: Exercise;\n    private displayTimerHandle: number | undefined;\n    private static DisplayStep = Time.ms(10);\n\n    constructor(props: object) {\n        super(props);\n\n        this.state = {\n            graphData: [],\n            logMessages: [],\n            displayTime: 0\n        }\n\n        let params = getParams();\n        this.exercise = GetExercise(params.get(\"exercise\"));\n\n        this.sim = new Sim(newGraphData => this.setState({ graphData: newGraphData }));\n\n        this.startDisplay = this.startDisplay.bind(this);\n        this.displayCallback = this.displayCallback.bind(this);\n        this.run = this.run.bind(this);\n    }\n\n    run(code: string) {\n        if (this.displayTimerHandle !== undefined) {\n            window.clearInterval(this.displayTimerHandle);\n            this.displayTimerHandle = undefined;\n        }\n\n        let func = undefined;\n\n        try {\n            // eslint-disable-next-line\n            func = eval(code);\n        } catch (e) {\n            this.setState({\n                logMessages: [{\n                    level: 'error',\n                    message: (e as Error).message\n                }]\n            })\n            return;\n        }\n\n        if (func instanceof Function) {\n            // @ts-ignore\n            this.exercise.controlSystem = func;\n            this.exercise.reset();\n            this.sim.setup(this.exercise);\n            this.sim.run();\n            this.setState({logMessages: []})\n            window.setTimeout(this.startDisplay, 1500);\n        } else {\n            this.setState({\n                logMessages: [{\n                    level: 'error',\n                    message: \"Function not found. Make sure you haven't changed the original control system function.\"\n                }]\n            })\n        }\n    }\n\n    startDisplay() {\n        this.exercise.drawStep = 0;\n        this.setState({displayTime: 0})\n        this.displayTimerHandle = window.setInterval(this.displayCallback, App.DisplayStep.ms());\n    }\n\n    displayCallback() {\n        this.exercise.drawStep += App.DisplayStep.ms() / this.exercise.timeStep.ms();\n        let newTime = this.state.displayTime + App.DisplayStep.ms();\n\n        if (newTime >= this.exercise.totalTime.ms()) {\n            clearInterval(this.displayTimerHandle)\n            this.displayTimerHandle = undefined;\n            this.setState({displayTime: 0});\n        } else {\n            this.setState({displayTime: newTime});\n        }\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <Row className=\"app\">\n                    <Col xs={6} className=\"section\">\n                        <Row className=\"editor\">\n                            <Editor \n                                exerciseName={this.exercise.name}\n                                initialValue={this.exercise.starterCode} \n                                initialTarget={this.exercise.target}\n                                initialTime={this.exercise.totalTime.s()}\n                                onRun={this.run} \n                                onTimeChange={s => {this.exercise.totalTime = Time.s(s)}}\n                                onTargetChange={t => {this.exercise.target = t}}\n                            />\n                        </Row>\n                        <Row className=\"console\">\n                            <Console logMessages={this.state.logMessages}/>\n                        </Row>\n                    </Col>\n                    <Col xs={6} className=\"section\">\n                        <Row className=\"preview\">\n                            <Preview draw={this.exercise.draw}/>\n                        </Row>\n                        <Row className=\"graph\">\n                            <Graph data={this.state.graphData} config={this.exercise.graphConfig} cursor={this.state.displayTime}/>\n                        </Row>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nimport AceEditor from 'react-ace';\r\nimport { Ace } from 'ace-builds';\r\nimport 'ace-builds/src-min-noconflict/mode-javascript';\r\nimport 'ace-builds/src-min-noconflict/theme-github';\r\n\r\nimport Cookies from 'js-cookie';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport './Editor.css'\r\nimport { FormControl, InputGroup } from 'react-bootstrap';\r\n\r\ntype EditorProps = {\r\n    initialValue: string;\r\n    initialTime: number;\r\n    initialTarget: number;\r\n    exerciseName: string;\r\n    onRun(code: string):  void;\r\n    onTimeChange(time: number): void;\r\n    onTargetChange(target: number): void;\r\n};\r\n\r\nclass Editor extends React.Component<EditorProps, {}> {\r\n    editor: Ace.Editor | null;\r\n    state: {\r\n        timeValue: number,\r\n        targetValue: number\r\n    }\r\n\r\n    constructor(props: EditorProps) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            timeValue: props.initialTime,\r\n            targetValue: props.initialTarget\r\n        };\r\n\r\n        this.editor = null;\r\n        this.onTimeChange = this.onTimeChange.bind(this);\r\n        this.onTargetChange = this.onTargetChange.bind(this);\r\n        this.onCodeChange = this.onCodeChange.bind(this);\r\n        this.setup = this.setup.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.run = this.run.bind(this);\r\n    }\r\n\r\n    setup(editor: Ace.Editor) {\r\n        this.editor = editor;\r\n        let code = Cookies.get(this.props.exerciseName) || this.props.initialValue;\r\n        this.editor.setValue(code, -1)\r\n    }\r\n\r\n    reset() {\r\n        if (this.editor) {\r\n            let code = this.props.initialValue;\r\n            this.editor.setValue(code, -1)\r\n        }\r\n    }\r\n\r\n    private run() {\r\n        this.props.onRun(this.editor ? this.editor.getValue() : \"\");\r\n    }\r\n\r\n    onTimeChange(t: number) {\r\n        this.setState({timeValue: t});\r\n        this.props.onTimeChange(t);\r\n    }\r\n\r\n    onTargetChange(t: number) {\r\n        this.setState({targetValue: t});\r\n        this.props.onTargetChange(t);\r\n    }\r\n\r\n    onCodeChange(value: string) {\r\n        Cookies.set(this.props.exerciseName, value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container className=\"editorContainer\">\r\n                <Row className=\"justify-content-between\">\r\n                    <Col xs=\"auto\">\r\n                        <Button variant=\"primary\" onClick={this.reset.bind(this)}>Reset</Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup>\r\n                            <InputGroup.Text>Time (s)</InputGroup.Text>\r\n                            <FormControl \r\n                                onChange={(e) => this.onTimeChange(parseInt(e.target.value))}\r\n                                value={this.state.timeValue}\r\n                                type=\"number\"\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col>\r\n                        <InputGroup>\r\n                            <InputGroup.Text>Target</InputGroup.Text>\r\n                            <FormControl \r\n                                onChange={(e) => this.onTargetChange(parseInt(e.target.value))}\r\n                                value={this.state.targetValue}\r\n                                type=\"number\"\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col xs=\"auto\">\r\n                        <Button variant=\"success\" onClick={this.run}>Run</Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"editorRow\">\r\n                    <AceEditor\r\n                        mode='javascript'\r\n                        theme='github'\r\n                        name='editor'\r\n                        editorProps={{ $blockScrolling: true }}\r\n                        height=\"100%\"\r\n                        width=\"100%\"\r\n                        onLoad={this.setup}\r\n                        onChange={this.onCodeChange}\r\n                    />\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Editor","import { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Legend, Label, ReferenceLine, Tooltip } from 'recharts';\r\nimport { ExerciseData, GraphConfig } from '../Exercises/Exercise'\r\n\r\nconst colors = [\r\n    \"#f95d6a\",\r\n    \"#003f5c\",\r\n    \"#2f4b7c\",\r\n    \"#665191\",\r\n    \"#a05195\",\r\n    \"#d45087\",\r\n    \"#ff7c43\",\r\n    \"#ffa600\"\r\n]\r\n\r\ninterface GraphProps {\r\n    data: Array<ExerciseData>;\r\n    config: GraphConfig;\r\n    cursor: number;\r\n};\r\n\r\nfunction Graph(props: GraphProps) {\r\n    return (\r\n        <div>\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <LineChart data={props.data} margin={{top: 15, right: 15, left: 30, bottom: 30}}>\r\n                    <Tooltip \r\n                        labelFormatter={(label: string) => {\r\n                            return \"time: \" + (parseInt(label) / 1000).toFixed(2) + \"s\";\r\n                        }}\r\n                        formatter={(value: string) => {\r\n                            return parseFloat(value).toFixed(2);\r\n                        }}\r\n                    />\r\n                    <XAxis \r\n                        dataKey=\"time\" \r\n                        tickFormatter={props.config.tickFormater} \r\n                    >\r\n                        {props.config.xLabel ? \r\n                            <Label position=\"insideBottomLeft\" offset={-10}>{props.config.xLabel}</Label>\r\n                            :\r\n                            \"\"\r\n                        }\r\n                    </XAxis>\r\n                    <YAxis>\r\n                        {props.config.yLabel ? \r\n                            <Label position=\"left\" angle={-90}>{props.config.yLabel}</Label>\r\n                            :\r\n                            \"\"\r\n                        }\r\n                    </YAxis>\r\n                    <ReferenceLine x={props.cursor} stroke=\"black\"/>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    {\r\n                        props.config.graphKeys ?\r\n                        props.config.graphKeys.map(((dataKey, i) => \r\n                            <Line dataKey={dataKey} stroke={colors[i]} dot={false} key={i}/>\r\n                        ))\r\n                        : null\r\n                    }\r\n                    <Legend/>\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graph;","import React, { useCallback, useState } from 'react';\r\nimport Sketch from 'react-p5';\r\nimport p5Types from 'p5';\r\n\r\ntype PreviewProps = {\r\n    draw: (p5: p5Types) => void;\r\n}\r\n\r\nfunction Preview(props: PreviewProps) {\r\n    const [ width, setWidth ] = useState(0);\r\n    const [ height, setHeight ] = useState(0);\r\n\r\n    const measuredDiv = useCallback(node => {\r\n        if (node !== null && width === 0 && height === 0) {\r\n            let height = node.getBoundingClientRect().height;\r\n            let width = node.getBoundingClientRect().width;\r\n            let style = getComputedStyle(node);\r\n\r\n            height -= parseInt(style.marginTop) + parseInt(style.marginBottom) +\r\n                        parseInt(style.paddingTop) + parseInt(style.paddingBottom);\r\n            width -= parseInt(style.marginLeft) + parseInt(style.marginRight) +\r\n                        parseInt(style.paddingLeft) + parseInt(style.paddingRight);\r\n\r\n            setHeight(Math.floor(height));\r\n            setWidth(Math.floor(width));\r\n        }\r\n    }, [height, width]);\r\n\r\n    const setup = (p5: p5Types, canvasParentRef: Element) => {\r\n\t\tp5.createCanvas(width, height).parent(canvasParentRef);\r\n\t};\r\n\r\n\tconst draw = (p5: p5Types) => {\r\n        props.draw(p5);\r\n\t};\r\n\r\n\treturn (\r\n        <div style={{width: \"95%\", height: \"95%\", margin: \"10px\", padding: \"0px\"}} ref={measuredDiv}>\r\n            {\r\n                height !== 0 && width !== 0\r\n                    ? <Sketch setup={setup} draw={draw} />\r\n                    : <div/>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preview;\r\n","import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nimport \"./Console.css\"\r\n\r\nexport type LogMessage = {\r\n    level: \"log\" | \"warn\" | \"error\";\r\n    message: string;\r\n}\r\n\r\ninterface ConsoleProps {\r\n    logMessages: Array<LogMessage>;\r\n};\r\n\r\nfunction Console(props: ConsoleProps) {\r\n    return (\r\n        <div className=\"consoleBox\">\r\n            {props.logMessages.map((message, i) => {\r\n                let variant = message.level === \"log\" ? \"secondary\" :\r\n                            message.level === \"warn\" ? \"warning\" :\r\n                            message.level === \"error\" ? \"danger\" : \"\";\r\n                return <Alert key={i} variant={variant}>{message.message}</Alert>\r\n            })}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Console;","import { Exercise, ExerciseData } from '../Exercises/Exercise';\r\nclass Sim {\r\n    exercise: Exercise | undefined;\r\n    updateGraphData: (data: Array<ExerciseData>) => void;\r\n\r\n    constructor(updateGraphData: (data: Array<ExerciseData>) => void) {\r\n        this.updateGraphData = updateGraphData;\r\n    }\r\n\r\n    setup(exercise: Exercise) {\r\n        this.exercise = exercise;\r\n    }\r\n\r\n    run() {\r\n        if (this.exercise) {\r\n            this.exercise.reset();\r\n            this.exercise.run();\r\n            this.updateGraphData(this.exercise.data);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Sim;","import Unit from './Unit';\r\n\r\nclass Torque extends Unit {\r\n    private static ozIn_to_nm = 0.007062;\r\n    private static lbFt_to_nm = 1.35584;\r\n\r\n    protected constructor(nm: number) {\r\n        super(nm)\r\n    }\r\n\r\n    /**\r\n     * @param nm newton meters\r\n     */\r\n    static nm(nm: number): Torque {\r\n        return new Torque(nm);\r\n    }\r\n\r\n    /**\r\n     * @returns newton meters\r\n     */\r\n    nm(): number {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * @param oz_in Ounce inches\r\n     */\r\n    static oz_in(oz_in: number): Torque {\r\n        return new Torque(oz_in * Torque.ozIn_to_nm);\r\n    }\r\n\r\n    /**\r\n     * @returns ounce inches\r\n     */\r\n    oz_in(): number {\r\n        return this.value / Torque.ozIn_to_nm;\r\n    }\r\n\r\n    /**\r\n     * @param lb_ft Pound*feet\r\n     */\r\n    static lb_ft(lb_ft: number): Torque {\r\n        return new Torque(lb_ft * Torque.lbFt_to_nm);\r\n    }\r\n\r\n    /**\r\n     * @returns pound feet\r\n     */\r\n    lb_ft(): number {\r\n        return this.value / Torque.lbFt_to_nm;\r\n    }\r\n}\r\n\r\nexport default Torque;","import Unit from \"./Unit\";\r\n\r\nclass Voltage extends Unit {\r\n    protected constructor(volts: number) {\r\n        super(volts)\r\n    }\r\n\r\n    /**\r\n     * @param {Number} v volts\r\n     * @returns {Voltage}\r\n     */\r\n    static v(v: number): Voltage {\r\n        return new Voltage(v);\r\n    }\r\n\r\n    /**\r\n     * @returns volts\r\n     */\r\n    v(): number {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport default Voltage","\r\nexport function clamp(x: number, min: number, max: number) {\r\n    if (x < min) {\r\n        return min;\r\n    } else if (x > max) {\r\n        return max;\r\n    }\r\n\r\n    return x;\r\n}\r\n\r\nexport function angleToCoordinate(angle: number, radius: number): {x: number, y: number} {\r\n    let x = radius * Math.cos(angle);\r\n    let y = radius * Math.sin(angle);\r\n\r\n    return {x, y};\r\n}","import RotationalVelocity from './Units/RotationalVelocity';\r\nimport Torque from './Units/Torque';\r\nimport Voltage from './Units/Voltage';\r\nimport Current from './Units/Current';\r\nimport Length from './Units/Length';\r\nimport Mass from './Units/Mass';\r\nimport { RotationalState } from './RotationalJoint';\r\nimport { Resetable } from '../../Exercises/Exercise';\r\nimport { clamp } from \"../../Utility\";\r\n\r\nclass DCMotor implements Resetable {\r\n    private operatingVoltage: Voltage;\r\n    private stallTorque: Torque;\r\n    private stallCurrent: Current;\r\n    private breakawayTorque: Torque;\r\n    private noLoadSpeed: RotationalVelocity;\r\n    private noLoadCurrent: Current;\r\n    private rotorRadius: Length;\r\n    private rotorMass: Mass;\r\n    private gearRatio: number;\r\n    private electricalConstant: number;\r\n    private suppliedVoltage: Voltage;\r\n    private resistance: number;\r\n\r\n    /**\r\n     * @param {Voltage} operatingVoltage Rated operating voltage\r\n     * @param {Torque} stallTorque Torque when motor is stalled at operating voltage\r\n     * @param {Current} stallCurrent Current when motor is stalled at operating voltage\r\n     * @param {Torque} breakawayTorque Torque required to overcome static friction\r\n     * @param {RotationalVelocity} noLoadSpeed Rotational velocity with no load at operating voltage\r\n     * @param {Current} noLoadCurrent Current with no load at operating voltage\r\n     * @param {Number} electricalConstant K_e of the motor\r\n     * @param {Number} resistance Terminal resistance in ohms\r\n     * @param {Length} rotorRadius Radius of the internal rotor\r\n     * @param {Mass} rotorMass Mass of the internal rotor\r\n     * @param {Number} gearRatio Ratio of built in gearbox (motor revs/output revs)\r\n     */\r\n    constructor(\r\n        operatingVoltage: Voltage,\r\n        stallTorque: Torque,\r\n        stallCurrent: Current,\r\n        breakawayTorque: Torque,\r\n        noLoadSpeed: RotationalVelocity,\r\n        noLoadCurrent: Current,\r\n        resistance: number,\r\n        rotorRadius: Length,\r\n        rotorMass: Mass,\r\n        gearRatio: number\r\n    ) {\r\n        this.operatingVoltage = operatingVoltage;\r\n        this.stallTorque = stallTorque;\r\n        this.stallCurrent = stallCurrent;\r\n        this.breakawayTorque = breakawayTorque;\r\n        this.noLoadSpeed = noLoadSpeed;\r\n        this.noLoadCurrent = noLoadCurrent;\r\n        this.rotorRadius = rotorRadius;\r\n        this.rotorMass = rotorMass;\r\n        this.gearRatio = gearRatio;\r\n        this.resistance = resistance;\r\n\r\n        this.electricalConstant = this.stallTorque.nm() / this.operatingVoltage.v();\r\n\r\n        this.suppliedVoltage = Voltage.v(0);\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.setPower = this.setPower.bind(this);\r\n        this.inertia = this.inertia.bind(this);\r\n        this.torque = this.torque.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        this.suppliedVoltage = Voltage.v(0);\r\n    }\r\n\r\n    setPower(power: number) {\r\n        power = clamp(power, -1, 1);\r\n        this.suppliedVoltage = Voltage.v(this.operatingVoltage.v() * power);\r\n    }\r\n\r\n    inertia(): number {\r\n        // Assume rotor is a solid cylinder\r\n        let rotorInertia = 0.5 * this.rotorMass.kg() * Math.pow(this.rotorRadius.m(), 2);\r\n\r\n        // Translate inertia through gearbox\r\n        let motorInertia = rotorInertia * Math.pow(this.gearRatio, 2)\r\n\r\n        return motorInertia;\r\n    }\r\n\r\n    /**\r\n     * Calculate the output torque of the motor given current\r\n     * rotational velocity and input voltage. Currently ignores motor\r\n     * inductance.\r\n     */\r\n    torque(state: RotationalState): Torque {\r\n        let amps = (this.suppliedVoltage.v() - this.electricalConstant * state.velocity.radS()) / this.resistance;\r\n        let torque = amps * this.electricalConstant;\r\n\r\n        return Torque.nm(torque);\r\n    }\r\n}\r\n\r\nexport default DCMotor;\r\n","import Unit from \"./Unit\";\r\n\r\nclass RotationalVelocity extends Unit {\r\n    private static rps_to_radS = 2 * Math.PI;\r\n    private static rpm_to_radS = 2 * Math.PI / 60;\r\n\r\n    protected constructor(radS: number) {\r\n        super(radS);\r\n    }\r\n\r\n    /**\r\n     * @param radS radians per second\r\n     */\r\n    static radS(radS: number): RotationalVelocity {\r\n        return new RotationalVelocity(radS);\r\n    }\r\n\r\n    /**\r\n     * @returns radians per second\r\n     */\r\n    radS(): number {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * @param rps rotations per second\r\n     */\r\n    static rps(rps: number): RotationalVelocity {\r\n        return new RotationalVelocity(rps * RotationalVelocity.rps_to_radS);\r\n    }\r\n\r\n    /**\r\n     * @returns rotations per second\r\n     */\r\n    rps(): number {\r\n        return this.value / RotationalVelocity.rps_to_radS;\r\n    }\r\n\r\n    /**\r\n     * @param rpm rotations per minute\r\n     */\r\n    static rpm(rpm: number): RotationalVelocity {\r\n        return new RotationalVelocity(rpm * RotationalVelocity.rpm_to_radS);\r\n    }\r\n\r\n    /**\r\n     * @returns rotations per minute\r\n     */\r\n    rpm(): number {\r\n        return this.value / RotationalVelocity.rpm_to_radS;\r\n    }\r\n}\r\n\r\nexport default RotationalVelocity;","import Unit from \"./Unit\";\r\n\r\nclass Current extends Unit {\r\n    protected constructor(amps: number) {\r\n        super(amps);\r\n    }\r\n\r\n    /**\r\n     * @param a amps\r\n     */\r\n    static a(a: number) : Current {\r\n        return new Current(a);\r\n    }\r\n\r\n    /**\r\n     * @returns amps\r\n     */\r\n    a(): number {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport default Current;","import Unit from \"./Unit\";\r\n\r\nclass Length extends Unit {\r\n    protected constructor(meters: number) {\r\n        super(meters)\r\n    }\r\n\r\n    /**\r\n     * @param m meters\r\n     */\r\n    static m(m: number): Length {\r\n        return new Length(m);\r\n    }\r\n\r\n    /**\r\n     * @returns meters\r\n     */\r\n    m(): number {\r\n        return this.value\r\n    }\r\n\r\n    /**\r\n     * @param mm millimetres\r\n     */\r\n    static mm(mm: number): Length {\r\n        return new Length(mm / 1000);\r\n    }\r\n\r\n    /**\r\n     * @returns millimetres\r\n     */\r\n    mm(): number {\r\n        return this.value * 1000;\r\n    }\r\n\r\n}\r\n\r\nexport default Length;","import Unit from \"./Unit\";\r\n\r\nclass Mass extends Unit {\r\n    private static lbs_to_kg = 0.4536;\r\n\r\n    protected constructor(kg: number) {\r\n        super(kg);\r\n    }\r\n\r\n    /**\r\n     * @param kg kilograms\r\n     */\r\n    static kg(kg: number): Mass {\r\n        return new Mass(kg);\r\n    }\r\n\r\n    /**\r\n     * @returns meters\r\n     */\r\n    kg(): number {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * @param g grams\r\n     */\r\n    static g(g: number): Mass {\r\n        return new Mass(g / 1000);\r\n    }\r\n\r\n    /**\r\n     * @returns grams\r\n     */\r\n    g(): number {\r\n        return this.value * 1000;\r\n    }\r\n\r\n    /**\r\n     * @param lbs pounds\r\n     */\r\n    static lbs(lbs: number): Mass {\r\n        return new Mass(lbs * Mass.lbs_to_kg);\r\n    }\r\n\r\n    /**\r\n     * @returns pounds\r\n     */\r\n    lbs(): number {\r\n        return this.value / Mass.lbs_to_kg;\r\n    }\r\n}\r\n\r\nexport default Mass;","import DCMotor from \"../Physics/DCMotor\";\r\nimport RotationalVelocity from '../Physics/Units/RotationalVelocity';\r\nimport Torque from '../Physics/Units/Torque';\r\nimport Voltage from '../Physics/Units/Voltage';\r\nimport Current from '../Physics/Units/Current';\r\nimport Length from '../Physics/Units/Length';\r\nimport Mass from '../Physics/Units/Mass';\r\n\r\n\r\nexport default class RedLine extends DCMotor {\r\n    private static operatingVoltage = Voltage.v(12);\r\n    private static stallTorque = Torque.nm(0.71);\r\n    private static stallCurrent = Current.a(134);\r\n    private static breakawayTorque = Torque.nm(0.05);\r\n    private static noLoadSpeed = RotationalVelocity.rpm(18700);\r\n    private static noLoadCurrent = Current.a(0.7);\r\n    private static resistance = 0.1;\r\n    private static rotorRadius = Length.mm(12.5);\r\n    private static rotorMass = Mass.lbs(0.5);\r\n    private static gearRatio = 1;\r\n\r\n    constructor() {\r\n        super(\r\n            RedLine.operatingVoltage,\r\n            RedLine.stallTorque,\r\n            RedLine.stallCurrent,\r\n            RedLine.breakawayTorque,\r\n            RedLine.noLoadSpeed,\r\n            RedLine.noLoadCurrent,\r\n            RedLine.resistance,\r\n            RedLine.rotorRadius,\r\n            RedLine.rotorMass,\r\n            RedLine.gearRatio\r\n        )\r\n    }\r\n\r\n}\r\n","import Torque from './Units/Torque';\r\nimport RotationalVelocity from './Units/RotationalVelocity';\r\n\r\nclass RotationalFriction {\r\n    staticFriction: Torque;\r\n    dynamicFriction: Torque;\r\n\r\n    constructor(staticFriction: Torque, dynamicFriction: Torque) {\r\n        this.staticFriction = staticFriction;\r\n        this.dynamicFriction = dynamicFriction;\r\n    }\r\n\r\n    /**\r\n     * Get reaction torque at an rpm. Includes torque\r\n     * applied to correctly handle static torque.\r\n     */\r\n    torque(velocity: RotationalVelocity, torque: Torque): Torque {\r\n        if (velocity.radS() === 0 && Math.abs(torque.nm()) <= this.staticFriction.nm()) {\r\n            return torque.negate();\r\n        } else {\r\n            return torque.isPositive() ? this.dynamicFriction.negate() : this.dynamicFriction;\r\n        }\r\n    }\r\n}\r\n\r\nexport default RotationalFriction;","import Unit from \"./Unit\";\r\n\r\nclass RotationalPosition extends Unit {\r\n    private static conversion = Math.PI * 2 / 360;\r\n\r\n    /**\r\n     * @param rad Radians\r\n     */\r\n    protected constructor(rad: number) {\r\n        super(rad);\r\n    }\r\n\r\n    /**\r\n     * @param rad radians\r\n     * @returns {RotationalPosition}\r\n     */\r\n    static rad(rad: number): RotationalPosition {\r\n        return new RotationalPosition(rad);\r\n    }\r\n\r\n    /**\r\n     * @returns radians\r\n     */\r\n    rad(): number {\r\n        return this.value;\r\n    }\r\n\r\n    static deg(deg: number): RotationalPosition {\r\n        return new RotationalPosition(deg * RotationalPosition.conversion);\r\n    }\r\n\r\n    /**\r\n     * @returns degrees\r\n     */\r\n    deg(): number {\r\n        return this.value / RotationalPosition.conversion;\r\n    }\r\n}\r\n\r\nexport default RotationalPosition;","import Unit from \"./Unit\";\r\n\r\nclass RotationalAcceleration extends Unit {\r\n    protected constructor(radS2: number) {\r\n        super(radS2)\r\n    }\r\n\r\n    /**\r\n     * @param radS2 radians per second squared\r\n     */\r\n    static radS2(radS2: number): RotationalAcceleration {\r\n        return new RotationalAcceleration(radS2);\r\n    }\r\n\r\n    /**\r\n     * @returns radS2 radians per second squared\r\n     */\r\n    radS2() {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport default RotationalAcceleration;","import Torque from './Units/Torque';\r\nimport RotationalPosition from './Units/RotationalPosition';\r\nimport RotationalVelocity from './Units/RotationalVelocity';\r\nimport RotationalAcceleration from './Units/RotationalAcceleration';\r\nimport Time from './Units/Time';\r\nimport { Resetable } from '../../Exercises/Exercise';\r\nimport RotationalFriction from './RotationalFriction';\r\n\r\nexport class RotationalState {\r\n    position: RotationalPosition;\r\n    velocity: RotationalVelocity;\r\n    acceleration: RotationalAcceleration;\r\n    torque: Torque;\r\n\r\n    /**\r\n     * @param p position in radians\r\n     * @param v velocity in radians per second\r\n     * @param a acceleration in radians per second squared\r\n     * @param t torque in newton meters\r\n     */\r\n    constructor(\r\n        p: number | RotationalPosition, \r\n        v: number | RotationalVelocity, \r\n        a: number | RotationalAcceleration,\r\n        t: number | Torque\r\n    ) {\r\n        this.position = (p instanceof RotationalPosition) ? p : RotationalPosition.rad(p);\r\n        this.velocity = (v instanceof RotationalVelocity) ? v : RotationalVelocity.radS(v);\r\n        this.acceleration = (a instanceof RotationalAcceleration) ? a : RotationalAcceleration.radS2(a);\r\n        this.torque = (t instanceof Torque) ? t : Torque.nm(t);\r\n    }\r\n};\r\n\r\ntype torqueFunction = (state: RotationalState) => Torque;\r\ntype inertiaFunction = (state: RotationalState) => number;\r\n\r\nexport class RotationalJoint implements Resetable {\r\n    initialState?: RotationalState;\r\n    data: Array<RotationalState>;\r\n\r\n    torques: Array<torqueFunction>;\r\n    inertias: Array<inertiaFunction>;\r\n    friction?: RotationalFriction;\r\n\r\n    constructor(initialState?: RotationalState) {\r\n        if (initialState) {\r\n            this.initialState = initialState;\r\n            this.data = [initialState];\r\n        } else {\r\n            this.data = [{\r\n                position: RotationalPosition.rad(0),\r\n                velocity: RotationalVelocity.radS(0),\r\n                acceleration: RotationalAcceleration.radS2(0),\r\n                torque: Torque.nm(0)\r\n            }];\r\n        }\r\n        \r\n        this.torques = [];\r\n        this.inertias = [];\r\n    }\r\n\r\n    addTorque(t: Array<torqueFunction> | torqueFunction) {\r\n        if (Array.isArray(t)) {\r\n            this.torques.push(...t);\r\n        } else {\r\n            this.torques.push(t);\r\n        }\r\n    }\r\n\r\n    addInertia(i: Array<inertiaFunction> | inertiaFunction) {\r\n        if (Array.isArray(i)) {\r\n            this.inertias.push(...i);\r\n        } else {\r\n            this.inertias.push(i);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        if (this.initialState) {\r\n            this.data = [this.initialState];\r\n        } else {\r\n            this.data = [{\r\n                position: RotationalPosition.rad(0),\r\n                velocity: RotationalVelocity.radS(0),\r\n                acceleration: RotationalAcceleration.radS2(0),\r\n                torque: Torque.nm(0)\r\n            }];\r\n        }\r\n    }\r\n\r\n    get current(): RotationalState {\r\n        return this.data[this.data.length - 1]\r\n    }\r\n\r\n    run(deltaTime: Time) {\r\n        let jTotal = this.inertias.reduce((accumulator, j) => {\r\n            return accumulator + j(this.current);\r\n        }, 0);\r\n\r\n        let torqueTotal = this.torques.reduce((accumulator, t) => {\r\n            return accumulator + t(this.current).nm();\r\n        }, 0);\r\n\r\n        if (this.friction) {\r\n            torqueTotal += this.friction.torque(this.current.velocity, Torque.nm(torqueTotal)).nm();\r\n        }\r\n\r\n        let acceleration = RotationalAcceleration.radS2(torqueTotal / jTotal);\r\n        let velocity = RotationalVelocity.radS(this.current.velocity.radS() + (acceleration.radS2() * deltaTime.s()))\r\n        let position = RotationalPosition.rad(this.current.position.rad() + (velocity.radS() * deltaTime.s()));\r\n\r\n        this.data.push({\r\n            position,\r\n            velocity,\r\n            acceleration,\r\n            torque: Torque.nm(torqueTotal)\r\n        });\r\n    }\r\n}","import Length from \"../Physics/Units/Length\";\r\nimport Mass from \"../Physics/Units/Mass\";\r\nimport Wheel from \"../Physics/Wheel\";\r\n\r\nexport default class SteelFlywheel extends Wheel {\r\n    private static radius = Length.mm(100);\r\n    private static mass = Mass.kg(4);\r\n\r\n    constructor() {\r\n        super(SteelFlywheel.radius, SteelFlywheel.mass);\r\n    }\r\n}","import Mass from './Units/Mass';\r\nimport Length from './Units/Length';\r\n\r\n/**\r\n * Creates a \"wheel\" simulated as a solid cylinder to hand to a motor.\r\n */\r\nclass Wheel {\r\n    radius: Length;\r\n    mass: Mass;\r\n\r\n    constructor(radius: Length, mass: Mass) {\r\n        this.radius = radius;\r\n        this.mass = mass;\r\n\r\n        this.inertia = this.inertia.bind(this);\r\n    }\r\n\r\n    inertia(): number {\r\n        return 0.5 * this.mass.kg() * Math.pow(this.radius.m(), 2);\r\n    }\r\n}\r\n\r\nexport default Wheel;","import Time from \"../Sim/Physics/Units/Time\";\r\nimport p5Type from \"p5\";\r\n\r\nexport type ControlSystem = {\r\n    (target: number, current: number): number;\r\n}\r\n\r\nexport type ExerciseData = {\r\n    time: number;\r\n    target: number;\r\n    current: number;\r\n    setPoint: number;\r\n}\r\n\r\nexport type GraphConfig = {\r\n    yLabel?: string,\r\n    xLabel?: string,\r\n    tickFormater?(value: any, index: number): string,\r\n    riseTimeValue?: number;\r\n    overshootValue?: number;\r\n    steadyStateError?: number;\r\n    graphKeys?: Array<string>;\r\n}\r\n\r\nexport interface Resetable {\r\n    reset(): void;\r\n}\r\n\r\nexport abstract class Exercise implements Resetable {\r\n    abstract name: string;\r\n    data: Array<ExerciseData>;\r\n    totalTime: Time;\r\n    timeStep: Time;\r\n    starterCode: string;\r\n    target: number;\r\n    controlSystem: ControlSystem;\r\n    abstract graphConfig: GraphConfig;\r\n    drawStep: number;\r\n\r\n    abstract draw(p5: p5Type): void;\r\n    protected abstract runStep(currentTime: Time): void;\r\n\r\n    constructor(totalTime: Time, timeStep: Time, starterCode: string, target: number) {\r\n        this.data = [];\r\n\r\n        this.totalTime = totalTime;\r\n        this.timeStep = timeStep;\r\n        this.starterCode = starterCode;\r\n        this.target = target;\r\n        this.controlSystem = () => 0;\r\n        this.drawStep = 0;\r\n    }\r\n\r\n    reset() {\r\n        this.data = [];\r\n    }\r\n\r\n    run(): void {\r\n        for(let t = 0; t < this.totalTime.ms(); t += this.timeStep.ms()) {\r\n            this.runStep(Time.ms(t));\r\n        }\r\n    }\r\n};\r\n","import RedLine from \"../Sim/Motors/RedLine\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalVelocity from \"../Sim/Physics/Units/RotationalVelocity\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport SteelFlywheel from \"../Sim/Wheels/SteelFlywheel\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to control a 775 pro to spin a\r\n* steel flywheel at 10 revolutions per second (rps).\r\n* \r\n* Your control system is handed two things, a target rps\r\n* and a current rps. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n(target, current) => {\r\n    return 0;\r\n}\r\n\r\n`\r\n\r\nclass Exercise1 extends Exercise {\r\n    name = \"Exercise1\";\r\n    private static totalTime = Time.s(5);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalVelocity.rps(10);\r\n\r\n    private staticFriction = Torque.nm(0.2);\r\n    private dynamicFriction = Torque.nm(0.1);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new RedLine();\r\n    private wheel = new SteelFlywheel();\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n\r\n    graphConfig = {\r\n        yLabel: \"rps\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise1.totalTime, Exercise1.timeStep, starterCode, Exercise1.initialTarget.rps())\r\n\r\n        this.joint.addInertia([\r\n            this.wheel.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque,\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.velocity.rps();\r\n        let setPoint = this.controlSystem(this.target, current);\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let radius = 75;\r\n        let angle = this.joint.data[this.drawStep].position.rad();\r\n        let {x, y} = angleToCoordinate(angle, radius);\r\n\r\n\t\tp5.background(255);\r\n\r\n        p5.fill(66, 135, 245);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 200, 200);\r\n\r\n        p5.fill(66, 245, 111);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX + x, centerY + y, 20, 20);\r\n    }\r\n}\r\n\r\nexport default Exercise1;","import DCMotor from \"../Physics/DCMotor\";\r\nimport RotationalVelocity from '../Physics/Units/RotationalVelocity';\r\nimport Torque from '../Physics/Units/Torque';\r\nimport Voltage from '../Physics/Units/Voltage';\r\nimport Current from '../Physics/Units/Current';\r\nimport Length from '../Physics/Units/Length';\r\nimport Mass from '../Physics/Units/Mass';\r\n\r\nexport default class NeverestOrbital20 extends DCMotor {\r\n    private static operatingVoltage = Voltage.v(12);\r\n    private static stallTorque = Torque.nm(3.32);\r\n    private static stallCurrent = Current.a(11.5);\r\n    private static breakawayTorque = Torque.oz_in(6.4);\r\n    private static noLoadSpeed = RotationalVelocity.rpm(285);\r\n    private static noLoadCurrent = Current.a(0.2);\r\n    private static resistance = 1;\r\n    private static rotorRadius = Length.mm(12);\r\n    private static rotorMass = Mass.g(83);\r\n    private static gearRatio = 19.2;\r\n\r\n    constructor() {\r\n        super(\r\n            NeverestOrbital20.operatingVoltage,\r\n            NeverestOrbital20.stallTorque,\r\n            NeverestOrbital20.stallCurrent,\r\n            NeverestOrbital20.breakawayTorque,\r\n            NeverestOrbital20.noLoadSpeed,\r\n            NeverestOrbital20.noLoadCurrent,\r\n            NeverestOrbital20.resistance,\r\n            NeverestOrbital20.rotorRadius,\r\n            NeverestOrbital20.rotorMass,\r\n            NeverestOrbital20.gearRatio\r\n        )\r\n    }\r\n\r\n}\r\n","import Mass from \"./Units/Mass\";\r\nimport Length from \"./Units/Length\";\r\n\r\nexport class PointMass {\r\n    mass: Mass;\r\n    length: Length;\r\n\r\n    constructor(mass: Mass, length: Length) {\r\n        this.mass = mass;\r\n        this.length = length;\r\n\r\n        this.inertia = this.inertia.bind(this);\r\n    }\r\n\r\n    inertia(): number {\r\n        return this.mass.kg() * Math.pow(this.length.m(), 2);\r\n    }\r\n}\r\n\r\nexport class RodAboutEnd {\r\n    mass: Mass;\r\n    length: Length;\r\n\r\n    constructor(mass: Mass, length: Length) {\r\n        this.mass = mass;\r\n        this.length = length;\r\n\r\n        this.inertia = this.inertia.bind(this);\r\n    }\r\n\r\n    inertia(): number {\r\n        return this.mass.kg() * Math.pow(this.length.m(), 2) / 3;\r\n    }\r\n}","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalPosition from \"../Sim/Physics/Units/RotationalPosition\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { RodAboutEnd } from \"../Sim/Physics/MomentOfInertia\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to point an arm at a particular angle using a Neverest\r\n* orbital 20.\r\n* \r\n* Your control system is handed two things, a target angle in degrees\r\n* and a current angle in degrees. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n(target, current) => {\r\n    if (current < target) {\r\n        return 1;\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\n`\r\n\r\nclass Exercise2 extends Exercise {\r\n    name = \"Exercise2\";\r\n    private static totalTime = Time.s(3);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalPosition.deg(180);\r\n\r\n    private staticFriction = Torque.nm(0.2);\r\n    private dynamicFriction = Torque.nm(0.1);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private arm = new RodAboutEnd(Mass.g(100), Length.mm(300));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"degrees\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise2.totalTime, Exercise2.timeStep, starterCode, Exercise2.initialTarget.deg())\r\n\r\n        this.joint.addInertia([\r\n            this.arm.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg();\r\n        let setPoint = this.controlSystem(this.target, current);\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let armLength = 200;\r\n        let angle = this.joint.data[this.drawStep].position.rad() + Math.PI;\r\n        let {x, y} = angleToCoordinate(angle, armLength);\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Coordinate system\r\n        p5.push();\r\n        p5.strokeWeight(1);\r\n        p5.stroke(100);\r\n        p5.line(centerX, 0, centerX, p5.height);\r\n        p5.line(0, centerY, p5.width, centerY);\r\n        p5.pop();\r\n\r\n        // Wires\r\n        p5.push();\r\n        p5.strokeWeight(5);\r\n        p5.stroke(0);\r\n        p5.line(centerX - 2, centerY, centerX - 2, centerY - 100);\r\n        p5.stroke(255, 0, 0);\r\n        p5.line(centerX + 2, centerY, centerX + 2, centerY - 100);\r\n        p5.pop();\r\n\r\n        // Motor outline\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.fill(255);\r\n        p5.strokeWeight(3);\r\n        p5.ellipse(centerX, centerY, 100, 100);\r\n        p5.pop();\r\n\r\n        // Bolt holes\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.ellipse(centerX - 35, centerY, 8, 8);\r\n        p5.ellipse(centerX + 35, centerY, 8, 8);\r\n        p5.ellipse(centerX, centerY - 35, 8, 8);\r\n        p5.ellipse(centerX, centerY + 35, 8, 8);\r\n        p5.pop();\r\n\r\n        // Arm\r\n        p5.push();\r\n        p5.stroke(p5.GRAY);\r\n        p5.strokeWeight(20);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX, centerY, centerX + x, centerY + y);\r\n        p5.pop();\r\n\r\n        // Motor shaft\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 10, 10);\r\n        p5.pop();\r\n    }\r\n}\r\n\r\nexport default Exercise2;","import NeverestOrbital20 from \"../Sim/Motors/NeverestOrbital20\";\r\nimport RotationalFriction from \"../Sim/Physics/RotationalFriction\";\r\nimport { RotationalJoint } from \"../Sim/Physics/RotationalJoint\";\r\nimport RotationalPosition from \"../Sim/Physics/Units/RotationalPosition\";\r\nimport Time from \"../Sim/Physics/Units/Time\";\r\nimport Torque from \"../Sim/Physics/Units/Torque\";\r\nimport Mass from \"../Sim/Physics/Units/Mass\";\r\nimport Length from \"../Sim/Physics/Units/Length\";\r\nimport { Exercise, Resetable } from \"./Exercise\";\r\nimport p5Type from \"p5\";\r\nimport { PointMass, RodAboutEnd } from \"../Sim/Physics/MomentOfInertia\";\r\nimport { angleToCoordinate } from '../Utility';\r\n\r\nconst starterCode = `\r\n/*\r\n* Your control system!\r\n*\r\n* You are trying to point an arm at a particular angle using a Neverest\r\n* orbital 20. This time, we've added a weight on the end!\r\n* \r\n* Your control system is handed two things, a target angle in degrees\r\n* and a current angle in degrees. Based on those, you must decide what\r\n* to set the motor to, which is any number between -1 and 1.\r\n* \r\n* Some examples:\r\n*   Full power forwards: 1\r\n*   Full power backwards: -1\r\n*   Half power forwards: 0.5\r\n*   No power: 0\r\n*\r\n* Good luck!\r\n*/\r\n(target, current) => {\r\n    if (current < target) {\r\n        return 1;\r\n    } else {\r\n        return -1;\r\n    }\r\n}\r\n\r\n`\r\n\r\nclass Exercise3 extends Exercise {\r\n    name = \"Exercise3\";\r\n    private static totalTime = Time.s(3);\r\n    private static timeStep = Time.ms(5);\r\n    private static initialTarget = RotationalPosition.deg(180);\r\n\r\n    private staticFriction = Torque.nm(0.2);\r\n    private dynamicFriction = Torque.nm(0.1);\r\n    private friction = new RotationalFriction(this.staticFriction, this.dynamicFriction);\r\n    private joint = new RotationalJoint();\r\n    private motor = new NeverestOrbital20();\r\n    private arm = new RodAboutEnd(Mass.g(100), Length.mm(300));\r\n    private weight = new PointMass(Mass.g(200), Length.mm(300));\r\n    private resetables: Array<Resetable> = [this.joint, this.motor];\r\n\r\n    graphConfig = {\r\n        yLabel: \"degrees\",\r\n        xLabel: \"Time (s)\",\r\n        tickFormater: (value: any) => \r\n            isNaN(value) ? value : (value / 1000).toFixed(1).toString(),\r\n        // riseTimeValue?: number,\r\n        // overshootValue?: number,\r\n        // steadyStateError?: number,\r\n        graphKeys: [\"current\", \"target\"]\r\n    };\r\n\r\n    constructor() {\r\n        super(Exercise3.totalTime, Exercise3.timeStep, starterCode, Exercise3.initialTarget.deg())\r\n\r\n        this.joint.addInertia([\r\n            this.arm.inertia,\r\n            this.weight.inertia,\r\n            this.motor.inertia\r\n        ]);\r\n        this.joint.addTorque([\r\n            this.motor.torque\r\n        ])\r\n        this.joint.friction = this.friction;\r\n\r\n        this.reset = this.reset.bind(this);\r\n        this.runStep = this.runStep.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        for (let resetable of this.resetables) {\r\n            resetable.reset();\r\n        }\r\n    }\r\n\r\n    runStep(currentTime: Time) {\r\n        let current = this.joint.current.position.deg();\r\n        let setPoint = this.controlSystem(this.target, current);\r\n        this.motor.setPower(setPoint);\r\n        this.joint.run(this.timeStep);\r\n\r\n        this.data.push({\r\n            time: currentTime.ms(),\r\n            target: this.target,\r\n            current,\r\n            setPoint\r\n        })\r\n    }\r\n\r\n    draw(p5: p5Type) {\r\n        const centerX = p5.width / 2;\r\n        const centerY = p5.height / 2;\r\n\r\n        let armLength = 200;\r\n        let angle = this.joint.data[this.drawStep].position.rad() + Math.PI;\r\n        let arm = angleToCoordinate(angle, armLength);\r\n        let weight = angleToCoordinate(angle, armLength - 20);\r\n\r\n\t\tp5.background(255);\r\n\r\n        // Coordinate system\r\n        p5.push();\r\n        p5.strokeWeight(1);\r\n        p5.stroke(100);\r\n        p5.line(centerX, 0, centerX, p5.height);\r\n        p5.line(0, centerY, p5.width, centerY);\r\n        p5.pop();\r\n\r\n        // Wires\r\n        p5.push();\r\n        p5.strokeWeight(5);\r\n        p5.stroke(0);\r\n        p5.line(centerX - 2, centerY, centerX - 2, centerY - 100);\r\n        p5.stroke(255, 0, 0);\r\n        p5.line(centerX + 2, centerY, centerX + 2, centerY - 100);\r\n        p5.pop();\r\n\r\n        // Motor outline\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.fill(255);\r\n        p5.strokeWeight(3);\r\n        p5.ellipse(centerX, centerY, 100, 100);\r\n        p5.pop();\r\n\r\n        // Bolt holes\r\n        p5.push();\r\n        p5.stroke(0);\r\n        p5.strokeWeight(2);\r\n        p5.ellipse(centerX - 35, centerY, 8, 8);\r\n        p5.ellipse(centerX + 35, centerY, 8, 8);\r\n        p5.ellipse(centerX, centerY - 35, 8, 8);\r\n        p5.ellipse(centerX, centerY + 35, 8, 8);\r\n        p5.pop();\r\n\r\n        // Arm\r\n        p5.push();\r\n        p5.stroke(p5.GRAY);\r\n        p5.strokeWeight(20);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX, centerY, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Weight\r\n        p5.push();\r\n        p5.stroke(50);\r\n        p5.strokeWeight(50);\r\n        p5.strokeCap(\"square\");\r\n        p5.line(centerX + weight.x, centerY + weight.y, centerX + arm.x, centerY + arm.y);\r\n        p5.pop();\r\n\r\n        // Motor shaft\r\n        p5.push();\r\n        p5.fill(0);\r\n        p5.noStroke();\r\n        p5.ellipse(centerX, centerY, 10, 10);\r\n        p5.pop();\r\n    }\r\n}\r\n\r\nexport default Exercise3;","import { Exercise } from \"./Exercise\";\r\nimport Exercise1 from \"./Exercise1\";\r\nimport Exercise2 from \"./Exercise2\";\r\nimport Exercise3 from \"./Exercise3\";\r\n\r\nfunction GetExercise(exerciseNumber: string | null): Exercise {\r\n    switch(exerciseNumber) {\r\n        case \"1\":\r\n            return new Exercise1();\r\n        case \"2\":\r\n            return new Exercise2();\r\n        case \"3\":\r\n            return new Exercise3();\r\n        default:\r\n            return new Exercise1();\r\n    }\r\n}\r\n\r\nexport default GetExercise;","\r\nclass Unit {\r\n    protected value: number;\r\n\r\n    constructor(value: number) {\r\n        this.value = value;\r\n    }\r\n\r\n    equals(other: Unit): boolean {\r\n        return this.value === other.value;\r\n    }\r\n\r\n    isPositive(): boolean {\r\n        return this.value >= 0;\r\n    }\r\n\r\n    isNegative(): boolean {\r\n        return !this.isPositive();\r\n    }\r\n\r\n    negate<UnitType extends Unit>(): UnitType {\r\n        let toReturn = Object.create(this);\r\n        toReturn.value = -this.value;\r\n        return toReturn;\r\n    }\r\n}\r\n\r\nexport default Unit;","import Unit from \"./Unit\";\r\n\r\nclass Time extends Unit {\r\n    protected constructor(s: number) {\r\n        super(s);\r\n    }\r\n\r\n    /**\r\n     * @param s seconds\r\n     */\r\n    static s(s: number): Time {\r\n        return new Time(s);\r\n    }\r\n\r\n    /**\r\n     * @returns seconds\r\n     */\r\n    s(): number {\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * @param ms milliseconds\r\n     */\r\n    static ms(ms: number): Time {\r\n        return new Time(ms / 1000);\r\n    }\r\n\r\n    /**\r\n     * @returns milliseconds\r\n     */\r\n    ms(): number {\r\n        return this.value * 1000;\r\n    }\r\n}\r\n\r\nexport default Time;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}